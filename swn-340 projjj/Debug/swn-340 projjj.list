
swn-340 projjj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800196c  0800196c  0001196c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019f8  080019f8  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  080019f8  080019f8  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019f8  080019f8  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019f8  080019f8  000119f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019fc  080019fc  000119fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08001a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000058  08001a58  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08001a58  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000394c  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001193  00000000  00000000  00023a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003a8  00000000  00000000  00024bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000027e  00000000  00000000  00024f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001c04  00000000  00000000  000251d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006a1f  00000000  00000000  00026dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f522a  00000000  00000000  0002d7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001028  00000000  00000000  00122a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00123a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000058 	.word	0x20000058
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001954 	.word	0x08001954

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	08001954 	.word	0x08001954

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08a      	sub	sp, #40	; 0x28
 8000274:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	f107 0314 	add.w	r3, r7, #20
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000286:	4b30      	ldr	r3, [pc, #192]	; (8000348 <GPIO_Init+0xd8>)
 8000288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800028a:	4a2f      	ldr	r2, [pc, #188]	; (8000348 <GPIO_Init+0xd8>)
 800028c:	f043 0304 	orr.w	r3, r3, #4
 8000290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000292:	4b2d      	ldr	r3, [pc, #180]	; (8000348 <GPIO_Init+0xd8>)
 8000294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000296:	f003 0304 	and.w	r3, r3, #4
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800029e:	4b2a      	ldr	r3, [pc, #168]	; (8000348 <GPIO_Init+0xd8>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	4a29      	ldr	r2, [pc, #164]	; (8000348 <GPIO_Init+0xd8>)
 80002a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002aa:	4b27      	ldr	r3, [pc, #156]	; (8000348 <GPIO_Init+0xd8>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002b6:	4b24      	ldr	r3, [pc, #144]	; (8000348 <GPIO_Init+0xd8>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	4a23      	ldr	r2, [pc, #140]	; (8000348 <GPIO_Init+0xd8>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002c2:	4b21      	ldr	r3, [pc, #132]	; (8000348 <GPIO_Init+0xd8>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	f003 0301 	and.w	r3, r3, #1
 80002ca:	60bb      	str	r3, [r7, #8]
 80002cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80002ce:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <GPIO_Init+0xd8>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <GPIO_Init+0xd8>)
 80002d4:	f043 0302 	orr.w	r3, r3, #2
 80002d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002da:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <GPIO_Init+0xd8>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	f003 0302 	and.w	r3, r3, #2
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 80002e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80002f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f2:	2300      	movs	r3, #0
 80002f4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	4619      	mov	r1, r3
 80002fc:	4813      	ldr	r0, [pc, #76]	; (800034c <GPIO_Init+0xdc>)
 80002fe:	f000 fce3 	bl	8000cc8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = S1_Pin;
 8000302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000306:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000308:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800030c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800030e:	2302      	movs	r3, #2
 8000310:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8000312:	f107 0314 	add.w	r3, r7, #20
 8000316:	4619      	mov	r1, r3
 8000318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031c:	f000 fcd4 	bl	8000cc8 <HAL_GPIO_Init>

	/* EXTI15_10_IRQn interrupt init*/
	// Note you will ahave to add EXTI15_10_IRQn Interrupt handler function as well
	// This is the interrupt handler for the blue button
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000320:	2200      	movs	r2, #0
 8000322:	2100      	movs	r1, #0
 8000324:	2028      	movs	r0, #40	; 0x28
 8000326:	f000 fca4 	bl	8000c72 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800032a:	2028      	movs	r0, #40	; 0x28
 800032c:	f000 fcbd 	bl	8000caa <HAL_NVIC_EnableIRQ>


	/* EXTI9_5_IRQn interrupt init*/
	// Note you will have to add EXTI9_15_IRQn Interrupt handler function as well
	// This is the interrupt handler for the external buttons (S1)
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000330:	2200      	movs	r2, #0
 8000332:	2101      	movs	r1, #1
 8000334:	2017      	movs	r0, #23
 8000336:	f000 fc9c 	bl	8000c72 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800033a:	2017      	movs	r0, #23
 800033c:	f000 fcb5 	bl	8000caa <HAL_NVIC_EnableIRQ>

}
 8000340:	bf00      	nop
 8000342:	3728      	adds	r7, #40	; 0x28
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40021000 	.word	0x40021000
 800034c:	48000800 	.word	0x48000800

08000350 <LED_Init>:

//******************************************************************************************
// User pin = LD2 Green pin = PA.5
//******************************************************************************************

void LED_Init(uint8_t pin){
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 800035a:	4b2b      	ldr	r3, [pc, #172]	; (8000408 <LED_Init+0xb8>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035e:	4a2a      	ldr	r2, [pc, #168]	; (8000408 <LED_Init+0xb8>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));
 8000366:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	2103      	movs	r1, #3
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	43db      	mvns	r3, r3
 8000378:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800037c:	4013      	ands	r3, r2
 800037e:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 8000380:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	2101      	movs	r1, #1
 800038c:	fa01 f303 	lsl.w	r3, r1, r3
 8000390:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000394:	4313      	orrs	r3, r2
 8000396:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 8000398:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	2103      	movs	r1, #3
 80003a4:	fa01 f303 	lsl.w	r3, r1, r3
 80003a8:	43db      	mvns	r3, r3
 80003aa:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003ae:	4013      	ands	r3, r2
 80003b0:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 80003b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b6:	689a      	ldr	r2, [r3, #8]
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	2103      	movs	r1, #3
 80003be:	fa01 f303 	lsl.w	r3, r1, r3
 80003c2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003c6:	4313      	orrs	r3, r2
 80003c8:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 80003ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ce:	685a      	ldr	r2, [r3, #4]
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	2101      	movs	r1, #1
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	43db      	mvns	r3, r3
 80003da:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003de:	4013      	ands	r3, r2
 80003e0:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 80003e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e6:	68da      	ldr	r2, [r3, #12]
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	2103      	movs	r1, #3
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43db      	mvns	r3, r3
 80003f4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003f8:	4013      	ands	r3, r2
 80003fa:	60cb      	str	r3, [r1, #12]
	
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	40021000 	.word	0x40021000

0800040c <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000412:	4b6b      	ldr	r3, [pc, #428]	; (80005c0 <System_Clock_Init+0x1b4>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a6a      	ldr	r2, [pc, #424]	; (80005c0 <System_Clock_Init+0x1b4>)
 8000418:	f023 0307 	bic.w	r3, r3, #7
 800041c:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 800041e:	4b68      	ldr	r3, [pc, #416]	; (80005c0 <System_Clock_Init+0x1b4>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a67      	ldr	r2, [pc, #412]	; (80005c0 <System_Clock_Init+0x1b4>)
 8000424:	f043 0302 	orr.w	r3, r3, #2
 8000428:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 800042a:	4b66      	ldr	r3, [pc, #408]	; (80005c4 <System_Clock_Init+0x1b8>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a65      	ldr	r2, [pc, #404]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000434:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 8000436:	bf00      	nop
 8000438:	4b62      	ldr	r3, [pc, #392]	; (80005c4 <System_Clock_Init+0x1b8>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000440:	2b00      	cmp	r3, #0
 8000442:	d0f9      	beq.n	8000438 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 8000444:	2310      	movs	r3, #16
 8000446:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 8000448:	4b5e      	ldr	r3, [pc, #376]	; (80005c4 <System_Clock_Init+0x1b8>)
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	4a5d      	ldr	r2, [pc, #372]	; (80005c4 <System_Clock_Init+0x1b8>)
 800044e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000452:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000454:	4b5b      	ldr	r3, [pc, #364]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000456:	685a      	ldr	r2, [r3, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	061b      	lsls	r3, r3, #24
 800045c:	4959      	ldr	r1, [pc, #356]	; (80005c4 <System_Clock_Init+0x1b8>)
 800045e:	4313      	orrs	r3, r2
 8000460:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000462:	4b58      	ldr	r3, [pc, #352]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a57      	ldr	r2, [pc, #348]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000468:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800046c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 800046e:	bf00      	nop
 8000470:	4b54      	ldr	r3, [pc, #336]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800047c:	d0f8      	beq.n	8000470 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 800047e:	4b51      	ldr	r3, [pc, #324]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000480:	68db      	ldr	r3, [r3, #12]
 8000482:	4a50      	ldr	r2, [pc, #320]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000484:	f023 0303 	bic.w	r3, r3, #3
 8000488:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800048a:	4b4e      	ldr	r3, [pc, #312]	; (80005c4 <System_Clock_Init+0x1b8>)
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	4a4d      	ldr	r2, [pc, #308]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000490:	f043 0302 	orr.w	r3, r3, #2
 8000494:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 8000496:	4b4b      	ldr	r3, [pc, #300]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000498:	68db      	ldr	r3, [r3, #12]
 800049a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800049e:	4a49      	ldr	r2, [pc, #292]	; (80005c4 <System_Clock_Init+0x1b8>)
 80004a0:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80004a4:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <System_Clock_Init+0x1b8>)
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004ae:	4a45      	ldr	r2, [pc, #276]	; (80005c4 <System_Clock_Init+0x1b8>)
 80004b0:	f043 0310 	orr.w	r3, r3, #16
 80004b4:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 80004b6:	4b43      	ldr	r3, [pc, #268]	; (80005c4 <System_Clock_Init+0x1b8>)
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	4a42      	ldr	r2, [pc, #264]	; (80005c4 <System_Clock_Init+0x1b8>)
 80004bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80004c0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 80004c2:	4b40      	ldr	r3, [pc, #256]	; (80005c4 <System_Clock_Init+0x1b8>)
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	4a3f      	ldr	r2, [pc, #252]	; (80005c4 <System_Clock_Init+0x1b8>)
 80004c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004cc:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 80004ce:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <System_Clock_Init+0x1b8>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a3c      	ldr	r2, [pc, #240]	; (80005c4 <System_Clock_Init+0x1b8>)
 80004d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004d8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 80004da:	bf00      	nop
 80004dc:	4b39      	ldr	r3, [pc, #228]	; (80005c4 <System_Clock_Init+0x1b8>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d0f9      	beq.n	80004dc <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 80004e8:	4b36      	ldr	r3, [pc, #216]	; (80005c4 <System_Clock_Init+0x1b8>)
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	4a35      	ldr	r2, [pc, #212]	; (80005c4 <System_Clock_Init+0x1b8>)
 80004ee:	f023 0303 	bic.w	r3, r3, #3
 80004f2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 80004f4:	4b33      	ldr	r3, [pc, #204]	; (80005c4 <System_Clock_Init+0x1b8>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	4a32      	ldr	r2, [pc, #200]	; (80005c4 <System_Clock_Init+0x1b8>)
 80004fa:	f043 0303 	orr.w	r3, r3, #3
 80004fe:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000500:	bf00      	nop
 8000502:	4b30      	ldr	r3, [pc, #192]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000504:	689b      	ldr	r3, [r3, #8]
 8000506:	f003 030c 	and.w	r3, r3, #12
 800050a:	2b0c      	cmp	r3, #12
 800050c:	d1f9      	bne.n	8000502 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 800050e:	4b2d      	ldr	r3, [pc, #180]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000510:	689b      	ldr	r3, [r3, #8]
 8000512:	4a2c      	ldr	r2, [pc, #176]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000514:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000518:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 800051a:	4b2a      	ldr	r3, [pc, #168]	; (80005c4 <System_Clock_Init+0x1b8>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	4a29      	ldr	r2, [pc, #164]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000520:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000524:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 8000526:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	4a26      	ldr	r2, [pc, #152]	; (80005c4 <System_Clock_Init+0x1b8>)
 800052c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000530:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000532:	4b24      	ldr	r3, [pc, #144]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a23      	ldr	r2, [pc, #140]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000538:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800053c:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 800053e:	bf00      	nop
 8000540:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800054c:	d0f8      	beq.n	8000540 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000550:	691b      	ldr	r3, [r3, #16]
 8000552:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000554:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000558:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 800055a:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <System_Clock_Init+0x1b8>)
 800055c:	691b      	ldr	r3, [r3, #16]
 800055e:	4a19      	ldr	r2, [pc, #100]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000560:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000564:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8000566:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000568:	691b      	ldr	r3, [r3, #16]
 800056a:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <System_Clock_Init+0x1b8>)
 800056c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000570:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000572:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000574:	691b      	ldr	r3, [r3, #16]
 8000576:	4a13      	ldr	r2, [pc, #76]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800057c:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a10      	ldr	r2, [pc, #64]	; (80005c4 <System_Clock_Init+0x1b8>)
 8000584:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000588:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 800058a:	bf00      	nop
 800058c:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <System_Clock_Init+0x1b8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0f9      	beq.n	800058c <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <System_Clock_Init+0x1b8>)
 800059a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800059e:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <System_Clock_Init+0x1b8>)
 80005a0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80005a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <System_Clock_Init+0x1b8>)
 80005aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ac:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <System_Clock_Init+0x1b8>)
 80005ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005b2:	6613      	str	r3, [r2, #96]	; 0x60
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	40022000 	.word	0x40022000
 80005c4:	40021000 	.word	0x40021000

080005c8 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 80005cc:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <UART2_Init+0x40>)
 80005ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <UART2_Init+0x40>)
 80005d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d6:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <UART2_Init+0x40>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <UART2_Init+0x40>)
 80005e0:	f023 030c 	bic.w	r3, r3, #12
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <UART2_Init+0x40>)
 80005ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ee:	4a06      	ldr	r2, [pc, #24]	; (8000608 <UART2_Init+0x40>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 80005f8:	f000 f80a 	bl	8000610 <UART2_GPIO_Init>
	USART_Init(USART2);
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <UART2_Init+0x44>)
 80005fe:	f000 f84f 	bl	80006a0 <USART_Init>
	
//	NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
//	NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000
 800060c:	40004400 	.word	0x40004400

08000610 <UART2_GPIO_Init>:
void UART2_GPIO_Init(void) {
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <UART2_GPIO_Init+0x8c>)
 8000616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000618:	4a20      	ldr	r2, [pc, #128]	; (800069c <UART2_GPIO_Init+0x8c>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 8000620:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800062a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800062e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 8000630:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800063a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800063e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 8000640:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000644:	6a1b      	ldr	r3, [r3, #32]
 8000646:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800064a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800064e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 8000650:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000654:	6a1b      	ldr	r3, [r3, #32]
 8000656:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800065a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800065e:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 8000660:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800066a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800066e:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000670:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800067a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800067e:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 8000680:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800068a:	f023 030c 	bic.w	r3, r3, #12
 800068e:	6053      	str	r3, [r2, #4]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000

080006a0 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f023 0201 	bic.w	r2, r3, #1
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f242 028d 	movw	r2, #8333	; 0x208d
 80006de:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f043 020c 	orr.w	r2, r3, #12
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a2f      	ldr	r2, [pc, #188]	; (80007ac <USART_Init+0x10c>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d129      	bne.n	8000748 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f043 0220 	orr.w	r2, r3, #32
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f023 0210 	bic.w	r2, r3, #16
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f023 0201 	bic.w	r2, r3, #1
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a19      	ldr	r2, [pc, #100]	; (80007b0 <USART_Init+0x110>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d111      	bne.n	8000774 <USART_Init+0xd4>
		USARTx->ICR |= USART_ICR_TCCF;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6a1b      	ldr	r3, [r3, #32]
 8000754:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <USART_Init+0x114>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <USART_Init+0x114>)
 8000762:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000766:	6093      	str	r3, [r2, #8]
		USARTx-> CR1 |= USART_CR1_RXNEIE;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f043 0220 	orr.w	r2, r3, #32
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	601a      	str	r2, [r3, #0]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f043 0201 	orr.w	r2, r3, #1
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000780:	bf00      	nop
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800078a:	2b00      	cmp	r3, #0
 800078c:	d0f9      	beq.n	8000782 <USART_Init+0xe2>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 800078e:	bf00      	nop
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	69db      	ldr	r3, [r3, #28]
 8000794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0f9      	beq.n	8000790 <USART_Init+0xf0>
}
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40004c00 	.word	0x40004c00
 80007b0:	40004400 	.word	0x40004400
 80007b4:	40013800 	.word	0x40013800

080007b8 <USART_Write>:
	}else{
		return ((uint8_t)(USARTx->RDR & 0xFF));
	}
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e014      	b.n	80007f4 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 80007ca:	bf00      	nop
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d0f9      	beq.n	80007cc <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 80007e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007ea:	f000 f819 	bl	8000820 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	3301      	adds	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d8e6      	bhi.n	80007ca <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 80007fc:	bf00      	nop
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000806:	2b00      	cmp	r3, #0
 8000808:	d0f9      	beq.n	80007fe <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	69db      	ldr	r3, [r3, #28]
 800080e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	61da      	str	r2, [r3, #28]
}   
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2264      	movs	r2, #100	; 0x64
 800082c:	fb03 f202 	mul.w	r2, r3, r2
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <USART_Delay+0x3c>)
 8000832:	fba3 1302 	umull	r1, r3, r3, r2
 8000836:	1ad2      	subs	r2, r2, r3
 8000838:	0852      	lsrs	r2, r2, #1
 800083a:	4413      	add	r3, r2
 800083c:	089b      	lsrs	r3, r3, #2
 800083e:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000840:	bf00      	nop
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	3b01      	subs	r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1f9      	bne.n	8000842 <USART_Delay+0x22>
}
 800084e:	bf00      	nop
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	24924925 	.word	0x24924925

08000860 <init_syst>:
    uint32_t CSR;
    uint32_t RVR;
    uint32_t CVR;
    uint32_t CALIB;
};
void init_syst (){
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
    // Create an instance of systick
    // Set timer to 10 ms
    SYST_TICK->RVR = 799999; //1 ms timer
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <init_syst+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0c      	ldr	r2, [pc, #48]	; (800089c <init_syst+0x3c>)
 800086a:	605a      	str	r2, [r3, #4]
    // Turn on timer -
    SYST_TICK->CSR |= (1<<2); // Use pc source
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <init_syst+0x38>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <init_syst+0x38>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f042 0204 	orr.w	r2, r2, #4
 800087a:	601a      	str	r2, [r3, #0]
    SYST_TICK->CSR |= (1<<0); // Enable
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <init_syst+0x38>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <init_syst+0x38>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f042 0201 	orr.w	r2, r2, #1
 800088a:	601a      	str	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000000 	.word	0x20000000
 800089c:	000c34ff 	.word	0x000c34ff

080008a0 <print_string>:
#include <stdio.h>
#include <stdarg.h>

static char buffer[128];

static void print_string (const char* string, int len) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
    USART_Write (USART2, (unsigned char*) string, len);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <print_string+0x20>)
 80008b2:	f7ff ff81 	bl	80007b8 <USART_Write>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40004400 	.word	0x40004400

080008c4 <printf>:
int putchar (int chr){
    print_string ((char*)&chr, 1);
    return chr;
}

int printf (const char* format, ...) {
 80008c4:	b40f      	push	{r0, r1, r2, r3}
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
    va_list aptr;
    int ret;

    va_start(aptr, format);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	603b      	str	r3, [r7, #0]
    ret = vsprintf(buffer, format, aptr);
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	6939      	ldr	r1, [r7, #16]
 80008d6:	4808      	ldr	r0, [pc, #32]	; (80008f8 <printf+0x34>)
 80008d8:	f000 fbb6 	bl	8001048 <vsiprintf>
 80008dc:	6078      	str	r0, [r7, #4]
    va_end(aptr);
    print_string (buffer, ret);
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <printf+0x34>)
 80008e2:	f7ff ffdd 	bl	80008a0 <print_string>

    return(ret);
 80008e6:	687b      	ldr	r3, [r7, #4]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008f2:	b004      	add	sp, #16
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000074 	.word	0x20000074

080008fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000904:	4a14      	ldr	r2, [pc, #80]	; (8000958 <_sbrk+0x5c>)
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <_sbrk+0x60>)
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d102      	bne.n	800091e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <_sbrk+0x64>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <_sbrk+0x68>)
 800091c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <_sbrk+0x64>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	429a      	cmp	r2, r3
 800092a:	d207      	bcs.n	800093c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800092c:	f000 fb96 	bl	800105c <__errno>
 8000930:	4603      	mov	r3, r0
 8000932:	220c      	movs	r2, #12
 8000934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000936:	f04f 33ff 	mov.w	r3, #4294967295
 800093a:	e009      	b.n	8000950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000942:	4b07      	ldr	r3, [pc, #28]	; (8000960 <_sbrk+0x64>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	4a05      	ldr	r2, [pc, #20]	; (8000960 <_sbrk+0x64>)
 800094c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20018000 	.word	0x20018000
 800095c:	00000400 	.word	0x00000400
 8000960:	200000f4 	.word	0x200000f4
 8000964:	20000248 	.word	0x20000248

08000968 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <SystemInit+0x64>)
 800096e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000972:	4a16      	ldr	r2, [pc, #88]	; (80009cc <SystemInit+0x64>)
 8000974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <SystemInit+0x68>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <SystemInit+0x68>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <SystemInit+0x68>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <SystemInit+0x68>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <SystemInit+0x68>)
 8000994:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000998:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800099c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <SystemInit+0x68>)
 80009a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009a4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <SystemInit+0x68>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a09      	ldr	r2, [pc, #36]	; (80009d0 <SystemInit+0x68>)
 80009ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <SystemInit+0x68>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <SystemInit+0x64>)
 80009ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009be:	609a      	str	r2, [r3, #8]
#endif
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00
 80009d0:	40021000 	.word	0x40021000

080009d4 <parseDelay>:
#include "stdio.h"
#include "stdint.h"
#include "printf.h"
#include "hw8.h"

uint32_t parseDelay(uint8_t* delay) {
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    uint32_t result = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
    uint8_t currentByte;

    do {
        currentByte = *delay++;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	1c5a      	adds	r2, r3, #1
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	72fb      	strb	r3, [r7, #11]
        result = (result << 7) | (currentByte & 0x7F);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	01da      	lsls	r2, r3, #7
 80009ee:	7afb      	ldrb	r3, [r7, #11]
 80009f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009f4:	4313      	orrs	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
    } while (currentByte & 0x80);
 80009f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	dbef      	blt.n	80009e0 <parseDelay+0xc>

    return result;
 8000a00:	68fb      	ldr	r3, [r7, #12]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <runTest>:

void runTest() {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
    uint8_t delay1[] = {0x3B, 0x80, 0x27, 0x00};
 8000a16:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <runTest+0x90>)
 8000a18:	61fb      	str	r3, [r7, #28]
    uint8_t delay2[] = {0x83, 0x18, 0x91, 0x54, 0x64};
 8000a1a:	4a22      	ldr	r2, [pc, #136]	; (8000aa4 <runTest+0x94>)
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a24:	6018      	str	r0, [r3, #0]
 8000a26:	3304      	adds	r3, #4
 8000a28:	7019      	strb	r1, [r3, #0]
    uint8_t delay3[] = {0xC5, 0x92, 0x74, 0xE3, 0x74, 0x12};
 8000a2a:	4a1f      	ldr	r2, [pc, #124]	; (8000aa8 <runTest+0x98>)
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a34:	6018      	str	r0, [r3, #0]
 8000a36:	3304      	adds	r3, #4
 8000a38:	8019      	strh	r1, [r3, #0]
    uint8_t delay4[] = {0x90, 0x82, 0x93, 0x64, 0xD3, 0x89};
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <runTest+0x9c>)
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a42:	6018      	str	r0, [r3, #0]
 8000a44:	3304      	adds	r3, #4
 8000a46:	8019      	strh	r1, [r3, #0]

    printf("Delay 1: %lu\r\n", parseDelay(delay1)); // Should print 59
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ffc1 	bl	80009d4 <parseDelay>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4619      	mov	r1, r3
 8000a56:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <runTest+0xa0>)
 8000a58:	f7ff ff34 	bl	80008c4 <printf>
    printf("Delay 2: %lu\r\n", parseDelay(delay2)); // Should print 408
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ffb7 	bl	80009d4 <parseDelay>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <runTest+0xa4>)
 8000a6c:	f7ff ff2a 	bl	80008c4 <printf>
    printf("Delay 3: %lu\r\n", parseDelay(delay3)); // Should print 1132916
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ffad 	bl	80009d4 <parseDelay>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <runTest+0xa8>)
 8000a80:	f7ff ff20 	bl	80008c4 <printf>
    printf("Delay 4: %lu\r\n", parseDelay(delay4)); // Should print 33589372
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ffa4 	bl	80009d4 <parseDelay>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480a      	ldr	r0, [pc, #40]	; (8000abc <runTest+0xac>)
 8000a92:	f7ff ff17 	bl	80008c4 <printf>

}
 8000a96:	bf00      	nop
 8000a98:	3720      	adds	r7, #32
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	0027803b 	.word	0x0027803b
 8000aa4:	080019ac 	.word	0x080019ac
 8000aa8:	080019b4 	.word	0x080019b4
 8000aac:	080019bc 	.word	0x080019bc
 8000ab0:	0800196c 	.word	0x0800196c
 8000ab4:	0800197c 	.word	0x0800197c
 8000ab8:	0800198c 	.word	0x0800198c
 8000abc:	0800199c 	.word	0x0800199c

08000ac0 <main>:
#include "sqr_wave.h"
#include "hw8.h"

int EXTERN_LED = 6;

int main(void){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 8000ac4:	f7ff fca2 	bl	800040c <System_Clock_Init>
	UART2_Init ();
 8000ac8:	f7ff fd7e 	bl	80005c8 <UART2_Init>
	LED_Init(EXTERN_LED);
 8000acc:	4b07      	ldr	r3, [pc, #28]	; (8000aec <main+0x2c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fc3c 	bl	8000350 <LED_Init>
	init_syst();
 8000ad8:	f7ff fec2 	bl	8000860 <init_syst>
	GPIO_Init();
 8000adc:	f7ff fbc8 	bl	8000270 <GPIO_Init>
	runTest();
 8000ae0:	f7ff ff96 	bl	8000a10 <runTest>
 8000ae4:	2300      	movs	r3, #0
//	run_wave(1);
//	mode_print();
//	init_player();

}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000004 	.word	0x20000004

08000af0 <SysTick_Handler>:
#include "printf.h"
#include "systick.h"
#include "tone.h"
#include "stdio.h"
int count = 0;
void SysTick_Handler(){
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
	count++;
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <SysTick_Handler+0x18>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	3301      	adds	r3, #1
 8000afa:	4a03      	ldr	r2, [pc, #12]	; (8000b08 <SysTick_Handler+0x18>)
 8000afc:	6013      	str	r3, [r2, #0]
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	200000f8 	.word	0x200000f8

08000b0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b10:	f7ff ff2a 	bl	8000968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b16:	490d      	ldr	r1, [pc, #52]	; (8000b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b18:	4a0d      	ldr	r2, [pc, #52]	; (8000b50 <LoopForever+0xe>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b2c:	4c0a      	ldr	r4, [pc, #40]	; (8000b58 <LoopForever+0x16>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f000 fa95 	bl	8001068 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3e:	f7ff ffbf 	bl	8000ac0 <main>

08000b42 <LoopForever>:

LoopForever:
    b LoopForever
 8000b42:	e7fe      	b.n	8000b42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8000b50:	08001a00 	.word	0x08001a00
  ldr r2, =_sbss
 8000b54:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8000b58:	20000244 	.word	0x20000244

08000b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC1_2_IRQHandler>
	...

08000b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <__NVIC_GetPriorityGrouping+0x18>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	0a1b      	lsrs	r3, r3, #8
 8000b6a:	f003 0307 	and.w	r3, r3, #7
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db0b      	blt.n	8000ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 021f 	and.w	r2, r3, #31
 8000b94:	4907      	ldr	r1, [pc, #28]	; (8000bb4 <__NVIC_EnableIRQ+0x38>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	095b      	lsrs	r3, r3, #5
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	db0a      	blt.n	8000be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	490c      	ldr	r1, [pc, #48]	; (8000c04 <__NVIC_SetPriority+0x4c>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	0112      	lsls	r2, r2, #4
 8000bd8:	b2d2      	uxtb	r2, r2
 8000bda:	440b      	add	r3, r1
 8000bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be0:	e00a      	b.n	8000bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4908      	ldr	r1, [pc, #32]	; (8000c08 <__NVIC_SetPriority+0x50>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	f003 030f 	and.w	r3, r3, #15
 8000bee:	3b04      	subs	r3, #4
 8000bf0:	0112      	lsls	r2, r2, #4
 8000bf2:	b2d2      	uxtb	r2, r2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	761a      	strb	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000e100 	.word	0xe000e100
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f1c3 0307 	rsb	r3, r3, #7
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	bf28      	it	cs
 8000c2a:	2304      	movcs	r3, #4
 8000c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d902      	bls.n	8000c3c <NVIC_EncodePriority+0x30>
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3b03      	subs	r3, #3
 8000c3a:	e000      	b.n	8000c3e <NVIC_EncodePriority+0x32>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	f04f 32ff 	mov.w	r2, #4294967295
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	401a      	ands	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43d9      	mvns	r1, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	4313      	orrs	r3, r2
         );
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3724      	adds	r7, #36	; 0x24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b086      	sub	sp, #24
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]
 8000c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c84:	f7ff ff6c 	bl	8000b60 <__NVIC_GetPriorityGrouping>
 8000c88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68b9      	ldr	r1, [r7, #8]
 8000c8e:	6978      	ldr	r0, [r7, #20]
 8000c90:	f7ff ffbc 	bl	8000c0c <NVIC_EncodePriority>
 8000c94:	4602      	mov	r2, r0
 8000c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff8b 	bl	8000bb8 <__NVIC_SetPriority>
}
 8000ca2:	bf00      	nop
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff5f 	bl	8000b7c <__NVIC_EnableIRQ>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd6:	e17f      	b.n	8000fd8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 8171 	beq.w	8000fd2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d005      	beq.n	8000d08 <HAL_GPIO_Init+0x40>
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d130      	bne.n	8000d6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d3e:	2201      	movs	r2, #1
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	091b      	lsrs	r3, r3, #4
 8000d54:	f003 0201 	and.w	r2, r3, #1
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d118      	bne.n	8000da8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	08db      	lsrs	r3, r3, #3
 8000d92:	f003 0201 	and.w	r2, r3, #1
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	d017      	beq.n	8000de4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d123      	bne.n	8000e38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	08da      	lsrs	r2, r3, #3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3208      	adds	r2, #8
 8000df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f003 0307 	and.w	r3, r3, #7
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	220f      	movs	r2, #15
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	691a      	ldr	r2, [r3, #16]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	08da      	lsrs	r2, r3, #3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3208      	adds	r2, #8
 8000e32:	6939      	ldr	r1, [r7, #16]
 8000e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0203 	and.w	r2, r3, #3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f000 80ac 	beq.w	8000fd2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7a:	4b5f      	ldr	r3, [pc, #380]	; (8000ff8 <HAL_GPIO_Init+0x330>)
 8000e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7e:	4a5e      	ldr	r2, [pc, #376]	; (8000ff8 <HAL_GPIO_Init+0x330>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6613      	str	r3, [r2, #96]	; 0x60
 8000e86:	4b5c      	ldr	r3, [pc, #368]	; (8000ff8 <HAL_GPIO_Init+0x330>)
 8000e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e92:	4a5a      	ldr	r2, [pc, #360]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	3302      	adds	r3, #2
 8000e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	220f      	movs	r2, #15
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ebc:	d025      	beq.n	8000f0a <HAL_GPIO_Init+0x242>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4f      	ldr	r2, [pc, #316]	; (8001000 <HAL_GPIO_Init+0x338>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d01f      	beq.n	8000f06 <HAL_GPIO_Init+0x23e>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4e      	ldr	r2, [pc, #312]	; (8001004 <HAL_GPIO_Init+0x33c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d019      	beq.n	8000f02 <HAL_GPIO_Init+0x23a>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a4d      	ldr	r2, [pc, #308]	; (8001008 <HAL_GPIO_Init+0x340>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d013      	beq.n	8000efe <HAL_GPIO_Init+0x236>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a4c      	ldr	r2, [pc, #304]	; (800100c <HAL_GPIO_Init+0x344>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d00d      	beq.n	8000efa <HAL_GPIO_Init+0x232>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4b      	ldr	r2, [pc, #300]	; (8001010 <HAL_GPIO_Init+0x348>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d007      	beq.n	8000ef6 <HAL_GPIO_Init+0x22e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4a      	ldr	r2, [pc, #296]	; (8001014 <HAL_GPIO_Init+0x34c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_GPIO_Init+0x22a>
 8000eee:	2306      	movs	r3, #6
 8000ef0:	e00c      	b.n	8000f0c <HAL_GPIO_Init+0x244>
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	e00a      	b.n	8000f0c <HAL_GPIO_Init+0x244>
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	e008      	b.n	8000f0c <HAL_GPIO_Init+0x244>
 8000efa:	2304      	movs	r3, #4
 8000efc:	e006      	b.n	8000f0c <HAL_GPIO_Init+0x244>
 8000efe:	2303      	movs	r3, #3
 8000f00:	e004      	b.n	8000f0c <HAL_GPIO_Init+0x244>
 8000f02:	2302      	movs	r3, #2
 8000f04:	e002      	b.n	8000f0c <HAL_GPIO_Init+0x244>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <HAL_GPIO_Init+0x244>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	f002 0203 	and.w	r2, r2, #3
 8000f12:	0092      	lsls	r2, r2, #2
 8000f14:	4093      	lsls	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f1c:	4937      	ldr	r1, [pc, #220]	; (8000ffc <HAL_GPIO_Init+0x334>)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	089b      	lsrs	r3, r3, #2
 8000f22:	3302      	adds	r3, #2
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f2a:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <HAL_GPIO_Init+0x350>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f4e:	4a32      	ldr	r2, [pc, #200]	; (8001018 <HAL_GPIO_Init+0x350>)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f54:	4b30      	ldr	r3, [pc, #192]	; (8001018 <HAL_GPIO_Init+0x350>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f78:	4a27      	ldr	r2, [pc, #156]	; (8001018 <HAL_GPIO_Init+0x350>)
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f7e:	4b26      	ldr	r3, [pc, #152]	; (8001018 <HAL_GPIO_Init+0x350>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fa2:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <HAL_GPIO_Init+0x350>)
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HAL_GPIO_Init+0x350>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fcc:	4a12      	ldr	r2, [pc, #72]	; (8001018 <HAL_GPIO_Init+0x350>)
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f47f ae78 	bne.w	8000cd8 <HAL_GPIO_Init+0x10>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	371c      	adds	r7, #28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010000 	.word	0x40010000
 8001000:	48000400 	.word	0x48000400
 8001004:	48000800 	.word	0x48000800
 8001008:	48000c00 	.word	0x48000c00
 800100c:	48001000 	.word	0x48001000
 8001010:	48001400 	.word	0x48001400
 8001014:	48001800 	.word	0x48001800
 8001018:	40010400 	.word	0x40010400

0800101c <_vsiprintf_r>:
 800101c:	b500      	push	{lr}
 800101e:	b09b      	sub	sp, #108	; 0x6c
 8001020:	9100      	str	r1, [sp, #0]
 8001022:	9104      	str	r1, [sp, #16]
 8001024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001028:	9105      	str	r1, [sp, #20]
 800102a:	9102      	str	r1, [sp, #8]
 800102c:	4905      	ldr	r1, [pc, #20]	; (8001044 <_vsiprintf_r+0x28>)
 800102e:	9103      	str	r1, [sp, #12]
 8001030:	4669      	mov	r1, sp
 8001032:	f000 f991 	bl	8001358 <_svfiprintf_r>
 8001036:	9b00      	ldr	r3, [sp, #0]
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	b01b      	add	sp, #108	; 0x6c
 800103e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001042:	bf00      	nop
 8001044:	ffff0208 	.word	0xffff0208

08001048 <vsiprintf>:
 8001048:	4613      	mov	r3, r2
 800104a:	460a      	mov	r2, r1
 800104c:	4601      	mov	r1, r0
 800104e:	4802      	ldr	r0, [pc, #8]	; (8001058 <vsiprintf+0x10>)
 8001050:	6800      	ldr	r0, [r0, #0]
 8001052:	f7ff bfe3 	b.w	800101c <_vsiprintf_r>
 8001056:	bf00      	nop
 8001058:	20000054 	.word	0x20000054

0800105c <__errno>:
 800105c:	4b01      	ldr	r3, [pc, #4]	; (8001064 <__errno+0x8>)
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000054 	.word	0x20000054

08001068 <__libc_init_array>:
 8001068:	b570      	push	{r4, r5, r6, lr}
 800106a:	4d0d      	ldr	r5, [pc, #52]	; (80010a0 <__libc_init_array+0x38>)
 800106c:	4c0d      	ldr	r4, [pc, #52]	; (80010a4 <__libc_init_array+0x3c>)
 800106e:	1b64      	subs	r4, r4, r5
 8001070:	10a4      	asrs	r4, r4, #2
 8001072:	2600      	movs	r6, #0
 8001074:	42a6      	cmp	r6, r4
 8001076:	d109      	bne.n	800108c <__libc_init_array+0x24>
 8001078:	4d0b      	ldr	r5, [pc, #44]	; (80010a8 <__libc_init_array+0x40>)
 800107a:	4c0c      	ldr	r4, [pc, #48]	; (80010ac <__libc_init_array+0x44>)
 800107c:	f000 fc6a 	bl	8001954 <_init>
 8001080:	1b64      	subs	r4, r4, r5
 8001082:	10a4      	asrs	r4, r4, #2
 8001084:	2600      	movs	r6, #0
 8001086:	42a6      	cmp	r6, r4
 8001088:	d105      	bne.n	8001096 <__libc_init_array+0x2e>
 800108a:	bd70      	pop	{r4, r5, r6, pc}
 800108c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001090:	4798      	blx	r3
 8001092:	3601      	adds	r6, #1
 8001094:	e7ee      	b.n	8001074 <__libc_init_array+0xc>
 8001096:	f855 3b04 	ldr.w	r3, [r5], #4
 800109a:	4798      	blx	r3
 800109c:	3601      	adds	r6, #1
 800109e:	e7f2      	b.n	8001086 <__libc_init_array+0x1e>
 80010a0:	080019f8 	.word	0x080019f8
 80010a4:	080019f8 	.word	0x080019f8
 80010a8:	080019f8 	.word	0x080019f8
 80010ac:	080019fc 	.word	0x080019fc

080010b0 <__retarget_lock_acquire_recursive>:
 80010b0:	4770      	bx	lr

080010b2 <__retarget_lock_release_recursive>:
 80010b2:	4770      	bx	lr

080010b4 <_free_r>:
 80010b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80010b6:	2900      	cmp	r1, #0
 80010b8:	d044      	beq.n	8001144 <_free_r+0x90>
 80010ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010be:	9001      	str	r0, [sp, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f1a1 0404 	sub.w	r4, r1, #4
 80010c6:	bfb8      	it	lt
 80010c8:	18e4      	addlt	r4, r4, r3
 80010ca:	f000 f8df 	bl	800128c <__malloc_lock>
 80010ce:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <_free_r+0x94>)
 80010d0:	9801      	ldr	r0, [sp, #4]
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	b933      	cbnz	r3, 80010e4 <_free_r+0x30>
 80010d6:	6063      	str	r3, [r4, #4]
 80010d8:	6014      	str	r4, [r2, #0]
 80010da:	b003      	add	sp, #12
 80010dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80010e0:	f000 b8da 	b.w	8001298 <__malloc_unlock>
 80010e4:	42a3      	cmp	r3, r4
 80010e6:	d908      	bls.n	80010fa <_free_r+0x46>
 80010e8:	6825      	ldr	r5, [r4, #0]
 80010ea:	1961      	adds	r1, r4, r5
 80010ec:	428b      	cmp	r3, r1
 80010ee:	bf01      	itttt	eq
 80010f0:	6819      	ldreq	r1, [r3, #0]
 80010f2:	685b      	ldreq	r3, [r3, #4]
 80010f4:	1949      	addeq	r1, r1, r5
 80010f6:	6021      	streq	r1, [r4, #0]
 80010f8:	e7ed      	b.n	80010d6 <_free_r+0x22>
 80010fa:	461a      	mov	r2, r3
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	b10b      	cbz	r3, 8001104 <_free_r+0x50>
 8001100:	42a3      	cmp	r3, r4
 8001102:	d9fa      	bls.n	80010fa <_free_r+0x46>
 8001104:	6811      	ldr	r1, [r2, #0]
 8001106:	1855      	adds	r5, r2, r1
 8001108:	42a5      	cmp	r5, r4
 800110a:	d10b      	bne.n	8001124 <_free_r+0x70>
 800110c:	6824      	ldr	r4, [r4, #0]
 800110e:	4421      	add	r1, r4
 8001110:	1854      	adds	r4, r2, r1
 8001112:	42a3      	cmp	r3, r4
 8001114:	6011      	str	r1, [r2, #0]
 8001116:	d1e0      	bne.n	80010da <_free_r+0x26>
 8001118:	681c      	ldr	r4, [r3, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	6053      	str	r3, [r2, #4]
 800111e:	440c      	add	r4, r1
 8001120:	6014      	str	r4, [r2, #0]
 8001122:	e7da      	b.n	80010da <_free_r+0x26>
 8001124:	d902      	bls.n	800112c <_free_r+0x78>
 8001126:	230c      	movs	r3, #12
 8001128:	6003      	str	r3, [r0, #0]
 800112a:	e7d6      	b.n	80010da <_free_r+0x26>
 800112c:	6825      	ldr	r5, [r4, #0]
 800112e:	1961      	adds	r1, r4, r5
 8001130:	428b      	cmp	r3, r1
 8001132:	bf04      	itt	eq
 8001134:	6819      	ldreq	r1, [r3, #0]
 8001136:	685b      	ldreq	r3, [r3, #4]
 8001138:	6063      	str	r3, [r4, #4]
 800113a:	bf04      	itt	eq
 800113c:	1949      	addeq	r1, r1, r5
 800113e:	6021      	streq	r1, [r4, #0]
 8001140:	6054      	str	r4, [r2, #4]
 8001142:	e7ca      	b.n	80010da <_free_r+0x26>
 8001144:	b003      	add	sp, #12
 8001146:	bd30      	pop	{r4, r5, pc}
 8001148:	2000023c 	.word	0x2000023c

0800114c <sbrk_aligned>:
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	4e0e      	ldr	r6, [pc, #56]	; (8001188 <sbrk_aligned+0x3c>)
 8001150:	460c      	mov	r4, r1
 8001152:	6831      	ldr	r1, [r6, #0]
 8001154:	4605      	mov	r5, r0
 8001156:	b911      	cbnz	r1, 800115e <sbrk_aligned+0x12>
 8001158:	f000 fba6 	bl	80018a8 <_sbrk_r>
 800115c:	6030      	str	r0, [r6, #0]
 800115e:	4621      	mov	r1, r4
 8001160:	4628      	mov	r0, r5
 8001162:	f000 fba1 	bl	80018a8 <_sbrk_r>
 8001166:	1c43      	adds	r3, r0, #1
 8001168:	d00a      	beq.n	8001180 <sbrk_aligned+0x34>
 800116a:	1cc4      	adds	r4, r0, #3
 800116c:	f024 0403 	bic.w	r4, r4, #3
 8001170:	42a0      	cmp	r0, r4
 8001172:	d007      	beq.n	8001184 <sbrk_aligned+0x38>
 8001174:	1a21      	subs	r1, r4, r0
 8001176:	4628      	mov	r0, r5
 8001178:	f000 fb96 	bl	80018a8 <_sbrk_r>
 800117c:	3001      	adds	r0, #1
 800117e:	d101      	bne.n	8001184 <sbrk_aligned+0x38>
 8001180:	f04f 34ff 	mov.w	r4, #4294967295
 8001184:	4620      	mov	r0, r4
 8001186:	bd70      	pop	{r4, r5, r6, pc}
 8001188:	20000240 	.word	0x20000240

0800118c <_malloc_r>:
 800118c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001190:	1ccd      	adds	r5, r1, #3
 8001192:	f025 0503 	bic.w	r5, r5, #3
 8001196:	3508      	adds	r5, #8
 8001198:	2d0c      	cmp	r5, #12
 800119a:	bf38      	it	cc
 800119c:	250c      	movcc	r5, #12
 800119e:	2d00      	cmp	r5, #0
 80011a0:	4607      	mov	r7, r0
 80011a2:	db01      	blt.n	80011a8 <_malloc_r+0x1c>
 80011a4:	42a9      	cmp	r1, r5
 80011a6:	d905      	bls.n	80011b4 <_malloc_r+0x28>
 80011a8:	230c      	movs	r3, #12
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	2600      	movs	r6, #0
 80011ae:	4630      	mov	r0, r6
 80011b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001288 <_malloc_r+0xfc>
 80011b8:	f000 f868 	bl	800128c <__malloc_lock>
 80011bc:	f8d8 3000 	ldr.w	r3, [r8]
 80011c0:	461c      	mov	r4, r3
 80011c2:	bb5c      	cbnz	r4, 800121c <_malloc_r+0x90>
 80011c4:	4629      	mov	r1, r5
 80011c6:	4638      	mov	r0, r7
 80011c8:	f7ff ffc0 	bl	800114c <sbrk_aligned>
 80011cc:	1c43      	adds	r3, r0, #1
 80011ce:	4604      	mov	r4, r0
 80011d0:	d155      	bne.n	800127e <_malloc_r+0xf2>
 80011d2:	f8d8 4000 	ldr.w	r4, [r8]
 80011d6:	4626      	mov	r6, r4
 80011d8:	2e00      	cmp	r6, #0
 80011da:	d145      	bne.n	8001268 <_malloc_r+0xdc>
 80011dc:	2c00      	cmp	r4, #0
 80011de:	d048      	beq.n	8001272 <_malloc_r+0xe6>
 80011e0:	6823      	ldr	r3, [r4, #0]
 80011e2:	4631      	mov	r1, r6
 80011e4:	4638      	mov	r0, r7
 80011e6:	eb04 0903 	add.w	r9, r4, r3
 80011ea:	f000 fb5d 	bl	80018a8 <_sbrk_r>
 80011ee:	4581      	cmp	r9, r0
 80011f0:	d13f      	bne.n	8001272 <_malloc_r+0xe6>
 80011f2:	6821      	ldr	r1, [r4, #0]
 80011f4:	1a6d      	subs	r5, r5, r1
 80011f6:	4629      	mov	r1, r5
 80011f8:	4638      	mov	r0, r7
 80011fa:	f7ff ffa7 	bl	800114c <sbrk_aligned>
 80011fe:	3001      	adds	r0, #1
 8001200:	d037      	beq.n	8001272 <_malloc_r+0xe6>
 8001202:	6823      	ldr	r3, [r4, #0]
 8001204:	442b      	add	r3, r5
 8001206:	6023      	str	r3, [r4, #0]
 8001208:	f8d8 3000 	ldr.w	r3, [r8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d038      	beq.n	8001282 <_malloc_r+0xf6>
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	42a2      	cmp	r2, r4
 8001214:	d12b      	bne.n	800126e <_malloc_r+0xe2>
 8001216:	2200      	movs	r2, #0
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	e00f      	b.n	800123c <_malloc_r+0xb0>
 800121c:	6822      	ldr	r2, [r4, #0]
 800121e:	1b52      	subs	r2, r2, r5
 8001220:	d41f      	bmi.n	8001262 <_malloc_r+0xd6>
 8001222:	2a0b      	cmp	r2, #11
 8001224:	d917      	bls.n	8001256 <_malloc_r+0xca>
 8001226:	1961      	adds	r1, r4, r5
 8001228:	42a3      	cmp	r3, r4
 800122a:	6025      	str	r5, [r4, #0]
 800122c:	bf18      	it	ne
 800122e:	6059      	strne	r1, [r3, #4]
 8001230:	6863      	ldr	r3, [r4, #4]
 8001232:	bf08      	it	eq
 8001234:	f8c8 1000 	streq.w	r1, [r8]
 8001238:	5162      	str	r2, [r4, r5]
 800123a:	604b      	str	r3, [r1, #4]
 800123c:	4638      	mov	r0, r7
 800123e:	f104 060b 	add.w	r6, r4, #11
 8001242:	f000 f829 	bl	8001298 <__malloc_unlock>
 8001246:	f026 0607 	bic.w	r6, r6, #7
 800124a:	1d23      	adds	r3, r4, #4
 800124c:	1af2      	subs	r2, r6, r3
 800124e:	d0ae      	beq.n	80011ae <_malloc_r+0x22>
 8001250:	1b9b      	subs	r3, r3, r6
 8001252:	50a3      	str	r3, [r4, r2]
 8001254:	e7ab      	b.n	80011ae <_malloc_r+0x22>
 8001256:	42a3      	cmp	r3, r4
 8001258:	6862      	ldr	r2, [r4, #4]
 800125a:	d1dd      	bne.n	8001218 <_malloc_r+0x8c>
 800125c:	f8c8 2000 	str.w	r2, [r8]
 8001260:	e7ec      	b.n	800123c <_malloc_r+0xb0>
 8001262:	4623      	mov	r3, r4
 8001264:	6864      	ldr	r4, [r4, #4]
 8001266:	e7ac      	b.n	80011c2 <_malloc_r+0x36>
 8001268:	4634      	mov	r4, r6
 800126a:	6876      	ldr	r6, [r6, #4]
 800126c:	e7b4      	b.n	80011d8 <_malloc_r+0x4c>
 800126e:	4613      	mov	r3, r2
 8001270:	e7cc      	b.n	800120c <_malloc_r+0x80>
 8001272:	230c      	movs	r3, #12
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4638      	mov	r0, r7
 8001278:	f000 f80e 	bl	8001298 <__malloc_unlock>
 800127c:	e797      	b.n	80011ae <_malloc_r+0x22>
 800127e:	6025      	str	r5, [r4, #0]
 8001280:	e7dc      	b.n	800123c <_malloc_r+0xb0>
 8001282:	605b      	str	r3, [r3, #4]
 8001284:	deff      	udf	#255	; 0xff
 8001286:	bf00      	nop
 8001288:	2000023c 	.word	0x2000023c

0800128c <__malloc_lock>:
 800128c:	4801      	ldr	r0, [pc, #4]	; (8001294 <__malloc_lock+0x8>)
 800128e:	f7ff bf0f 	b.w	80010b0 <__retarget_lock_acquire_recursive>
 8001292:	bf00      	nop
 8001294:	20000238 	.word	0x20000238

08001298 <__malloc_unlock>:
 8001298:	4801      	ldr	r0, [pc, #4]	; (80012a0 <__malloc_unlock+0x8>)
 800129a:	f7ff bf0a 	b.w	80010b2 <__retarget_lock_release_recursive>
 800129e:	bf00      	nop
 80012a0:	20000238 	.word	0x20000238

080012a4 <__ssputs_r>:
 80012a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012a8:	688e      	ldr	r6, [r1, #8]
 80012aa:	461f      	mov	r7, r3
 80012ac:	42be      	cmp	r6, r7
 80012ae:	680b      	ldr	r3, [r1, #0]
 80012b0:	4682      	mov	sl, r0
 80012b2:	460c      	mov	r4, r1
 80012b4:	4690      	mov	r8, r2
 80012b6:	d82c      	bhi.n	8001312 <__ssputs_r+0x6e>
 80012b8:	898a      	ldrh	r2, [r1, #12]
 80012ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80012be:	d026      	beq.n	800130e <__ssputs_r+0x6a>
 80012c0:	6965      	ldr	r5, [r4, #20]
 80012c2:	6909      	ldr	r1, [r1, #16]
 80012c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80012c8:	eba3 0901 	sub.w	r9, r3, r1
 80012cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80012d0:	1c7b      	adds	r3, r7, #1
 80012d2:	444b      	add	r3, r9
 80012d4:	106d      	asrs	r5, r5, #1
 80012d6:	429d      	cmp	r5, r3
 80012d8:	bf38      	it	cc
 80012da:	461d      	movcc	r5, r3
 80012dc:	0553      	lsls	r3, r2, #21
 80012de:	d527      	bpl.n	8001330 <__ssputs_r+0x8c>
 80012e0:	4629      	mov	r1, r5
 80012e2:	f7ff ff53 	bl	800118c <_malloc_r>
 80012e6:	4606      	mov	r6, r0
 80012e8:	b360      	cbz	r0, 8001344 <__ssputs_r+0xa0>
 80012ea:	6921      	ldr	r1, [r4, #16]
 80012ec:	464a      	mov	r2, r9
 80012ee:	f000 faeb 	bl	80018c8 <memcpy>
 80012f2:	89a3      	ldrh	r3, [r4, #12]
 80012f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80012f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012fc:	81a3      	strh	r3, [r4, #12]
 80012fe:	6126      	str	r6, [r4, #16]
 8001300:	6165      	str	r5, [r4, #20]
 8001302:	444e      	add	r6, r9
 8001304:	eba5 0509 	sub.w	r5, r5, r9
 8001308:	6026      	str	r6, [r4, #0]
 800130a:	60a5      	str	r5, [r4, #8]
 800130c:	463e      	mov	r6, r7
 800130e:	42be      	cmp	r6, r7
 8001310:	d900      	bls.n	8001314 <__ssputs_r+0x70>
 8001312:	463e      	mov	r6, r7
 8001314:	6820      	ldr	r0, [r4, #0]
 8001316:	4632      	mov	r2, r6
 8001318:	4641      	mov	r1, r8
 800131a:	f000 faab 	bl	8001874 <memmove>
 800131e:	68a3      	ldr	r3, [r4, #8]
 8001320:	1b9b      	subs	r3, r3, r6
 8001322:	60a3      	str	r3, [r4, #8]
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	4433      	add	r3, r6
 8001328:	6023      	str	r3, [r4, #0]
 800132a:	2000      	movs	r0, #0
 800132c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001330:	462a      	mov	r2, r5
 8001332:	f000 fad7 	bl	80018e4 <_realloc_r>
 8001336:	4606      	mov	r6, r0
 8001338:	2800      	cmp	r0, #0
 800133a:	d1e0      	bne.n	80012fe <__ssputs_r+0x5a>
 800133c:	6921      	ldr	r1, [r4, #16]
 800133e:	4650      	mov	r0, sl
 8001340:	f7ff feb8 	bl	80010b4 <_free_r>
 8001344:	230c      	movs	r3, #12
 8001346:	f8ca 3000 	str.w	r3, [sl]
 800134a:	89a3      	ldrh	r3, [r4, #12]
 800134c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001350:	81a3      	strh	r3, [r4, #12]
 8001352:	f04f 30ff 	mov.w	r0, #4294967295
 8001356:	e7e9      	b.n	800132c <__ssputs_r+0x88>

08001358 <_svfiprintf_r>:
 8001358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800135c:	4698      	mov	r8, r3
 800135e:	898b      	ldrh	r3, [r1, #12]
 8001360:	061b      	lsls	r3, r3, #24
 8001362:	b09d      	sub	sp, #116	; 0x74
 8001364:	4607      	mov	r7, r0
 8001366:	460d      	mov	r5, r1
 8001368:	4614      	mov	r4, r2
 800136a:	d50e      	bpl.n	800138a <_svfiprintf_r+0x32>
 800136c:	690b      	ldr	r3, [r1, #16]
 800136e:	b963      	cbnz	r3, 800138a <_svfiprintf_r+0x32>
 8001370:	2140      	movs	r1, #64	; 0x40
 8001372:	f7ff ff0b 	bl	800118c <_malloc_r>
 8001376:	6028      	str	r0, [r5, #0]
 8001378:	6128      	str	r0, [r5, #16]
 800137a:	b920      	cbnz	r0, 8001386 <_svfiprintf_r+0x2e>
 800137c:	230c      	movs	r3, #12
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	e0d0      	b.n	8001528 <_svfiprintf_r+0x1d0>
 8001386:	2340      	movs	r3, #64	; 0x40
 8001388:	616b      	str	r3, [r5, #20]
 800138a:	2300      	movs	r3, #0
 800138c:	9309      	str	r3, [sp, #36]	; 0x24
 800138e:	2320      	movs	r3, #32
 8001390:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001394:	f8cd 800c 	str.w	r8, [sp, #12]
 8001398:	2330      	movs	r3, #48	; 0x30
 800139a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001540 <_svfiprintf_r+0x1e8>
 800139e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80013a2:	f04f 0901 	mov.w	r9, #1
 80013a6:	4623      	mov	r3, r4
 80013a8:	469a      	mov	sl, r3
 80013aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80013ae:	b10a      	cbz	r2, 80013b4 <_svfiprintf_r+0x5c>
 80013b0:	2a25      	cmp	r2, #37	; 0x25
 80013b2:	d1f9      	bne.n	80013a8 <_svfiprintf_r+0x50>
 80013b4:	ebba 0b04 	subs.w	fp, sl, r4
 80013b8:	d00b      	beq.n	80013d2 <_svfiprintf_r+0x7a>
 80013ba:	465b      	mov	r3, fp
 80013bc:	4622      	mov	r2, r4
 80013be:	4629      	mov	r1, r5
 80013c0:	4638      	mov	r0, r7
 80013c2:	f7ff ff6f 	bl	80012a4 <__ssputs_r>
 80013c6:	3001      	adds	r0, #1
 80013c8:	f000 80a9 	beq.w	800151e <_svfiprintf_r+0x1c6>
 80013cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80013ce:	445a      	add	r2, fp
 80013d0:	9209      	str	r2, [sp, #36]	; 0x24
 80013d2:	f89a 3000 	ldrb.w	r3, [sl]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 80a1 	beq.w	800151e <_svfiprintf_r+0x1c6>
 80013dc:	2300      	movs	r3, #0
 80013de:	f04f 32ff 	mov.w	r2, #4294967295
 80013e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80013e6:	f10a 0a01 	add.w	sl, sl, #1
 80013ea:	9304      	str	r3, [sp, #16]
 80013ec:	9307      	str	r3, [sp, #28]
 80013ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80013f2:	931a      	str	r3, [sp, #104]	; 0x68
 80013f4:	4654      	mov	r4, sl
 80013f6:	2205      	movs	r2, #5
 80013f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013fc:	4850      	ldr	r0, [pc, #320]	; (8001540 <_svfiprintf_r+0x1e8>)
 80013fe:	f7fe fee7 	bl	80001d0 <memchr>
 8001402:	9a04      	ldr	r2, [sp, #16]
 8001404:	b9d8      	cbnz	r0, 800143e <_svfiprintf_r+0xe6>
 8001406:	06d0      	lsls	r0, r2, #27
 8001408:	bf44      	itt	mi
 800140a:	2320      	movmi	r3, #32
 800140c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001410:	0711      	lsls	r1, r2, #28
 8001412:	bf44      	itt	mi
 8001414:	232b      	movmi	r3, #43	; 0x2b
 8001416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800141a:	f89a 3000 	ldrb.w	r3, [sl]
 800141e:	2b2a      	cmp	r3, #42	; 0x2a
 8001420:	d015      	beq.n	800144e <_svfiprintf_r+0xf6>
 8001422:	9a07      	ldr	r2, [sp, #28]
 8001424:	4654      	mov	r4, sl
 8001426:	2000      	movs	r0, #0
 8001428:	f04f 0c0a 	mov.w	ip, #10
 800142c:	4621      	mov	r1, r4
 800142e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001432:	3b30      	subs	r3, #48	; 0x30
 8001434:	2b09      	cmp	r3, #9
 8001436:	d94d      	bls.n	80014d4 <_svfiprintf_r+0x17c>
 8001438:	b1b0      	cbz	r0, 8001468 <_svfiprintf_r+0x110>
 800143a:	9207      	str	r2, [sp, #28]
 800143c:	e014      	b.n	8001468 <_svfiprintf_r+0x110>
 800143e:	eba0 0308 	sub.w	r3, r0, r8
 8001442:	fa09 f303 	lsl.w	r3, r9, r3
 8001446:	4313      	orrs	r3, r2
 8001448:	9304      	str	r3, [sp, #16]
 800144a:	46a2      	mov	sl, r4
 800144c:	e7d2      	b.n	80013f4 <_svfiprintf_r+0x9c>
 800144e:	9b03      	ldr	r3, [sp, #12]
 8001450:	1d19      	adds	r1, r3, #4
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	9103      	str	r1, [sp, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	bfbb      	ittet	lt
 800145a:	425b      	neglt	r3, r3
 800145c:	f042 0202 	orrlt.w	r2, r2, #2
 8001460:	9307      	strge	r3, [sp, #28]
 8001462:	9307      	strlt	r3, [sp, #28]
 8001464:	bfb8      	it	lt
 8001466:	9204      	strlt	r2, [sp, #16]
 8001468:	7823      	ldrb	r3, [r4, #0]
 800146a:	2b2e      	cmp	r3, #46	; 0x2e
 800146c:	d10c      	bne.n	8001488 <_svfiprintf_r+0x130>
 800146e:	7863      	ldrb	r3, [r4, #1]
 8001470:	2b2a      	cmp	r3, #42	; 0x2a
 8001472:	d134      	bne.n	80014de <_svfiprintf_r+0x186>
 8001474:	9b03      	ldr	r3, [sp, #12]
 8001476:	1d1a      	adds	r2, r3, #4
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	9203      	str	r2, [sp, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	bfb8      	it	lt
 8001480:	f04f 33ff 	movlt.w	r3, #4294967295
 8001484:	3402      	adds	r4, #2
 8001486:	9305      	str	r3, [sp, #20]
 8001488:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001550 <_svfiprintf_r+0x1f8>
 800148c:	7821      	ldrb	r1, [r4, #0]
 800148e:	2203      	movs	r2, #3
 8001490:	4650      	mov	r0, sl
 8001492:	f7fe fe9d 	bl	80001d0 <memchr>
 8001496:	b138      	cbz	r0, 80014a8 <_svfiprintf_r+0x150>
 8001498:	9b04      	ldr	r3, [sp, #16]
 800149a:	eba0 000a 	sub.w	r0, r0, sl
 800149e:	2240      	movs	r2, #64	; 0x40
 80014a0:	4082      	lsls	r2, r0
 80014a2:	4313      	orrs	r3, r2
 80014a4:	3401      	adds	r4, #1
 80014a6:	9304      	str	r3, [sp, #16]
 80014a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014ac:	4825      	ldr	r0, [pc, #148]	; (8001544 <_svfiprintf_r+0x1ec>)
 80014ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80014b2:	2206      	movs	r2, #6
 80014b4:	f7fe fe8c 	bl	80001d0 <memchr>
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d038      	beq.n	800152e <_svfiprintf_r+0x1d6>
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <_svfiprintf_r+0x1f0>)
 80014be:	bb1b      	cbnz	r3, 8001508 <_svfiprintf_r+0x1b0>
 80014c0:	9b03      	ldr	r3, [sp, #12]
 80014c2:	3307      	adds	r3, #7
 80014c4:	f023 0307 	bic.w	r3, r3, #7
 80014c8:	3308      	adds	r3, #8
 80014ca:	9303      	str	r3, [sp, #12]
 80014cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014ce:	4433      	add	r3, r6
 80014d0:	9309      	str	r3, [sp, #36]	; 0x24
 80014d2:	e768      	b.n	80013a6 <_svfiprintf_r+0x4e>
 80014d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80014d8:	460c      	mov	r4, r1
 80014da:	2001      	movs	r0, #1
 80014dc:	e7a6      	b.n	800142c <_svfiprintf_r+0xd4>
 80014de:	2300      	movs	r3, #0
 80014e0:	3401      	adds	r4, #1
 80014e2:	9305      	str	r3, [sp, #20]
 80014e4:	4619      	mov	r1, r3
 80014e6:	f04f 0c0a 	mov.w	ip, #10
 80014ea:	4620      	mov	r0, r4
 80014ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014f0:	3a30      	subs	r2, #48	; 0x30
 80014f2:	2a09      	cmp	r2, #9
 80014f4:	d903      	bls.n	80014fe <_svfiprintf_r+0x1a6>
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0c6      	beq.n	8001488 <_svfiprintf_r+0x130>
 80014fa:	9105      	str	r1, [sp, #20]
 80014fc:	e7c4      	b.n	8001488 <_svfiprintf_r+0x130>
 80014fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8001502:	4604      	mov	r4, r0
 8001504:	2301      	movs	r3, #1
 8001506:	e7f0      	b.n	80014ea <_svfiprintf_r+0x192>
 8001508:	ab03      	add	r3, sp, #12
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	462a      	mov	r2, r5
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <_svfiprintf_r+0x1f4>)
 8001510:	a904      	add	r1, sp, #16
 8001512:	4638      	mov	r0, r7
 8001514:	f3af 8000 	nop.w
 8001518:	1c42      	adds	r2, r0, #1
 800151a:	4606      	mov	r6, r0
 800151c:	d1d6      	bne.n	80014cc <_svfiprintf_r+0x174>
 800151e:	89ab      	ldrh	r3, [r5, #12]
 8001520:	065b      	lsls	r3, r3, #25
 8001522:	f53f af2d 	bmi.w	8001380 <_svfiprintf_r+0x28>
 8001526:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001528:	b01d      	add	sp, #116	; 0x74
 800152a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800152e:	ab03      	add	r3, sp, #12
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	462a      	mov	r2, r5
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <_svfiprintf_r+0x1f4>)
 8001536:	a904      	add	r1, sp, #16
 8001538:	4638      	mov	r0, r7
 800153a:	f000 f879 	bl	8001630 <_printf_i>
 800153e:	e7eb      	b.n	8001518 <_svfiprintf_r+0x1c0>
 8001540:	080019c2 	.word	0x080019c2
 8001544:	080019cc 	.word	0x080019cc
 8001548:	00000000 	.word	0x00000000
 800154c:	080012a5 	.word	0x080012a5
 8001550:	080019c8 	.word	0x080019c8

08001554 <_printf_common>:
 8001554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001558:	4616      	mov	r6, r2
 800155a:	4699      	mov	r9, r3
 800155c:	688a      	ldr	r2, [r1, #8]
 800155e:	690b      	ldr	r3, [r1, #16]
 8001560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001564:	4293      	cmp	r3, r2
 8001566:	bfb8      	it	lt
 8001568:	4613      	movlt	r3, r2
 800156a:	6033      	str	r3, [r6, #0]
 800156c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001570:	4607      	mov	r7, r0
 8001572:	460c      	mov	r4, r1
 8001574:	b10a      	cbz	r2, 800157a <_printf_common+0x26>
 8001576:	3301      	adds	r3, #1
 8001578:	6033      	str	r3, [r6, #0]
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	0699      	lsls	r1, r3, #26
 800157e:	bf42      	ittt	mi
 8001580:	6833      	ldrmi	r3, [r6, #0]
 8001582:	3302      	addmi	r3, #2
 8001584:	6033      	strmi	r3, [r6, #0]
 8001586:	6825      	ldr	r5, [r4, #0]
 8001588:	f015 0506 	ands.w	r5, r5, #6
 800158c:	d106      	bne.n	800159c <_printf_common+0x48>
 800158e:	f104 0a19 	add.w	sl, r4, #25
 8001592:	68e3      	ldr	r3, [r4, #12]
 8001594:	6832      	ldr	r2, [r6, #0]
 8001596:	1a9b      	subs	r3, r3, r2
 8001598:	42ab      	cmp	r3, r5
 800159a:	dc26      	bgt.n	80015ea <_printf_common+0x96>
 800159c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80015a0:	1e13      	subs	r3, r2, #0
 80015a2:	6822      	ldr	r2, [r4, #0]
 80015a4:	bf18      	it	ne
 80015a6:	2301      	movne	r3, #1
 80015a8:	0692      	lsls	r2, r2, #26
 80015aa:	d42b      	bmi.n	8001604 <_printf_common+0xb0>
 80015ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80015b0:	4649      	mov	r1, r9
 80015b2:	4638      	mov	r0, r7
 80015b4:	47c0      	blx	r8
 80015b6:	3001      	adds	r0, #1
 80015b8:	d01e      	beq.n	80015f8 <_printf_common+0xa4>
 80015ba:	6823      	ldr	r3, [r4, #0]
 80015bc:	6922      	ldr	r2, [r4, #16]
 80015be:	f003 0306 	and.w	r3, r3, #6
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	bf02      	ittt	eq
 80015c6:	68e5      	ldreq	r5, [r4, #12]
 80015c8:	6833      	ldreq	r3, [r6, #0]
 80015ca:	1aed      	subeq	r5, r5, r3
 80015cc:	68a3      	ldr	r3, [r4, #8]
 80015ce:	bf0c      	ite	eq
 80015d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80015d4:	2500      	movne	r5, #0
 80015d6:	4293      	cmp	r3, r2
 80015d8:	bfc4      	itt	gt
 80015da:	1a9b      	subgt	r3, r3, r2
 80015dc:	18ed      	addgt	r5, r5, r3
 80015de:	2600      	movs	r6, #0
 80015e0:	341a      	adds	r4, #26
 80015e2:	42b5      	cmp	r5, r6
 80015e4:	d11a      	bne.n	800161c <_printf_common+0xc8>
 80015e6:	2000      	movs	r0, #0
 80015e8:	e008      	b.n	80015fc <_printf_common+0xa8>
 80015ea:	2301      	movs	r3, #1
 80015ec:	4652      	mov	r2, sl
 80015ee:	4649      	mov	r1, r9
 80015f0:	4638      	mov	r0, r7
 80015f2:	47c0      	blx	r8
 80015f4:	3001      	adds	r0, #1
 80015f6:	d103      	bne.n	8001600 <_printf_common+0xac>
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001600:	3501      	adds	r5, #1
 8001602:	e7c6      	b.n	8001592 <_printf_common+0x3e>
 8001604:	18e1      	adds	r1, r4, r3
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	2030      	movs	r0, #48	; 0x30
 800160a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800160e:	4422      	add	r2, r4
 8001610:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001614:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001618:	3302      	adds	r3, #2
 800161a:	e7c7      	b.n	80015ac <_printf_common+0x58>
 800161c:	2301      	movs	r3, #1
 800161e:	4622      	mov	r2, r4
 8001620:	4649      	mov	r1, r9
 8001622:	4638      	mov	r0, r7
 8001624:	47c0      	blx	r8
 8001626:	3001      	adds	r0, #1
 8001628:	d0e6      	beq.n	80015f8 <_printf_common+0xa4>
 800162a:	3601      	adds	r6, #1
 800162c:	e7d9      	b.n	80015e2 <_printf_common+0x8e>
	...

08001630 <_printf_i>:
 8001630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001634:	7e0f      	ldrb	r7, [r1, #24]
 8001636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001638:	2f78      	cmp	r7, #120	; 0x78
 800163a:	4691      	mov	r9, r2
 800163c:	4680      	mov	r8, r0
 800163e:	460c      	mov	r4, r1
 8001640:	469a      	mov	sl, r3
 8001642:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001646:	d807      	bhi.n	8001658 <_printf_i+0x28>
 8001648:	2f62      	cmp	r7, #98	; 0x62
 800164a:	d80a      	bhi.n	8001662 <_printf_i+0x32>
 800164c:	2f00      	cmp	r7, #0
 800164e:	f000 80d4 	beq.w	80017fa <_printf_i+0x1ca>
 8001652:	2f58      	cmp	r7, #88	; 0x58
 8001654:	f000 80c0 	beq.w	80017d8 <_printf_i+0x1a8>
 8001658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800165c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001660:	e03a      	b.n	80016d8 <_printf_i+0xa8>
 8001662:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001666:	2b15      	cmp	r3, #21
 8001668:	d8f6      	bhi.n	8001658 <_printf_i+0x28>
 800166a:	a101      	add	r1, pc, #4	; (adr r1, 8001670 <_printf_i+0x40>)
 800166c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001670:	080016c9 	.word	0x080016c9
 8001674:	080016dd 	.word	0x080016dd
 8001678:	08001659 	.word	0x08001659
 800167c:	08001659 	.word	0x08001659
 8001680:	08001659 	.word	0x08001659
 8001684:	08001659 	.word	0x08001659
 8001688:	080016dd 	.word	0x080016dd
 800168c:	08001659 	.word	0x08001659
 8001690:	08001659 	.word	0x08001659
 8001694:	08001659 	.word	0x08001659
 8001698:	08001659 	.word	0x08001659
 800169c:	080017e1 	.word	0x080017e1
 80016a0:	08001709 	.word	0x08001709
 80016a4:	0800179b 	.word	0x0800179b
 80016a8:	08001659 	.word	0x08001659
 80016ac:	08001659 	.word	0x08001659
 80016b0:	08001803 	.word	0x08001803
 80016b4:	08001659 	.word	0x08001659
 80016b8:	08001709 	.word	0x08001709
 80016bc:	08001659 	.word	0x08001659
 80016c0:	08001659 	.word	0x08001659
 80016c4:	080017a3 	.word	0x080017a3
 80016c8:	682b      	ldr	r3, [r5, #0]
 80016ca:	1d1a      	adds	r2, r3, #4
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	602a      	str	r2, [r5, #0]
 80016d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80016d8:	2301      	movs	r3, #1
 80016da:	e09f      	b.n	800181c <_printf_i+0x1ec>
 80016dc:	6820      	ldr	r0, [r4, #0]
 80016de:	682b      	ldr	r3, [r5, #0]
 80016e0:	0607      	lsls	r7, r0, #24
 80016e2:	f103 0104 	add.w	r1, r3, #4
 80016e6:	6029      	str	r1, [r5, #0]
 80016e8:	d501      	bpl.n	80016ee <_printf_i+0xbe>
 80016ea:	681e      	ldr	r6, [r3, #0]
 80016ec:	e003      	b.n	80016f6 <_printf_i+0xc6>
 80016ee:	0646      	lsls	r6, r0, #25
 80016f0:	d5fb      	bpl.n	80016ea <_printf_i+0xba>
 80016f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80016f6:	2e00      	cmp	r6, #0
 80016f8:	da03      	bge.n	8001702 <_printf_i+0xd2>
 80016fa:	232d      	movs	r3, #45	; 0x2d
 80016fc:	4276      	negs	r6, r6
 80016fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001702:	485a      	ldr	r0, [pc, #360]	; (800186c <_printf_i+0x23c>)
 8001704:	230a      	movs	r3, #10
 8001706:	e012      	b.n	800172e <_printf_i+0xfe>
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	6820      	ldr	r0, [r4, #0]
 800170c:	1d19      	adds	r1, r3, #4
 800170e:	6029      	str	r1, [r5, #0]
 8001710:	0605      	lsls	r5, r0, #24
 8001712:	d501      	bpl.n	8001718 <_printf_i+0xe8>
 8001714:	681e      	ldr	r6, [r3, #0]
 8001716:	e002      	b.n	800171e <_printf_i+0xee>
 8001718:	0641      	lsls	r1, r0, #25
 800171a:	d5fb      	bpl.n	8001714 <_printf_i+0xe4>
 800171c:	881e      	ldrh	r6, [r3, #0]
 800171e:	4853      	ldr	r0, [pc, #332]	; (800186c <_printf_i+0x23c>)
 8001720:	2f6f      	cmp	r7, #111	; 0x6f
 8001722:	bf0c      	ite	eq
 8001724:	2308      	moveq	r3, #8
 8001726:	230a      	movne	r3, #10
 8001728:	2100      	movs	r1, #0
 800172a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800172e:	6865      	ldr	r5, [r4, #4]
 8001730:	60a5      	str	r5, [r4, #8]
 8001732:	2d00      	cmp	r5, #0
 8001734:	bfa2      	ittt	ge
 8001736:	6821      	ldrge	r1, [r4, #0]
 8001738:	f021 0104 	bicge.w	r1, r1, #4
 800173c:	6021      	strge	r1, [r4, #0]
 800173e:	b90e      	cbnz	r6, 8001744 <_printf_i+0x114>
 8001740:	2d00      	cmp	r5, #0
 8001742:	d04b      	beq.n	80017dc <_printf_i+0x1ac>
 8001744:	4615      	mov	r5, r2
 8001746:	fbb6 f1f3 	udiv	r1, r6, r3
 800174a:	fb03 6711 	mls	r7, r3, r1, r6
 800174e:	5dc7      	ldrb	r7, [r0, r7]
 8001750:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001754:	4637      	mov	r7, r6
 8001756:	42bb      	cmp	r3, r7
 8001758:	460e      	mov	r6, r1
 800175a:	d9f4      	bls.n	8001746 <_printf_i+0x116>
 800175c:	2b08      	cmp	r3, #8
 800175e:	d10b      	bne.n	8001778 <_printf_i+0x148>
 8001760:	6823      	ldr	r3, [r4, #0]
 8001762:	07de      	lsls	r6, r3, #31
 8001764:	d508      	bpl.n	8001778 <_printf_i+0x148>
 8001766:	6923      	ldr	r3, [r4, #16]
 8001768:	6861      	ldr	r1, [r4, #4]
 800176a:	4299      	cmp	r1, r3
 800176c:	bfde      	ittt	le
 800176e:	2330      	movle	r3, #48	; 0x30
 8001770:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001774:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001778:	1b52      	subs	r2, r2, r5
 800177a:	6122      	str	r2, [r4, #16]
 800177c:	f8cd a000 	str.w	sl, [sp]
 8001780:	464b      	mov	r3, r9
 8001782:	aa03      	add	r2, sp, #12
 8001784:	4621      	mov	r1, r4
 8001786:	4640      	mov	r0, r8
 8001788:	f7ff fee4 	bl	8001554 <_printf_common>
 800178c:	3001      	adds	r0, #1
 800178e:	d14a      	bne.n	8001826 <_printf_i+0x1f6>
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	b004      	add	sp, #16
 8001796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	f043 0320 	orr.w	r3, r3, #32
 80017a0:	6023      	str	r3, [r4, #0]
 80017a2:	4833      	ldr	r0, [pc, #204]	; (8001870 <_printf_i+0x240>)
 80017a4:	2778      	movs	r7, #120	; 0x78
 80017a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	6829      	ldr	r1, [r5, #0]
 80017ae:	061f      	lsls	r7, r3, #24
 80017b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80017b4:	d402      	bmi.n	80017bc <_printf_i+0x18c>
 80017b6:	065f      	lsls	r7, r3, #25
 80017b8:	bf48      	it	mi
 80017ba:	b2b6      	uxthmi	r6, r6
 80017bc:	07df      	lsls	r7, r3, #31
 80017be:	bf48      	it	mi
 80017c0:	f043 0320 	orrmi.w	r3, r3, #32
 80017c4:	6029      	str	r1, [r5, #0]
 80017c6:	bf48      	it	mi
 80017c8:	6023      	strmi	r3, [r4, #0]
 80017ca:	b91e      	cbnz	r6, 80017d4 <_printf_i+0x1a4>
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	f023 0320 	bic.w	r3, r3, #32
 80017d2:	6023      	str	r3, [r4, #0]
 80017d4:	2310      	movs	r3, #16
 80017d6:	e7a7      	b.n	8001728 <_printf_i+0xf8>
 80017d8:	4824      	ldr	r0, [pc, #144]	; (800186c <_printf_i+0x23c>)
 80017da:	e7e4      	b.n	80017a6 <_printf_i+0x176>
 80017dc:	4615      	mov	r5, r2
 80017de:	e7bd      	b.n	800175c <_printf_i+0x12c>
 80017e0:	682b      	ldr	r3, [r5, #0]
 80017e2:	6826      	ldr	r6, [r4, #0]
 80017e4:	6961      	ldr	r1, [r4, #20]
 80017e6:	1d18      	adds	r0, r3, #4
 80017e8:	6028      	str	r0, [r5, #0]
 80017ea:	0635      	lsls	r5, r6, #24
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	d501      	bpl.n	80017f4 <_printf_i+0x1c4>
 80017f0:	6019      	str	r1, [r3, #0]
 80017f2:	e002      	b.n	80017fa <_printf_i+0x1ca>
 80017f4:	0670      	lsls	r0, r6, #25
 80017f6:	d5fb      	bpl.n	80017f0 <_printf_i+0x1c0>
 80017f8:	8019      	strh	r1, [r3, #0]
 80017fa:	2300      	movs	r3, #0
 80017fc:	6123      	str	r3, [r4, #16]
 80017fe:	4615      	mov	r5, r2
 8001800:	e7bc      	b.n	800177c <_printf_i+0x14c>
 8001802:	682b      	ldr	r3, [r5, #0]
 8001804:	1d1a      	adds	r2, r3, #4
 8001806:	602a      	str	r2, [r5, #0]
 8001808:	681d      	ldr	r5, [r3, #0]
 800180a:	6862      	ldr	r2, [r4, #4]
 800180c:	2100      	movs	r1, #0
 800180e:	4628      	mov	r0, r5
 8001810:	f7fe fcde 	bl	80001d0 <memchr>
 8001814:	b108      	cbz	r0, 800181a <_printf_i+0x1ea>
 8001816:	1b40      	subs	r0, r0, r5
 8001818:	6060      	str	r0, [r4, #4]
 800181a:	6863      	ldr	r3, [r4, #4]
 800181c:	6123      	str	r3, [r4, #16]
 800181e:	2300      	movs	r3, #0
 8001820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001824:	e7aa      	b.n	800177c <_printf_i+0x14c>
 8001826:	6923      	ldr	r3, [r4, #16]
 8001828:	462a      	mov	r2, r5
 800182a:	4649      	mov	r1, r9
 800182c:	4640      	mov	r0, r8
 800182e:	47d0      	blx	sl
 8001830:	3001      	adds	r0, #1
 8001832:	d0ad      	beq.n	8001790 <_printf_i+0x160>
 8001834:	6823      	ldr	r3, [r4, #0]
 8001836:	079b      	lsls	r3, r3, #30
 8001838:	d413      	bmi.n	8001862 <_printf_i+0x232>
 800183a:	68e0      	ldr	r0, [r4, #12]
 800183c:	9b03      	ldr	r3, [sp, #12]
 800183e:	4298      	cmp	r0, r3
 8001840:	bfb8      	it	lt
 8001842:	4618      	movlt	r0, r3
 8001844:	e7a6      	b.n	8001794 <_printf_i+0x164>
 8001846:	2301      	movs	r3, #1
 8001848:	4632      	mov	r2, r6
 800184a:	4649      	mov	r1, r9
 800184c:	4640      	mov	r0, r8
 800184e:	47d0      	blx	sl
 8001850:	3001      	adds	r0, #1
 8001852:	d09d      	beq.n	8001790 <_printf_i+0x160>
 8001854:	3501      	adds	r5, #1
 8001856:	68e3      	ldr	r3, [r4, #12]
 8001858:	9903      	ldr	r1, [sp, #12]
 800185a:	1a5b      	subs	r3, r3, r1
 800185c:	42ab      	cmp	r3, r5
 800185e:	dcf2      	bgt.n	8001846 <_printf_i+0x216>
 8001860:	e7eb      	b.n	800183a <_printf_i+0x20a>
 8001862:	2500      	movs	r5, #0
 8001864:	f104 0619 	add.w	r6, r4, #25
 8001868:	e7f5      	b.n	8001856 <_printf_i+0x226>
 800186a:	bf00      	nop
 800186c:	080019d3 	.word	0x080019d3
 8001870:	080019e4 	.word	0x080019e4

08001874 <memmove>:
 8001874:	4288      	cmp	r0, r1
 8001876:	b510      	push	{r4, lr}
 8001878:	eb01 0402 	add.w	r4, r1, r2
 800187c:	d902      	bls.n	8001884 <memmove+0x10>
 800187e:	4284      	cmp	r4, r0
 8001880:	4623      	mov	r3, r4
 8001882:	d807      	bhi.n	8001894 <memmove+0x20>
 8001884:	1e43      	subs	r3, r0, #1
 8001886:	42a1      	cmp	r1, r4
 8001888:	d008      	beq.n	800189c <memmove+0x28>
 800188a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800188e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001892:	e7f8      	b.n	8001886 <memmove+0x12>
 8001894:	4402      	add	r2, r0
 8001896:	4601      	mov	r1, r0
 8001898:	428a      	cmp	r2, r1
 800189a:	d100      	bne.n	800189e <memmove+0x2a>
 800189c:	bd10      	pop	{r4, pc}
 800189e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80018a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80018a6:	e7f7      	b.n	8001898 <memmove+0x24>

080018a8 <_sbrk_r>:
 80018a8:	b538      	push	{r3, r4, r5, lr}
 80018aa:	4d06      	ldr	r5, [pc, #24]	; (80018c4 <_sbrk_r+0x1c>)
 80018ac:	2300      	movs	r3, #0
 80018ae:	4604      	mov	r4, r0
 80018b0:	4608      	mov	r0, r1
 80018b2:	602b      	str	r3, [r5, #0]
 80018b4:	f7ff f822 	bl	80008fc <_sbrk>
 80018b8:	1c43      	adds	r3, r0, #1
 80018ba:	d102      	bne.n	80018c2 <_sbrk_r+0x1a>
 80018bc:	682b      	ldr	r3, [r5, #0]
 80018be:	b103      	cbz	r3, 80018c2 <_sbrk_r+0x1a>
 80018c0:	6023      	str	r3, [r4, #0]
 80018c2:	bd38      	pop	{r3, r4, r5, pc}
 80018c4:	20000234 	.word	0x20000234

080018c8 <memcpy>:
 80018c8:	440a      	add	r2, r1
 80018ca:	4291      	cmp	r1, r2
 80018cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80018d0:	d100      	bne.n	80018d4 <memcpy+0xc>
 80018d2:	4770      	bx	lr
 80018d4:	b510      	push	{r4, lr}
 80018d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80018da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80018de:	4291      	cmp	r1, r2
 80018e0:	d1f9      	bne.n	80018d6 <memcpy+0xe>
 80018e2:	bd10      	pop	{r4, pc}

080018e4 <_realloc_r>:
 80018e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018e8:	4680      	mov	r8, r0
 80018ea:	4614      	mov	r4, r2
 80018ec:	460e      	mov	r6, r1
 80018ee:	b921      	cbnz	r1, 80018fa <_realloc_r+0x16>
 80018f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018f4:	4611      	mov	r1, r2
 80018f6:	f7ff bc49 	b.w	800118c <_malloc_r>
 80018fa:	b92a      	cbnz	r2, 8001908 <_realloc_r+0x24>
 80018fc:	f7ff fbda 	bl	80010b4 <_free_r>
 8001900:	4625      	mov	r5, r4
 8001902:	4628      	mov	r0, r5
 8001904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001908:	f000 f81b 	bl	8001942 <_malloc_usable_size_r>
 800190c:	4284      	cmp	r4, r0
 800190e:	4607      	mov	r7, r0
 8001910:	d802      	bhi.n	8001918 <_realloc_r+0x34>
 8001912:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001916:	d812      	bhi.n	800193e <_realloc_r+0x5a>
 8001918:	4621      	mov	r1, r4
 800191a:	4640      	mov	r0, r8
 800191c:	f7ff fc36 	bl	800118c <_malloc_r>
 8001920:	4605      	mov	r5, r0
 8001922:	2800      	cmp	r0, #0
 8001924:	d0ed      	beq.n	8001902 <_realloc_r+0x1e>
 8001926:	42bc      	cmp	r4, r7
 8001928:	4622      	mov	r2, r4
 800192a:	4631      	mov	r1, r6
 800192c:	bf28      	it	cs
 800192e:	463a      	movcs	r2, r7
 8001930:	f7ff ffca 	bl	80018c8 <memcpy>
 8001934:	4631      	mov	r1, r6
 8001936:	4640      	mov	r0, r8
 8001938:	f7ff fbbc 	bl	80010b4 <_free_r>
 800193c:	e7e1      	b.n	8001902 <_realloc_r+0x1e>
 800193e:	4635      	mov	r5, r6
 8001940:	e7df      	b.n	8001902 <_realloc_r+0x1e>

08001942 <_malloc_usable_size_r>:
 8001942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001946:	1f18      	subs	r0, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	bfbc      	itt	lt
 800194c:	580b      	ldrlt	r3, [r1, r0]
 800194e:	18c0      	addlt	r0, r0, r3
 8001950:	4770      	bx	lr
	...

08001954 <_init>:
 8001954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001956:	bf00      	nop
 8001958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800195a:	bc08      	pop	{r3}
 800195c:	469e      	mov	lr, r3
 800195e:	4770      	bx	lr

08001960 <_fini>:
 8001960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001962:	bf00      	nop
 8001964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001966:	bc08      	pop	{r3}
 8001968:	469e      	mov	lr, r3
 800196a:	4770      	bx	lr
