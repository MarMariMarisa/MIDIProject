
swn-340 projjj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08001b8c  08001b8c  00011b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e7c  08001e7c  00027b24  2**0
                  CONTENTS
  4 .ARM          00000000  08001e7c  08001e7c  00027b24  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e7c  08001e7c  00027b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e7c  08001e7c  00011e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e80  08001e80  00011e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007b24  20000000  08001e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20007b24  080099a8  00027b24  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007e14  080099a8  00027e14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027b24  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00027b54  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002467  00000000  00000000  00027b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d43  00000000  00000000  00029ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000268  00000000  00000000  0002ad48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000196  00000000  00000000  0002afb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f2e  00000000  00000000  0002b146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004d60  00000000  00000000  00051074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3f8a  00000000  00000000  00055dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000bac  00000000  00000000  00149d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0014a90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20007b24 	.word	0x20007b24
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001b74 	.word	0x08001b74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20007b28 	.word	0x20007b28
 80001cc:	08001b74 	.word	0x08001b74

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <SysTick_Handler>:
void Error_Handler () {
	// Add error handler here if desired
}

// Systic interrupt handler
void SysTick_Handler() {
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	static uint32_t counter = 0; // that counts up to 1000
	counter++;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <SysTick_Handler+0x30>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <SysTick_Handler+0x30>)
 80002ac:	6013      	str	r3, [r2, #0]
	if (counter == 1000) {
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <SysTick_Handler+0x30>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002b6:	d105      	bne.n	80002c4 <SysTick_Handler+0x24>
		one_second_elapsed = TRUE;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <SysTick_Handler+0x34>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	701a      	strb	r2, [r3, #0]
		counter = 0;
 80002be:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <SysTick_Handler+0x30>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
	}
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	20007b44 	.word	0x20007b44
 80002d4:	20007b40 	.word	0x20007b40

080002d8 <LED_Init>:

//******************************************************************************************
// User pin = LD2 Green pin = PA.5
//******************************************************************************************

void LED_Init(uint8_t pin){
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 80002e2:	4b2b      	ldr	r3, [pc, #172]	; (8000390 <LED_Init+0xb8>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e6:	4a2a      	ldr	r2, [pc, #168]	; (8000390 <LED_Init+0xb8>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));
 80002ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	005b      	lsls	r3, r3, #1
 80002f8:	2103      	movs	r1, #3
 80002fa:	fa01 f303 	lsl.w	r3, r1, r3
 80002fe:	43db      	mvns	r3, r3
 8000300:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000304:	4013      	ands	r3, r2
 8000306:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 8000308:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	2101      	movs	r1, #1
 8000314:	fa01 f303 	lsl.w	r3, r1, r3
 8000318:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800031c:	4313      	orrs	r3, r2
 800031e:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 8000320:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000324:	689a      	ldr	r2, [r3, #8]
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	2103      	movs	r1, #3
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000336:	4013      	ands	r3, r2
 8000338:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 800033a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800033e:	689a      	ldr	r2, [r3, #8]
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	2103      	movs	r1, #3
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800034e:	4313      	orrs	r3, r2
 8000350:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 8000352:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000356:	685a      	ldr	r2, [r3, #4]
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	2101      	movs	r1, #1
 800035c:	fa01 f303 	lsl.w	r3, r1, r3
 8000360:	43db      	mvns	r3, r3
 8000362:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000366:	4013      	ands	r3, r2
 8000368:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 800036a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800036e:	68da      	ldr	r2, [r3, #12]
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	005b      	lsls	r3, r3, #1
 8000374:	2103      	movs	r1, #3
 8000376:	fa01 f303 	lsl.w	r3, r1, r3
 800037a:	43db      	mvns	r3, r3
 800037c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000380:	4013      	ands	r3, r2
 8000382:	60cb      	str	r3, [r1, #12]
	
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40021000 	.word	0x40021000

08000394 <LED_On>:

//******************************************************************************************
// Turn pin On
//******************************************************************************************
void LED_On(uint8_t pin){
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR |= (1UL<<pin);
 800039e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003a2:	695a      	ldr	r2, [r3, #20]
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	2101      	movs	r1, #1
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003b0:	4313      	orrs	r3, r2
 80003b2:	614b      	str	r3, [r1, #20]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <LED_Off>:

//******************************************************************************************
// Turn pin Off
//******************************************************************************************
void LED_Off(uint8_t pin){
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR &= ~(1UL<<pin);
 80003ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ce:	695a      	ldr	r2, [r3, #20]
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	2101      	movs	r1, #1
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	43db      	mvns	r3, r3
 80003da:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003de:	4013      	ands	r3, r2
 80003e0:	614b      	str	r3, [r1, #20]
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr

080003ee <LED_Toggle>:

//******************************************************************************************
// Toggle pin
//******************************************************************************************
void LED_Toggle(uint8_t pin){
 80003ee:	b480      	push	{r7}
 80003f0:	b083      	sub	sp, #12
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	4603      	mov	r3, r0
 80003f6:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR ^= (1UL<<pin);
 80003f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003fc:	695a      	ldr	r2, [r3, #20]
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	2101      	movs	r1, #1
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800040a:	4053      	eors	r3, r2
 800040c:	614b      	str	r3, [r1, #20]
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
	...

0800041c <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000422:	4b6b      	ldr	r3, [pc, #428]	; (80005d0 <System_Clock_Init+0x1b4>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a6a      	ldr	r2, [pc, #424]	; (80005d0 <System_Clock_Init+0x1b4>)
 8000428:	f023 0307 	bic.w	r3, r3, #7
 800042c:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 800042e:	4b68      	ldr	r3, [pc, #416]	; (80005d0 <System_Clock_Init+0x1b4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a67      	ldr	r2, [pc, #412]	; (80005d0 <System_Clock_Init+0x1b4>)
 8000434:	f043 0302 	orr.w	r3, r3, #2
 8000438:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 800043a:	4b66      	ldr	r3, [pc, #408]	; (80005d4 <System_Clock_Init+0x1b8>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a65      	ldr	r2, [pc, #404]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000444:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 8000446:	bf00      	nop
 8000448:	4b62      	ldr	r3, [pc, #392]	; (80005d4 <System_Clock_Init+0x1b8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000450:	2b00      	cmp	r3, #0
 8000452:	d0f9      	beq.n	8000448 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 8000454:	2310      	movs	r3, #16
 8000456:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 8000458:	4b5e      	ldr	r3, [pc, #376]	; (80005d4 <System_Clock_Init+0x1b8>)
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	4a5d      	ldr	r2, [pc, #372]	; (80005d4 <System_Clock_Init+0x1b8>)
 800045e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000462:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000464:	4b5b      	ldr	r3, [pc, #364]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000466:	685a      	ldr	r2, [r3, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	061b      	lsls	r3, r3, #24
 800046c:	4959      	ldr	r1, [pc, #356]	; (80005d4 <System_Clock_Init+0x1b8>)
 800046e:	4313      	orrs	r3, r2
 8000470:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000472:	4b58      	ldr	r3, [pc, #352]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a57      	ldr	r2, [pc, #348]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000478:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800047c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 800047e:	bf00      	nop
 8000480:	4b54      	ldr	r3, [pc, #336]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800048c:	d0f8      	beq.n	8000480 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 800048e:	4b51      	ldr	r3, [pc, #324]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	4a50      	ldr	r2, [pc, #320]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000494:	f023 0303 	bic.w	r3, r3, #3
 8000498:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800049a:	4b4e      	ldr	r3, [pc, #312]	; (80005d4 <System_Clock_Init+0x1b8>)
 800049c:	68db      	ldr	r3, [r3, #12]
 800049e:	4a4d      	ldr	r2, [pc, #308]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004a0:	f043 0302 	orr.w	r3, r3, #2
 80004a4:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 80004a6:	4b4b      	ldr	r3, [pc, #300]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80004ae:	4a49      	ldr	r2, [pc, #292]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004b0:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80004b4:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 80004b6:	4b47      	ldr	r3, [pc, #284]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004be:	4a45      	ldr	r2, [pc, #276]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004c0:	f043 0310 	orr.w	r3, r3, #16
 80004c4:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 80004c6:	4b43      	ldr	r3, [pc, #268]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	4a42      	ldr	r2, [pc, #264]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80004d0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 80004d2:	4b40      	ldr	r3, [pc, #256]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	4a3f      	ldr	r2, [pc, #252]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004dc:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 80004de:	4b3d      	ldr	r3, [pc, #244]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a3c      	ldr	r2, [pc, #240]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004e8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 80004ea:	bf00      	nop
 80004ec:	4b39      	ldr	r3, [pc, #228]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f9      	beq.n	80004ec <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 80004f8:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	4a35      	ldr	r2, [pc, #212]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004fe:	f023 0303 	bic.w	r3, r3, #3
 8000502:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8000504:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	4a32      	ldr	r2, [pc, #200]	; (80005d4 <System_Clock_Init+0x1b8>)
 800050a:	f043 0303 	orr.w	r3, r3, #3
 800050e:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000510:	bf00      	nop
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	f003 030c 	and.w	r3, r3, #12
 800051a:	2b0c      	cmp	r3, #12
 800051c:	d1f9      	bne.n	8000512 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	4a2c      	ldr	r2, [pc, #176]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000524:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000528:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <System_Clock_Init+0x1b8>)
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	4a29      	ldr	r2, [pc, #164]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000530:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000534:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <System_Clock_Init+0x1b8>)
 800053c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000540:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000542:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a23      	ldr	r2, [pc, #140]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000548:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800054c:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 800054e:	bf00      	nop
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800055c:	d0f8      	beq.n	8000550 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000560:	691b      	ldr	r3, [r3, #16]
 8000562:	4a1c      	ldr	r2, [pc, #112]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000564:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000568:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 800056a:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <System_Clock_Init+0x1b8>)
 800056c:	691b      	ldr	r3, [r3, #16]
 800056e:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000570:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000574:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <System_Clock_Init+0x1b8>)
 800057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000580:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000584:	691b      	ldr	r3, [r3, #16]
 8000586:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800058c:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000594:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000598:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 800059a:	bf00      	nop
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <System_Clock_Init+0x1b8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d0f9      	beq.n	800059c <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <System_Clock_Init+0x1b8>)
 80005aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ae:	4a09      	ldr	r2, [pc, #36]	; (80005d4 <System_Clock_Init+0x1b8>)
 80005b0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80005b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <System_Clock_Init+0x1b8>)
 80005ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005bc:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <System_Clock_Init+0x1b8>)
 80005be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005c2:	6613      	str	r3, [r2, #96]	; 0x60
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40022000 	.word	0x40022000
 80005d4:	40021000 	.word	0x40021000

080005d8 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <UART2_Init+0x40>)
 80005de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005e0:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <UART2_Init+0x40>)
 80005e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e6:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 80005e8:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <UART2_Init+0x40>)
 80005ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <UART2_Init+0x40>)
 80005f0:	f023 030c 	bic.w	r3, r3, #12
 80005f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <UART2_Init+0x40>)
 80005fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005fe:	4a06      	ldr	r2, [pc, #24]	; (8000618 <UART2_Init+0x40>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000608:	f000 f80a 	bl	8000620 <UART2_GPIO_Init>
	USART_Init(USART2);
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <UART2_Init+0x44>)
 800060e:	f000 f84f 	bl	80006b0 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000
 800061c:	40004400 	.word	0x40004400

08000620 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <UART2_GPIO_Init+0x8c>)
 8000626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000628:	4a20      	ldr	r2, [pc, #128]	; (80006ac <UART2_GPIO_Init+0x8c>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 8000630:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800063a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800063e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 8000640:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800064a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800064e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 8000650:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000654:	6a1b      	ldr	r3, [r3, #32]
 8000656:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800065a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800065e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 8000660:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000664:	6a1b      	ldr	r3, [r3, #32]
 8000666:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800066a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800066e:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 8000670:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800067a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800067e:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000680:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800068a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800068e:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 8000690:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800069a:	f023 030c 	bic.w	r3, r3, #12
 800069e:	6053      	str	r3, [r2, #4]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000

080006b0 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 0201 	bic.w	r2, r3, #1
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f242 028d 	movw	r2, #8333	; 0x208d
 80006ee:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f043 020c 	orr.w	r2, r3, #12
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a2c      	ldr	r2, [pc, #176]	; (80007b0 <USART_Init+0x100>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d129      	bne.n	8000758 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f043 0220 	orr.w	r2, r3, #32
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f023 0210 	bic.w	r2, r3, #16
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f023 0201 	bic.w	r2, r3, #1
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <USART_Init+0x104>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d10b      	bne.n	8000778 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6a1b      	ldr	r3, [r3, #32]
 8000764:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <USART_Init+0x108>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	4a11      	ldr	r2, [pc, #68]	; (80007b8 <USART_Init+0x108>)
 8000772:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000776:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f043 0201 	orr.w	r2, r3, #1
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000784:	bf00      	nop
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f9      	beq.n	8000786 <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000792:	bf00      	nop
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800079c:	2b00      	cmp	r3, #0
 800079e:	d0f9      	beq.n	8000794 <USART_Init+0xe4>
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40004c00 	.word	0x40004c00
 80007b4:	40004400 	.word	0x40004400
 80007b8:	40013800 	.word	0x40013800

080007bc <USART_Read_Nonblocking>:
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}
uint8_t USART_Read_Nonblocking (USART_TypeDef * USARTx) {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	if(!(USARTx->ISR & USART_ISR_RXNE)){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	69db      	ldr	r3, [r3, #28]
 80007c8:	f003 0320 	and.w	r3, r3, #32
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d101      	bne.n	80007d4 <USART_Read_Nonblocking+0x18>
			return 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	e003      	b.n	80007dc <USART_Read_Nonblocking+0x20>
	}else{
		return ((uint8_t)(USARTx->RDR & 0xFF));
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007d8:	b29b      	uxth	r3, r3
 80007da:	b2db      	uxtb	r3, r3
	}
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	e014      	b.n	8000824 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 80007fa:	bf00      	nop
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000804:	2b00      	cmp	r3, #0
 8000806:	d0f9      	beq.n	80007fc <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b29a      	uxth	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 8000816:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800081a:	f000 f819 	bl	8000850 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	429a      	cmp	r2, r3
 800082a:	d8e6      	bhi.n	80007fa <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 800082c:	bf00      	nop
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0f9      	beq.n	800082e <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	61da      	str	r2, [r3, #28]
}   
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2264      	movs	r2, #100	; 0x64
 800085c:	fb03 f202 	mul.w	r2, r3, r2
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <USART_Delay+0x3c>)
 8000862:	fba3 1302 	umull	r1, r3, r3, r2
 8000866:	1ad2      	subs	r2, r2, r3
 8000868:	0852      	lsrs	r2, r2, #1
 800086a:	4413      	add	r3, r2
 800086c:	089b      	lsrs	r3, r3, #2
 800086e:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000870:	bf00      	nop
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3b01      	subs	r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d1f9      	bne.n	8000872 <USART_Delay+0x22>
}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	24924925 	.word	0x24924925

08000890 <get_song>:

// Convenience list of all the songs in one array.
song songs[] = {{song0, sizeof (song0)}, {song1, sizeof (song1)}, {song2, sizeof (song2)}, {song3, sizeof (song3)},
				{song4, sizeof (song4)}};

song get_song (uint8_t song_number){
 8000890:	b490      	push	{r4, r7}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
	return songs[song_number];
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	4a06      	ldr	r2, [pc, #24]	; (80008bc <get_song+0x2c>)
 80008a2:	460c      	mov	r4, r1
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	4413      	add	r3, r2
 80008a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008ac:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc90      	pop	{r4, r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20007aa4 	.word	0x20007aa4

080008c0 <next_song>:
#include <stdlib.h>
#define LED_PIN 5

char BUFFER[128];
int currentSongNum = -1;
void next_song(){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	f5ad 7d4e 	sub.w	sp, sp, #824	; 0x338
 80008c6:	af00      	add	r7, sp, #0
	//display next songs title and queue it
	currentSongNum++;
 80008c8:	4bbd      	ldr	r3, [pc, #756]	; (8000bc0 <next_song+0x300>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	4abc      	ldr	r2, [pc, #752]	; (8000bc0 <next_song+0x300>)
 80008d0:	6013      	str	r3, [r2, #0]
	if(currentSongNum == 6){
 80008d2:	4bbb      	ldr	r3, [pc, #748]	; (8000bc0 <next_song+0x300>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b06      	cmp	r3, #6
 80008d8:	d102      	bne.n	80008e0 <next_song+0x20>
		currentSongNum = 0;
 80008da:	4bb9      	ldr	r3, [pc, #740]	; (8000bc0 <next_song+0x300>)
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
	}
	//title find
	char songTitle[128] = {};
 80008e0:	2300      	movs	r3, #0
 80008e2:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 80008e6:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80008ea:	227c      	movs	r2, #124	; 0x7c
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fcbc 	bl	800126c <memset>
	int titleIndex = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
	int numToCount = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
	int mtrkCnt = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330

	song song = get_song(currentSongNum);
 8000906:	4bae      	ldr	r3, [pc, #696]	; (8000bc0 <next_song+0x300>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ffbc 	bl	8000890 <get_song>
	int i = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
	while(0==0){
		if(song.p_song[i] == 255 && song.p_song[i+1] == 3){
 800091e:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000922:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000926:	4413      	add	r3, r2
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2bff      	cmp	r3, #255	; 0xff
 800092c:	d108      	bne.n	8000940 <next_song+0x80>
 800092e:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000932:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000936:	3301      	adds	r3, #1
 8000938:	4413      	add	r3, r2
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b03      	cmp	r3, #3
 800093e:	d02d      	beq.n	800099c <next_song+0xdc>
			break;
		}
		i++;
 8000940:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000944:	3301      	adds	r3, #1
 8000946:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
		if(song.p_song[i] == 77 && song.p_song[i+1] == 84 && song.p_song[i+2] == 114 && song.p_song[i+3] == 107 ){
 800094a:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 800094e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000952:	4413      	add	r3, r2
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b4d      	cmp	r3, #77	; 0x4d
 8000958:	d1e1      	bne.n	800091e <next_song+0x5e>
 800095a:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 800095e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000962:	3301      	adds	r3, #1
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b54      	cmp	r3, #84	; 0x54
 800096a:	d1d8      	bne.n	800091e <next_song+0x5e>
 800096c:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000970:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000974:	3302      	adds	r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b72      	cmp	r3, #114	; 0x72
 800097c:	d1cf      	bne.n	800091e <next_song+0x5e>
 800097e:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000982:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000986:	3303      	adds	r3, #3
 8000988:	4413      	add	r3, r2
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b6b      	cmp	r3, #107	; 0x6b
 800098e:	d1c6      	bne.n	800091e <next_song+0x5e>
			mtrkCnt++;
 8000990:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000994:	3301      	adds	r3, #1
 8000996:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
		if(song.p_song[i] == 255 && song.p_song[i+1] == 3){
 800099a:	e7c0      	b.n	800091e <next_song+0x5e>
			break;
 800099c:	bf00      	nop
		}
	}
	if(mtrkCnt != 2){
 800099e:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d033      	beq.n	8000a0e <next_song+0x14e>
		int numToCount = song.p_song[i+2];
 80009a6:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 80009aa:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80009ae:	3302      	adds	r3, #2
 80009b0:	4413      	add	r3, r2
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
		i++;
 80009b8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80009bc:	3301      	adds	r3, #1
 80009be:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
		for(int p = i; p<=numToCount+i+1;p++){
 80009c2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80009c6:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 80009ca:	e016      	b.n	80009fa <next_song+0x13a>
			songTitle[titleIndex] = (char)(song.p_song[p]);
 80009cc:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 80009d0:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009d4:	4413      	add	r3, r2
 80009d6:	7819      	ldrb	r1, [r3, #0]
 80009d8:	f507 7222 	add.w	r2, r7, #648	; 0x288
 80009dc:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80009e0:	4413      	add	r3, r2
 80009e2:	460a      	mov	r2, r1
 80009e4:	701a      	strb	r2, [r3, #0]
			titleIndex++;
 80009e6:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80009ea:	3301      	adds	r3, #1
 80009ec:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
		for(int p = i; p<=numToCount+i+1;p++){
 80009f0:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80009f4:	3301      	adds	r3, #1
 80009f6:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 80009fa:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 80009fe:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000a02:	4413      	add	r3, r2
 8000a04:	3301      	adds	r3, #1
 8000a06:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	ddde      	ble.n	80009cc <next_song+0x10c>
		}
	}
	//copyright find
	char songCopyright[128] = {};
 8000a0e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000a12:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	227c      	movs	r2, #124	; 0x7c
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 fc23 	bl	800126c <memset>
	int copyrightIndex = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
	i = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
	mtrkCnt = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
	while(0==0){
		if(song.p_song[i] == 255 && song.p_song[i+1] == 2 ){
 8000a38:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000a3c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000a40:	4413      	add	r3, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2bff      	cmp	r3, #255	; 0xff
 8000a46:	d108      	bne.n	8000a5a <next_song+0x19a>
 8000a48:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000a4c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000a50:	3301      	adds	r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d031      	beq.n	8000abe <next_song+0x1fe>
			break;
		}
		if(song.p_song[i] == 77 && song.p_song[i+1] == 84 && song.p_song[i+2] == 114 && song.p_song[i+3] == 107 ){
 8000a5a:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000a5e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b4d      	cmp	r3, #77	; 0x4d
 8000a68:	d11f      	bne.n	8000aaa <next_song+0x1ea>
 8000a6a:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000a6e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000a72:	3301      	adds	r3, #1
 8000a74:	4413      	add	r3, r2
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b54      	cmp	r3, #84	; 0x54
 8000a7a:	d116      	bne.n	8000aaa <next_song+0x1ea>
 8000a7c:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000a80:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000a84:	3302      	adds	r3, #2
 8000a86:	4413      	add	r3, r2
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b72      	cmp	r3, #114	; 0x72
 8000a8c:	d10d      	bne.n	8000aaa <next_song+0x1ea>
 8000a8e:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000a92:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000a96:	3303      	adds	r3, #3
 8000a98:	4413      	add	r3, r2
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b6b      	cmp	r3, #107	; 0x6b
 8000a9e:	d104      	bne.n	8000aaa <next_song+0x1ea>
					mtrkCnt++;
 8000aa0:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
		}

		i++;
 8000aaa:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000aae:	3301      	adds	r3, #1
 8000ab0:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
		if(mtrkCnt == 2){
 8000ab4:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d002      	beq.n	8000ac2 <next_song+0x202>
		if(song.p_song[i] == 255 && song.p_song[i+1] == 2 ){
 8000abc:	e7bc      	b.n	8000a38 <next_song+0x178>
			break;
 8000abe:	bf00      	nop
 8000ac0:	e000      	b.n	8000ac4 <next_song+0x204>
			break;
 8000ac2:	bf00      	nop
		}
	}
	if(mtrkCnt != 2){
 8000ac4:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8000ac8:	2b02      	cmp	r3, #2
 8000aca:	d035      	beq.n	8000b38 <next_song+0x278>
		numToCount = song.p_song[i+2];
 8000acc:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000ad0:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	4413      	add	r3, r2
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
		i++;
 8000ade:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
		for(int p = i; p<=numToCount+i+1;p++){
 8000ae8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000aec:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8000af0:	e018      	b.n	8000b24 <next_song+0x264>
			songCopyright[copyrightIndex] = (char)(song.p_song[p]);
 8000af2:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000af6:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8000afa:	4413      	add	r3, r2
 8000afc:	7819      	ldrb	r1, [r3, #0]
 8000afe:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000b02:	f5a3 729c 	sub.w	r2, r3, #312	; 0x138
 8000b06:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8000b0a:	4413      	add	r3, r2
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	701a      	strb	r2, [r3, #0]
			copyrightIndex++;
 8000b10:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8000b14:	3301      	adds	r3, #1
 8000b16:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
		for(int p = i; p<=numToCount+i+1;p++){
 8000b1a:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8000b1e:	3301      	adds	r3, #1
 8000b20:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8000b24:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8000b28:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3301      	adds	r3, #1
 8000b30:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dddc      	ble.n	8000af2 <next_song+0x232>
		}
	}
	//tempo find
	uint32_t songTempo[128];
	uint32_t result = 120;
 8000b38:	2378      	movs	r3, #120	; 0x78
 8000b3a:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
	int tempoFound = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	int tempoIndex = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
	numToCount = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
	i = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
	while(0==0){
		if(song.p_song[i] == 81 && song.p_song[i+1] == 3){
 8000b56:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000b5a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000b5e:	4413      	add	r3, r2
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b51      	cmp	r3, #81	; 0x51
 8000b64:	d119      	bne.n	8000b9a <next_song+0x2da>
 8000b66:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000b6a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4413      	add	r3, r2
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	d110      	bne.n	8000b9a <next_song+0x2da>
			tempoFound = 1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
			break;
 8000b7e:	bf00      	nop
		}
		i++;
		}
	numToCount = 3;
 8000b80:	2303      	movs	r3, #3
 8000b82:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
	i++;
 8000b86:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
	if(tempoFound == 1){
 8000b90:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d14d      	bne.n	8000c34 <next_song+0x374>
 8000b98:	e005      	b.n	8000ba6 <next_song+0x2e6>
		i++;
 8000b9a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
		if(song.p_song[i] == 81 && song.p_song[i+1] == 3){
 8000ba4:	e7d7      	b.n	8000b56 <next_song+0x296>
		songTempo[0] = 0;
 8000ba6:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000baa:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
		for(int p = i+1; p<=numToCount+i+1;p++){
 8000bb2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8000bbc:	e01b      	b.n	8000bf6 <next_song+0x336>
 8000bbe:	bf00      	nop
 8000bc0:	20007acc 	.word	0x20007acc
			songTempo[tempoIndex] = song.p_song[p];
 8000bc4:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 8000bc8:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8000bcc:	4413      	add	r3, r2
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000bd6:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8000bda:	f8d7 2318 	ldr.w	r2, [r7, #792]	; 0x318
 8000bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			tempoIndex++;
 8000be2:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8000be6:	3301      	adds	r3, #1
 8000be8:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
		for(int p = i+1; p<=numToCount+i+1;p++){
 8000bec:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8000bf6:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8000bfa:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8000bfe:	4413      	add	r3, r2
 8000c00:	3301      	adds	r3, #1
 8000c02:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8000c06:	429a      	cmp	r2, r3
 8000c08:	dddc      	ble.n	8000bc4 <next_song+0x304>
		}
		result = (songTempo[0]<<16)| (songTempo[1]<<8) | songTempo[2];
 8000c0a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000c0e:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	041a      	lsls	r2, r3, #16
 8000c16:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000c1a:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	431a      	orrs	r2, r3
 8000c24:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000c28:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
	}
	printf("\n\r%d",strtol(result, NULL, 16));
 8000c34:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8000c38:	2210      	movs	r2, #16
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 faeb 	bl	8001218 <strtol>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4619      	mov	r1, r3
 8000c46:	480d      	ldr	r0, [pc, #52]	; (8000c7c <next_song+0x3bc>)
 8000c48:	f000 f928 	bl	8000e9c <printf>
	printf("\r\n%s","Current Song:");
 8000c4c:	490c      	ldr	r1, [pc, #48]	; (8000c80 <next_song+0x3c0>)
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <next_song+0x3c4>)
 8000c50:	f000 f924 	bl	8000e9c <printf>
	printf("\r\n%s%s","Song Title: ",songTitle);
 8000c54:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000c58:	461a      	mov	r2, r3
 8000c5a:	490b      	ldr	r1, [pc, #44]	; (8000c88 <next_song+0x3c8>)
 8000c5c:	480b      	ldr	r0, [pc, #44]	; (8000c8c <next_song+0x3cc>)
 8000c5e:	f000 f91d 	bl	8000e9c <printf>
	printf("\r\n%s%s","Copyright: ",songCopyright);
 8000c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c66:	461a      	mov	r2, r3
 8000c68:	4909      	ldr	r1, [pc, #36]	; (8000c90 <next_song+0x3d0>)
 8000c6a:	4808      	ldr	r0, [pc, #32]	; (8000c8c <next_song+0x3cc>)
 8000c6c:	f000 f916 	bl	8000e9c <printf>
}
 8000c70:	bf00      	nop
 8000c72:	f507 774e 	add.w	r7, r7, #824	; 0x338
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	08001b8c 	.word	0x08001b8c
 8000c80:	08001b94 	.word	0x08001b94
 8000c84:	08001ba4 	.word	0x08001ba4
 8000c88:	08001bac 	.word	0x08001bac
 8000c8c:	08001bbc 	.word	0x08001bbc
 8000c90:	08001bc4 	.word	0x08001bc4

08000c94 <play_song>:
void play_song(){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	LED_On(LED_PIN);
 8000c98:	2005      	movs	r0, #5
 8000c9a:	f7ff fb7b 	bl	8000394 <LED_On>
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <stop_song>:
void stop_song(){
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
	LED_Off(LED_PIN);
 8000ca6:	2005      	movs	r0, #5
 8000ca8:	f7ff fb8a 	bl	80003c0 <LED_Off>
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <pause_song>:
char* pause_song(){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
	init_systick();
 8000cb6:	f000 f9b5 	bl	8001024 <init_systick>
	int cnt = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
	int index = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
	char ch = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	while(1          ){
		cnt++;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
		ch = USART_Read_Nonblocking(USART2);
 8000ccc:	4819      	ldr	r0, [pc, #100]	; (8000d34 <pause_song+0x84>)
 8000cce:	f7ff fd75 	bl	80007bc <USART_Read_Nonblocking>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
		if(ch == '\r'){
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b0d      	cmp	r3, #13
 8000cda:	d01a      	beq.n	8000d12 <pause_song+0x62>
			break;
		}
		if(ch != 0){
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d00b      	beq.n	8000cfa <pause_song+0x4a>
			printf("%c",ch);
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 f8cb 	bl	8000e80 <putchar>
			BUFFER[index] = ch;
 8000cea:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <pause_song+0x88>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	4413      	add	r3, r2
 8000cf0:	79fa      	ldrb	r2, [r7, #7]
 8000cf2:	701a      	strb	r2, [r3, #0]
			index++;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	60bb      	str	r3, [r7, #8]
		}
		//change delay systick to only count to 1
		delay_systick();
 8000cfa:	f000 f9bd 	bl	8001078 <delay_systick>
		// Toggle LED
		//count to 10 then toggle led
		if(cnt == 1000){
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d04:	d1df      	bne.n	8000cc6 <pause_song+0x16>
			LED_Toggle(5);
 8000d06:	2005      	movs	r0, #5
 8000d08:	f7ff fb71 	bl	80003ee <LED_Toggle>
			cnt = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
		cnt++;
 8000d10:	e7d9      	b.n	8000cc6 <pause_song+0x16>
			break;
 8000d12:	bf00      	nop
		}
	}
	printf("\r\n");
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <pause_song+0x8c>)
 8000d16:	f000 f89b 	bl	8000e50 <puts>
	LED_Off(LED_PIN);
 8000d1a:	2005      	movs	r0, #5
 8000d1c:	f7ff fb50 	bl	80003c0 <LED_Off>
	BUFFER[index - 1] = 0;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <pause_song+0x88>)
 8000d26:	2100      	movs	r1, #0
 8000d28:	54d1      	strb	r1, [r2, r3]
	return BUFFER;
 8000d2a:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <pause_song+0x88>)
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40004400 	.word	0x40004400
 8000d38:	20007b48 	.word	0x20007b48
 8000d3c:	08001bd0 	.word	0x08001bd0

08000d40 <take_input>:

void take_input(char* initialInput){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	char* input = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
	if(initialInput == NULL){
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <take_input+0x18>
		input = read_line();
 8000d52:	f000 f939 	bl	8000fc8 <read_line>
 8000d56:	60f8      	str	r0, [r7, #12]
	}
	if(strcmp(input,"NEXT") == 0){
 8000d58:	4926      	ldr	r1, [pc, #152]	; (8000df4 <take_input+0xb4>)
 8000d5a:	68f8      	ldr	r0, [r7, #12]
 8000d5c:	f7ff fa38 	bl	80001d0 <strcmp>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d105      	bne.n	8000d72 <take_input+0x32>
		next_song();
 8000d66:	f7ff fdab 	bl	80008c0 <next_song>
		printf("\r\n");
 8000d6a:	4823      	ldr	r0, [pc, #140]	; (8000df8 <take_input+0xb8>)
 8000d6c:	f000 f870 	bl	8000e50 <puts>
	}
	else{
		printf("Invalid Input");
		printf("\r\n");
	}
}
 8000d70:	e03b      	b.n	8000dea <take_input+0xaa>
	else if(strcmp(input,"PLAY") == 0){
 8000d72:	4922      	ldr	r1, [pc, #136]	; (8000dfc <take_input+0xbc>)
 8000d74:	68f8      	ldr	r0, [r7, #12]
 8000d76:	f7ff fa2b 	bl	80001d0 <strcmp>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d105      	bne.n	8000d8c <take_input+0x4c>
		play_song();
 8000d80:	f7ff ff88 	bl	8000c94 <play_song>
		printf("\r\n");
 8000d84:	481c      	ldr	r0, [pc, #112]	; (8000df8 <take_input+0xb8>)
 8000d86:	f000 f863 	bl	8000e50 <puts>
}
 8000d8a:	e02e      	b.n	8000dea <take_input+0xaa>
	else if(strcmp(input,"PAUSE") == 0){
 8000d8c:	491c      	ldr	r1, [pc, #112]	; (8000e00 <take_input+0xc0>)
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f7ff fa1e 	bl	80001d0 <strcmp>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d109      	bne.n	8000dae <take_input+0x6e>
		printf("\r\n");
 8000d9a:	4817      	ldr	r0, [pc, #92]	; (8000df8 <take_input+0xb8>)
 8000d9c:	f000 f858 	bl	8000e50 <puts>
		char * pausedI = pause_song();
 8000da0:	f7ff ff86 	bl	8000cb0 <pause_song>
 8000da4:	60b8      	str	r0, [r7, #8]
		take_input(pausedI);
 8000da6:	68b8      	ldr	r0, [r7, #8]
 8000da8:	f7ff ffca 	bl	8000d40 <take_input>
}
 8000dac:	e01d      	b.n	8000dea <take_input+0xaa>
	else if(strcmp(input,"STOP") == 0){
 8000dae:	4915      	ldr	r1, [pc, #84]	; (8000e04 <take_input+0xc4>)
 8000db0:	68f8      	ldr	r0, [r7, #12]
 8000db2:	f7ff fa0d 	bl	80001d0 <strcmp>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d105      	bne.n	8000dc8 <take_input+0x88>
		stop_song();
 8000dbc:	f7ff ff71 	bl	8000ca2 <stop_song>
		printf("\r\n");
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <take_input+0xb8>)
 8000dc2:	f000 f845 	bl	8000e50 <puts>
}
 8000dc6:	e010      	b.n	8000dea <take_input+0xaa>
	else if(strcmp(input,"HELP") == 0){
 8000dc8:	490f      	ldr	r1, [pc, #60]	; (8000e08 <take_input+0xc8>)
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f7ff fa00 	bl	80001d0 <strcmp>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d103      	bne.n	8000dde <take_input+0x9e>
		printf("\n\rAvailable User Commands\n\rNEXT - Show next song info\n\rPLAY - Play the song (LED on)\n\rPAUSE - Pause the song (LED flash)\n\rSTOP - Stop the song (LED off)\n\r");
 8000dd6:	480d      	ldr	r0, [pc, #52]	; (8000e0c <take_input+0xcc>)
 8000dd8:	f000 f860 	bl	8000e9c <printf>
}
 8000ddc:	e005      	b.n	8000dea <take_input+0xaa>
		printf("Invalid Input");
 8000dde:	480c      	ldr	r0, [pc, #48]	; (8000e10 <take_input+0xd0>)
 8000de0:	f000 f85c 	bl	8000e9c <printf>
		printf("\r\n");
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <take_input+0xb8>)
 8000de6:	f000 f833 	bl	8000e50 <puts>
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	08001bd4 	.word	0x08001bd4
 8000df8:	08001bd0 	.word	0x08001bd0
 8000dfc:	08001bdc 	.word	0x08001bdc
 8000e00:	08001be4 	.word	0x08001be4
 8000e04:	08001bec 	.word	0x08001bec
 8000e08:	08001bf4 	.word	0x08001bf4
 8000e0c:	08001bfc 	.word	0x08001bfc
 8000e10:	08001c98 	.word	0x08001c98

08000e14 <init_player>:
void init_player(){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	printf("Available User Commands\n\rNEXT - Show next song info\n\rPLAY - Play the song (LED on)\n\rPAUSE - Pause the song (LED flash)\n\rSTOP - Stop the song (LED off)\n\r");
 8000e18:	4803      	ldr	r0, [pc, #12]	; (8000e28 <init_player+0x14>)
 8000e1a:	f000 f83f 	bl	8000e9c <printf>
	while(0 == 0){
		take_input(NULL);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff ff8e 	bl	8000d40 <take_input>
 8000e24:	e7fb      	b.n	8000e1e <init_player+0xa>
 8000e26:	bf00      	nop
 8000e28:	08001ca8 	.word	0x08001ca8

08000e2c <print_string>:
#include <stdio.h>
#include <stdarg.h>

static char buffer[128];

static void print_string (const char* string, int len) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
    USART_Write (USART2, (unsigned char*) string, len);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <print_string+0x20>)
 8000e3e:	f7ff fcd3 	bl	80007e8 <USART_Write>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40004400 	.word	0x40004400

08000e50 <puts>:

int puts (const char* string){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
    int len = strlen (string);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff f9c3 	bl	80001e4 <strlen>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	60fb      	str	r3, [r7, #12]
    print_string (string, len);
 8000e62:	68f9      	ldr	r1, [r7, #12]
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ffe1 	bl	8000e2c <print_string>
    print_string ("\n", 1);
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <puts+0x2c>)
 8000e6e:	f7ff ffdd 	bl	8000e2c <print_string>
    return len;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	08001d44 	.word	0x08001d44

08000e80 <putchar>:

int putchar (int chr){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
    print_string ((char*)&chr, 1);
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ffcd 	bl	8000e2c <print_string>
    return chr;
 8000e92:	687b      	ldr	r3, [r7, #4]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <printf>:

int printf (const char* format, ...) {
 8000e9c:	b40f      	push	{r0, r1, r2, r3}
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
    va_list aptr;
    int ret;

    va_start(aptr, format);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	603b      	str	r3, [r7, #0]
    ret = vsprintf(buffer, format, aptr);
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	6939      	ldr	r1, [r7, #16]
 8000eae:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <printf+0x34>)
 8000eb0:	f000 f9d2 	bl	8001258 <vsiprintf>
 8000eb4:	6078      	str	r0, [r7, #4]
    va_end(aptr);
    print_string (buffer, ret);
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <printf+0x34>)
 8000eba:	f7ff ffb7 	bl	8000e2c <print_string>

    return(ret);
 8000ebe:	687b      	ldr	r3, [r7, #4]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eca:	b004      	add	sp, #16
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20007bc8 	.word	0x20007bc8

08000ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000edc:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <_sbrk+0x5c>)
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <_sbrk+0x60>)
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <_sbrk+0x64>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <_sbrk+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d207      	bcs.n	8000f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f04:	f000 f9ba 	bl	800127c <__errno>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	e009      	b.n	8000f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <_sbrk+0x64>)
 8000f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20018000 	.word	0x20018000
 8000f34:	00000400 	.word	0x00000400
 8000f38:	20007c48 	.word	0x20007c48
 8000f3c:	20007e18 	.word	0x20007e18

08000f40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <SystemInit+0x64>)
 8000f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4a:	4a16      	ldr	r2, [pc, #88]	; (8000fa4 <SystemInit+0x64>)
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <SystemInit+0x68>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a13      	ldr	r2, [pc, #76]	; (8000fa8 <SystemInit+0x68>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <SystemInit+0x68>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <SystemInit+0x68>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <SystemInit+0x68>)
 8000f6c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f70:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <SystemInit+0x68>)
 8000f78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f7c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <SystemInit+0x68>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <SystemInit+0x68>)
 8000f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <SystemInit+0x68>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <SystemInit+0x64>)
 8000f92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f96:	609a      	str	r2, [r3, #8]
#endif
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00
 8000fa8:	40021000 	.word	0x40021000

08000fac <main>:
#include "hello_world.h"
#include "project.h"
#include "reader.h"
#include "systick.h"
#include "hw4.h"
int main(void){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 8000fb0:	f7ff fa34 	bl	800041c <System_Clock_Init>
	LED_Init(5);
 8000fb4:	2005      	movs	r0, #5
 8000fb6:	f7ff f98f 	bl	80002d8 <LED_Init>
	UART2_Init();
 8000fba:	f7ff fb0d 	bl	80005d8 <UART2_Init>
	
	init_player();
 8000fbe:	f7ff ff29 	bl	8000e14 <init_player>
 8000fc2:	2300      	movs	r3, #0

}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <read_line>:
#include "UART.h"
#include "printf.h"
#include "LED.h"
static char BUFFER[128];

char* read_line(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	//read one characterA
	//print that character on it's own line
	int index = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
	char ch = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	70fb      	strb	r3, [r7, #3]
	while(ch != '\r'){
 8000fd6:	e013      	b.n	8001000 <read_line+0x38>
		ch = (char)USART_Read_Nonblocking(USART2);
 8000fd8:	4810      	ldr	r0, [pc, #64]	; (800101c <read_line+0x54>)
 8000fda:	f7ff fbef 	bl	80007bc <USART_Read_Nonblocking>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	70fb      	strb	r3, [r7, #3]
		if(ch != '\0'){
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d00b      	beq.n	8001000 <read_line+0x38>
			printf("%c",ch);
 8000fe8:	78fb      	ldrb	r3, [r7, #3]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ff48 	bl	8000e80 <putchar>
			BUFFER[index] = ch;
 8000ff0:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <read_line+0x58>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	78fa      	ldrb	r2, [r7, #3]
 8000ff8:	701a      	strb	r2, [r3, #0]
			index++;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
	while(ch != '\r'){
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	2b0d      	cmp	r3, #13
 8001004:	d1e8      	bne.n	8000fd8 <read_line+0x10>
		}
	}
	BUFFER[index - 1] = 0;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3b01      	subs	r3, #1
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <read_line+0x58>)
 800100c:	2100      	movs	r1, #0
 800100e:	54d1      	strb	r1, [r2, r3]
	return BUFFER;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <read_line+0x58>)

}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40004400 	.word	0x40004400
 8001020:	20007c4c 	.word	0x20007c4c

08001024 <init_systick>:
	uint32_t CVR;
	uint32_t CALIB;
};
struct SYST* SYST_TICK = (struct SYST*) 0xE000E010;
// This function is to Initialize SysTick registers
struct SYST* init_systick(){
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
		//clear csr register
		SYST_TICK->CSR &= ~(1 << 0);;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <init_systick+0x4c>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <init_systick+0x4c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 0201 	bic.w	r2, r2, #1
 8001036:	601a      	str	r2, [r3, #0]
	    // Set timer to 10 ms
	    SYST_TICK->RVR = 79999;
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <init_systick+0x4c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <init_systick+0x50>)
 800103e:	605a      	str	r2, [r3, #4]
	    //Set to internal clock
	    SYST_TICK->CSR |= (1<<2); // Use pc source
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <init_systick+0x4c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <init_systick+0x4c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f042 0204 	orr.w	r2, r2, #4
 800104e:	601a      	str	r2, [r3, #0]
	    //Enable timer
	    SYST_TICK->CSR |= (1<<0); // Enable
 8001050:	4b07      	ldr	r3, [pc, #28]	; (8001070 <init_systick+0x4c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <init_systick+0x4c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0201 	orr.w	r2, r2, #1
 800105e:	601a      	str	r2, [r3, #0]
	    return SYST_TICK;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <init_systick+0x4c>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20007ad0 	.word	0x20007ad0
 8001074:	0001387f 	.word	0x0001387f

08001078 <delay_systick>:

// This function is to create delay using SysTick timer counter
void delay_systick(){
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
	int i;
	for(i=0;i<=0;i++){
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	e010      	b.n	80010a6 <delay_systick+0x2e>
		// Inside that for loop check the COUNTFLAG bit in the CTRL (CSR)
		// register in a loop. When that bit is set exit this inner loop
		int x = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
		while(x == 0){
 8001088:	e007      	b.n	800109a <delay_systick+0x22>
			if ((SYST_TICK->CSR >> 16) == 1) {
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <delay_systick+0x44>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	0c1b      	lsrs	r3, r3, #16
 8001092:	2b01      	cmp	r3, #1
 8001094:	d101      	bne.n	800109a <delay_systick+0x22>
		         x = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	603b      	str	r3, [r7, #0]
		while(x == 0){
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0f4      	beq.n	800108a <delay_systick+0x12>
	for(i=0;i<=0;i++){
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3301      	adds	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	ddeb      	ble.n	8001084 <delay_systick+0xc>
			}
		}
	}
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20007ad0 	.word	0x20007ad0

080010c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c4:	f7ff ff3c 	bl	8000f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c8:	480c      	ldr	r0, [pc, #48]	; (80010fc <LoopForever+0x6>)
  ldr r1, =_edata
 80010ca:	490d      	ldr	r1, [pc, #52]	; (8001100 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <LoopForever+0xe>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e0:	4c0a      	ldr	r4, [pc, #40]	; (800110c <LoopForever+0x16>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ee:	f000 f8cb 	bl	8001288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010f2:	f7ff ff5b 	bl	8000fac <main>

080010f6 <LoopForever>:

LoopForever:
    b LoopForever
 80010f6:	e7fe      	b.n	80010f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001100:	20007b24 	.word	0x20007b24
  ldr r2, =_sidata
 8001104:	08001e84 	.word	0x08001e84
  ldr r2, =_sbss
 8001108:	20007b24 	.word	0x20007b24
  ldr r4, =_ebss
 800110c:	20007e14 	.word	0x20007e14

08001110 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC1_2_IRQHandler>
	...

08001114 <_strtol_l.constprop.0>:
 8001114:	2b01      	cmp	r3, #1
 8001116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800111a:	d001      	beq.n	8001120 <_strtol_l.constprop.0+0xc>
 800111c:	2b24      	cmp	r3, #36	; 0x24
 800111e:	d906      	bls.n	800112e <_strtol_l.constprop.0+0x1a>
 8001120:	f000 f8ac 	bl	800127c <__errno>
 8001124:	2316      	movs	r3, #22
 8001126:	6003      	str	r3, [r0, #0]
 8001128:	2000      	movs	r0, #0
 800112a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800112e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8001214 <_strtol_l.constprop.0+0x100>
 8001132:	460d      	mov	r5, r1
 8001134:	462e      	mov	r6, r5
 8001136:	f815 4b01 	ldrb.w	r4, [r5], #1
 800113a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800113e:	f017 0708 	ands.w	r7, r7, #8
 8001142:	d1f7      	bne.n	8001134 <_strtol_l.constprop.0+0x20>
 8001144:	2c2d      	cmp	r4, #45	; 0x2d
 8001146:	d132      	bne.n	80011ae <_strtol_l.constprop.0+0x9a>
 8001148:	782c      	ldrb	r4, [r5, #0]
 800114a:	2701      	movs	r7, #1
 800114c:	1cb5      	adds	r5, r6, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d05b      	beq.n	800120a <_strtol_l.constprop.0+0xf6>
 8001152:	2b10      	cmp	r3, #16
 8001154:	d109      	bne.n	800116a <_strtol_l.constprop.0+0x56>
 8001156:	2c30      	cmp	r4, #48	; 0x30
 8001158:	d107      	bne.n	800116a <_strtol_l.constprop.0+0x56>
 800115a:	782c      	ldrb	r4, [r5, #0]
 800115c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8001160:	2c58      	cmp	r4, #88	; 0x58
 8001162:	d14d      	bne.n	8001200 <_strtol_l.constprop.0+0xec>
 8001164:	786c      	ldrb	r4, [r5, #1]
 8001166:	2310      	movs	r3, #16
 8001168:	3502      	adds	r5, #2
 800116a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800116e:	f108 38ff 	add.w	r8, r8, #4294967295
 8001172:	f04f 0e00 	mov.w	lr, #0
 8001176:	fbb8 f9f3 	udiv	r9, r8, r3
 800117a:	4676      	mov	r6, lr
 800117c:	fb03 8a19 	mls	sl, r3, r9, r8
 8001180:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8001184:	f1bc 0f09 	cmp.w	ip, #9
 8001188:	d816      	bhi.n	80011b8 <_strtol_l.constprop.0+0xa4>
 800118a:	4664      	mov	r4, ip
 800118c:	42a3      	cmp	r3, r4
 800118e:	dd24      	ble.n	80011da <_strtol_l.constprop.0+0xc6>
 8001190:	f1be 3fff 	cmp.w	lr, #4294967295
 8001194:	d008      	beq.n	80011a8 <_strtol_l.constprop.0+0x94>
 8001196:	45b1      	cmp	r9, r6
 8001198:	d31c      	bcc.n	80011d4 <_strtol_l.constprop.0+0xc0>
 800119a:	d101      	bne.n	80011a0 <_strtol_l.constprop.0+0x8c>
 800119c:	45a2      	cmp	sl, r4
 800119e:	db19      	blt.n	80011d4 <_strtol_l.constprop.0+0xc0>
 80011a0:	fb06 4603 	mla	r6, r6, r3, r4
 80011a4:	f04f 0e01 	mov.w	lr, #1
 80011a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80011ac:	e7e8      	b.n	8001180 <_strtol_l.constprop.0+0x6c>
 80011ae:	2c2b      	cmp	r4, #43	; 0x2b
 80011b0:	bf04      	itt	eq
 80011b2:	782c      	ldrbeq	r4, [r5, #0]
 80011b4:	1cb5      	addeq	r5, r6, #2
 80011b6:	e7ca      	b.n	800114e <_strtol_l.constprop.0+0x3a>
 80011b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80011bc:	f1bc 0f19 	cmp.w	ip, #25
 80011c0:	d801      	bhi.n	80011c6 <_strtol_l.constprop.0+0xb2>
 80011c2:	3c37      	subs	r4, #55	; 0x37
 80011c4:	e7e2      	b.n	800118c <_strtol_l.constprop.0+0x78>
 80011c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80011ca:	f1bc 0f19 	cmp.w	ip, #25
 80011ce:	d804      	bhi.n	80011da <_strtol_l.constprop.0+0xc6>
 80011d0:	3c57      	subs	r4, #87	; 0x57
 80011d2:	e7db      	b.n	800118c <_strtol_l.constprop.0+0x78>
 80011d4:	f04f 3eff 	mov.w	lr, #4294967295
 80011d8:	e7e6      	b.n	80011a8 <_strtol_l.constprop.0+0x94>
 80011da:	f1be 3fff 	cmp.w	lr, #4294967295
 80011de:	d105      	bne.n	80011ec <_strtol_l.constprop.0+0xd8>
 80011e0:	2322      	movs	r3, #34	; 0x22
 80011e2:	6003      	str	r3, [r0, #0]
 80011e4:	4646      	mov	r6, r8
 80011e6:	b942      	cbnz	r2, 80011fa <_strtol_l.constprop.0+0xe6>
 80011e8:	4630      	mov	r0, r6
 80011ea:	e79e      	b.n	800112a <_strtol_l.constprop.0+0x16>
 80011ec:	b107      	cbz	r7, 80011f0 <_strtol_l.constprop.0+0xdc>
 80011ee:	4276      	negs	r6, r6
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	d0f9      	beq.n	80011e8 <_strtol_l.constprop.0+0xd4>
 80011f4:	f1be 0f00 	cmp.w	lr, #0
 80011f8:	d000      	beq.n	80011fc <_strtol_l.constprop.0+0xe8>
 80011fa:	1e69      	subs	r1, r5, #1
 80011fc:	6011      	str	r1, [r2, #0]
 80011fe:	e7f3      	b.n	80011e8 <_strtol_l.constprop.0+0xd4>
 8001200:	2430      	movs	r4, #48	; 0x30
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1b1      	bne.n	800116a <_strtol_l.constprop.0+0x56>
 8001206:	2308      	movs	r3, #8
 8001208:	e7af      	b.n	800116a <_strtol_l.constprop.0+0x56>
 800120a:	2c30      	cmp	r4, #48	; 0x30
 800120c:	d0a5      	beq.n	800115a <_strtol_l.constprop.0+0x46>
 800120e:	230a      	movs	r3, #10
 8001210:	e7ab      	b.n	800116a <_strtol_l.constprop.0+0x56>
 8001212:	bf00      	nop
 8001214:	08001d47 	.word	0x08001d47

08001218 <strtol>:
 8001218:	4613      	mov	r3, r2
 800121a:	460a      	mov	r2, r1
 800121c:	4601      	mov	r1, r0
 800121e:	4802      	ldr	r0, [pc, #8]	; (8001228 <strtol+0x10>)
 8001220:	6800      	ldr	r0, [r0, #0]
 8001222:	f7ff bf77 	b.w	8001114 <_strtol_l.constprop.0>
 8001226:	bf00      	nop
 8001228:	20007b20 	.word	0x20007b20

0800122c <_vsiprintf_r>:
 800122c:	b500      	push	{lr}
 800122e:	b09b      	sub	sp, #108	; 0x6c
 8001230:	9100      	str	r1, [sp, #0]
 8001232:	9104      	str	r1, [sp, #16]
 8001234:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001238:	9105      	str	r1, [sp, #20]
 800123a:	9102      	str	r1, [sp, #8]
 800123c:	4905      	ldr	r1, [pc, #20]	; (8001254 <_vsiprintf_r+0x28>)
 800123e:	9103      	str	r1, [sp, #12]
 8001240:	4669      	mov	r1, sp
 8001242:	f000 f999 	bl	8001578 <_svfiprintf_r>
 8001246:	9b00      	ldr	r3, [sp, #0]
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
 800124c:	b01b      	add	sp, #108	; 0x6c
 800124e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001252:	bf00      	nop
 8001254:	ffff0208 	.word	0xffff0208

08001258 <vsiprintf>:
 8001258:	4613      	mov	r3, r2
 800125a:	460a      	mov	r2, r1
 800125c:	4601      	mov	r1, r0
 800125e:	4802      	ldr	r0, [pc, #8]	; (8001268 <vsiprintf+0x10>)
 8001260:	6800      	ldr	r0, [r0, #0]
 8001262:	f7ff bfe3 	b.w	800122c <_vsiprintf_r>
 8001266:	bf00      	nop
 8001268:	20007b20 	.word	0x20007b20

0800126c <memset>:
 800126c:	4402      	add	r2, r0
 800126e:	4603      	mov	r3, r0
 8001270:	4293      	cmp	r3, r2
 8001272:	d100      	bne.n	8001276 <memset+0xa>
 8001274:	4770      	bx	lr
 8001276:	f803 1b01 	strb.w	r1, [r3], #1
 800127a:	e7f9      	b.n	8001270 <memset+0x4>

0800127c <__errno>:
 800127c:	4b01      	ldr	r3, [pc, #4]	; (8001284 <__errno+0x8>)
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20007b20 	.word	0x20007b20

08001288 <__libc_init_array>:
 8001288:	b570      	push	{r4, r5, r6, lr}
 800128a:	4d0d      	ldr	r5, [pc, #52]	; (80012c0 <__libc_init_array+0x38>)
 800128c:	4c0d      	ldr	r4, [pc, #52]	; (80012c4 <__libc_init_array+0x3c>)
 800128e:	1b64      	subs	r4, r4, r5
 8001290:	10a4      	asrs	r4, r4, #2
 8001292:	2600      	movs	r6, #0
 8001294:	42a6      	cmp	r6, r4
 8001296:	d109      	bne.n	80012ac <__libc_init_array+0x24>
 8001298:	4d0b      	ldr	r5, [pc, #44]	; (80012c8 <__libc_init_array+0x40>)
 800129a:	4c0c      	ldr	r4, [pc, #48]	; (80012cc <__libc_init_array+0x44>)
 800129c:	f000 fc6a 	bl	8001b74 <_init>
 80012a0:	1b64      	subs	r4, r4, r5
 80012a2:	10a4      	asrs	r4, r4, #2
 80012a4:	2600      	movs	r6, #0
 80012a6:	42a6      	cmp	r6, r4
 80012a8:	d105      	bne.n	80012b6 <__libc_init_array+0x2e>
 80012aa:	bd70      	pop	{r4, r5, r6, pc}
 80012ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80012b0:	4798      	blx	r3
 80012b2:	3601      	adds	r6, #1
 80012b4:	e7ee      	b.n	8001294 <__libc_init_array+0xc>
 80012b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80012ba:	4798      	blx	r3
 80012bc:	3601      	adds	r6, #1
 80012be:	e7f2      	b.n	80012a6 <__libc_init_array+0x1e>
 80012c0:	08001e7c 	.word	0x08001e7c
 80012c4:	08001e7c 	.word	0x08001e7c
 80012c8:	08001e7c 	.word	0x08001e7c
 80012cc:	08001e80 	.word	0x08001e80

080012d0 <__retarget_lock_acquire_recursive>:
 80012d0:	4770      	bx	lr

080012d2 <__retarget_lock_release_recursive>:
 80012d2:	4770      	bx	lr

080012d4 <_free_r>:
 80012d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80012d6:	2900      	cmp	r1, #0
 80012d8:	d044      	beq.n	8001364 <_free_r+0x90>
 80012da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012de:	9001      	str	r0, [sp, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f1a1 0404 	sub.w	r4, r1, #4
 80012e6:	bfb8      	it	lt
 80012e8:	18e4      	addlt	r4, r4, r3
 80012ea:	f000 f8df 	bl	80014ac <__malloc_lock>
 80012ee:	4a1e      	ldr	r2, [pc, #120]	; (8001368 <_free_r+0x94>)
 80012f0:	9801      	ldr	r0, [sp, #4]
 80012f2:	6813      	ldr	r3, [r2, #0]
 80012f4:	b933      	cbnz	r3, 8001304 <_free_r+0x30>
 80012f6:	6063      	str	r3, [r4, #4]
 80012f8:	6014      	str	r4, [r2, #0]
 80012fa:	b003      	add	sp, #12
 80012fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001300:	f000 b8da 	b.w	80014b8 <__malloc_unlock>
 8001304:	42a3      	cmp	r3, r4
 8001306:	d908      	bls.n	800131a <_free_r+0x46>
 8001308:	6825      	ldr	r5, [r4, #0]
 800130a:	1961      	adds	r1, r4, r5
 800130c:	428b      	cmp	r3, r1
 800130e:	bf01      	itttt	eq
 8001310:	6819      	ldreq	r1, [r3, #0]
 8001312:	685b      	ldreq	r3, [r3, #4]
 8001314:	1949      	addeq	r1, r1, r5
 8001316:	6021      	streq	r1, [r4, #0]
 8001318:	e7ed      	b.n	80012f6 <_free_r+0x22>
 800131a:	461a      	mov	r2, r3
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	b10b      	cbz	r3, 8001324 <_free_r+0x50>
 8001320:	42a3      	cmp	r3, r4
 8001322:	d9fa      	bls.n	800131a <_free_r+0x46>
 8001324:	6811      	ldr	r1, [r2, #0]
 8001326:	1855      	adds	r5, r2, r1
 8001328:	42a5      	cmp	r5, r4
 800132a:	d10b      	bne.n	8001344 <_free_r+0x70>
 800132c:	6824      	ldr	r4, [r4, #0]
 800132e:	4421      	add	r1, r4
 8001330:	1854      	adds	r4, r2, r1
 8001332:	42a3      	cmp	r3, r4
 8001334:	6011      	str	r1, [r2, #0]
 8001336:	d1e0      	bne.n	80012fa <_free_r+0x26>
 8001338:	681c      	ldr	r4, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	6053      	str	r3, [r2, #4]
 800133e:	440c      	add	r4, r1
 8001340:	6014      	str	r4, [r2, #0]
 8001342:	e7da      	b.n	80012fa <_free_r+0x26>
 8001344:	d902      	bls.n	800134c <_free_r+0x78>
 8001346:	230c      	movs	r3, #12
 8001348:	6003      	str	r3, [r0, #0]
 800134a:	e7d6      	b.n	80012fa <_free_r+0x26>
 800134c:	6825      	ldr	r5, [r4, #0]
 800134e:	1961      	adds	r1, r4, r5
 8001350:	428b      	cmp	r3, r1
 8001352:	bf04      	itt	eq
 8001354:	6819      	ldreq	r1, [r3, #0]
 8001356:	685b      	ldreq	r3, [r3, #4]
 8001358:	6063      	str	r3, [r4, #4]
 800135a:	bf04      	itt	eq
 800135c:	1949      	addeq	r1, r1, r5
 800135e:	6021      	streq	r1, [r4, #0]
 8001360:	6054      	str	r4, [r2, #4]
 8001362:	e7ca      	b.n	80012fa <_free_r+0x26>
 8001364:	b003      	add	sp, #12
 8001366:	bd30      	pop	{r4, r5, pc}
 8001368:	20007e0c 	.word	0x20007e0c

0800136c <sbrk_aligned>:
 800136c:	b570      	push	{r4, r5, r6, lr}
 800136e:	4e0e      	ldr	r6, [pc, #56]	; (80013a8 <sbrk_aligned+0x3c>)
 8001370:	460c      	mov	r4, r1
 8001372:	6831      	ldr	r1, [r6, #0]
 8001374:	4605      	mov	r5, r0
 8001376:	b911      	cbnz	r1, 800137e <sbrk_aligned+0x12>
 8001378:	f000 fba6 	bl	8001ac8 <_sbrk_r>
 800137c:	6030      	str	r0, [r6, #0]
 800137e:	4621      	mov	r1, r4
 8001380:	4628      	mov	r0, r5
 8001382:	f000 fba1 	bl	8001ac8 <_sbrk_r>
 8001386:	1c43      	adds	r3, r0, #1
 8001388:	d00a      	beq.n	80013a0 <sbrk_aligned+0x34>
 800138a:	1cc4      	adds	r4, r0, #3
 800138c:	f024 0403 	bic.w	r4, r4, #3
 8001390:	42a0      	cmp	r0, r4
 8001392:	d007      	beq.n	80013a4 <sbrk_aligned+0x38>
 8001394:	1a21      	subs	r1, r4, r0
 8001396:	4628      	mov	r0, r5
 8001398:	f000 fb96 	bl	8001ac8 <_sbrk_r>
 800139c:	3001      	adds	r0, #1
 800139e:	d101      	bne.n	80013a4 <sbrk_aligned+0x38>
 80013a0:	f04f 34ff 	mov.w	r4, #4294967295
 80013a4:	4620      	mov	r0, r4
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
 80013a8:	20007e10 	.word	0x20007e10

080013ac <_malloc_r>:
 80013ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013b0:	1ccd      	adds	r5, r1, #3
 80013b2:	f025 0503 	bic.w	r5, r5, #3
 80013b6:	3508      	adds	r5, #8
 80013b8:	2d0c      	cmp	r5, #12
 80013ba:	bf38      	it	cc
 80013bc:	250c      	movcc	r5, #12
 80013be:	2d00      	cmp	r5, #0
 80013c0:	4607      	mov	r7, r0
 80013c2:	db01      	blt.n	80013c8 <_malloc_r+0x1c>
 80013c4:	42a9      	cmp	r1, r5
 80013c6:	d905      	bls.n	80013d4 <_malloc_r+0x28>
 80013c8:	230c      	movs	r3, #12
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	2600      	movs	r6, #0
 80013ce:	4630      	mov	r0, r6
 80013d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80013d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80014a8 <_malloc_r+0xfc>
 80013d8:	f000 f868 	bl	80014ac <__malloc_lock>
 80013dc:	f8d8 3000 	ldr.w	r3, [r8]
 80013e0:	461c      	mov	r4, r3
 80013e2:	bb5c      	cbnz	r4, 800143c <_malloc_r+0x90>
 80013e4:	4629      	mov	r1, r5
 80013e6:	4638      	mov	r0, r7
 80013e8:	f7ff ffc0 	bl	800136c <sbrk_aligned>
 80013ec:	1c43      	adds	r3, r0, #1
 80013ee:	4604      	mov	r4, r0
 80013f0:	d155      	bne.n	800149e <_malloc_r+0xf2>
 80013f2:	f8d8 4000 	ldr.w	r4, [r8]
 80013f6:	4626      	mov	r6, r4
 80013f8:	2e00      	cmp	r6, #0
 80013fa:	d145      	bne.n	8001488 <_malloc_r+0xdc>
 80013fc:	2c00      	cmp	r4, #0
 80013fe:	d048      	beq.n	8001492 <_malloc_r+0xe6>
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	4631      	mov	r1, r6
 8001404:	4638      	mov	r0, r7
 8001406:	eb04 0903 	add.w	r9, r4, r3
 800140a:	f000 fb5d 	bl	8001ac8 <_sbrk_r>
 800140e:	4581      	cmp	r9, r0
 8001410:	d13f      	bne.n	8001492 <_malloc_r+0xe6>
 8001412:	6821      	ldr	r1, [r4, #0]
 8001414:	1a6d      	subs	r5, r5, r1
 8001416:	4629      	mov	r1, r5
 8001418:	4638      	mov	r0, r7
 800141a:	f7ff ffa7 	bl	800136c <sbrk_aligned>
 800141e:	3001      	adds	r0, #1
 8001420:	d037      	beq.n	8001492 <_malloc_r+0xe6>
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	442b      	add	r3, r5
 8001426:	6023      	str	r3, [r4, #0]
 8001428:	f8d8 3000 	ldr.w	r3, [r8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d038      	beq.n	80014a2 <_malloc_r+0xf6>
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	42a2      	cmp	r2, r4
 8001434:	d12b      	bne.n	800148e <_malloc_r+0xe2>
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	e00f      	b.n	800145c <_malloc_r+0xb0>
 800143c:	6822      	ldr	r2, [r4, #0]
 800143e:	1b52      	subs	r2, r2, r5
 8001440:	d41f      	bmi.n	8001482 <_malloc_r+0xd6>
 8001442:	2a0b      	cmp	r2, #11
 8001444:	d917      	bls.n	8001476 <_malloc_r+0xca>
 8001446:	1961      	adds	r1, r4, r5
 8001448:	42a3      	cmp	r3, r4
 800144a:	6025      	str	r5, [r4, #0]
 800144c:	bf18      	it	ne
 800144e:	6059      	strne	r1, [r3, #4]
 8001450:	6863      	ldr	r3, [r4, #4]
 8001452:	bf08      	it	eq
 8001454:	f8c8 1000 	streq.w	r1, [r8]
 8001458:	5162      	str	r2, [r4, r5]
 800145a:	604b      	str	r3, [r1, #4]
 800145c:	4638      	mov	r0, r7
 800145e:	f104 060b 	add.w	r6, r4, #11
 8001462:	f000 f829 	bl	80014b8 <__malloc_unlock>
 8001466:	f026 0607 	bic.w	r6, r6, #7
 800146a:	1d23      	adds	r3, r4, #4
 800146c:	1af2      	subs	r2, r6, r3
 800146e:	d0ae      	beq.n	80013ce <_malloc_r+0x22>
 8001470:	1b9b      	subs	r3, r3, r6
 8001472:	50a3      	str	r3, [r4, r2]
 8001474:	e7ab      	b.n	80013ce <_malloc_r+0x22>
 8001476:	42a3      	cmp	r3, r4
 8001478:	6862      	ldr	r2, [r4, #4]
 800147a:	d1dd      	bne.n	8001438 <_malloc_r+0x8c>
 800147c:	f8c8 2000 	str.w	r2, [r8]
 8001480:	e7ec      	b.n	800145c <_malloc_r+0xb0>
 8001482:	4623      	mov	r3, r4
 8001484:	6864      	ldr	r4, [r4, #4]
 8001486:	e7ac      	b.n	80013e2 <_malloc_r+0x36>
 8001488:	4634      	mov	r4, r6
 800148a:	6876      	ldr	r6, [r6, #4]
 800148c:	e7b4      	b.n	80013f8 <_malloc_r+0x4c>
 800148e:	4613      	mov	r3, r2
 8001490:	e7cc      	b.n	800142c <_malloc_r+0x80>
 8001492:	230c      	movs	r3, #12
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	4638      	mov	r0, r7
 8001498:	f000 f80e 	bl	80014b8 <__malloc_unlock>
 800149c:	e797      	b.n	80013ce <_malloc_r+0x22>
 800149e:	6025      	str	r5, [r4, #0]
 80014a0:	e7dc      	b.n	800145c <_malloc_r+0xb0>
 80014a2:	605b      	str	r3, [r3, #4]
 80014a4:	deff      	udf	#255	; 0xff
 80014a6:	bf00      	nop
 80014a8:	20007e0c 	.word	0x20007e0c

080014ac <__malloc_lock>:
 80014ac:	4801      	ldr	r0, [pc, #4]	; (80014b4 <__malloc_lock+0x8>)
 80014ae:	f7ff bf0f 	b.w	80012d0 <__retarget_lock_acquire_recursive>
 80014b2:	bf00      	nop
 80014b4:	20007e08 	.word	0x20007e08

080014b8 <__malloc_unlock>:
 80014b8:	4801      	ldr	r0, [pc, #4]	; (80014c0 <__malloc_unlock+0x8>)
 80014ba:	f7ff bf0a 	b.w	80012d2 <__retarget_lock_release_recursive>
 80014be:	bf00      	nop
 80014c0:	20007e08 	.word	0x20007e08

080014c4 <__ssputs_r>:
 80014c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014c8:	688e      	ldr	r6, [r1, #8]
 80014ca:	461f      	mov	r7, r3
 80014cc:	42be      	cmp	r6, r7
 80014ce:	680b      	ldr	r3, [r1, #0]
 80014d0:	4682      	mov	sl, r0
 80014d2:	460c      	mov	r4, r1
 80014d4:	4690      	mov	r8, r2
 80014d6:	d82c      	bhi.n	8001532 <__ssputs_r+0x6e>
 80014d8:	898a      	ldrh	r2, [r1, #12]
 80014da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80014de:	d026      	beq.n	800152e <__ssputs_r+0x6a>
 80014e0:	6965      	ldr	r5, [r4, #20]
 80014e2:	6909      	ldr	r1, [r1, #16]
 80014e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80014e8:	eba3 0901 	sub.w	r9, r3, r1
 80014ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80014f0:	1c7b      	adds	r3, r7, #1
 80014f2:	444b      	add	r3, r9
 80014f4:	106d      	asrs	r5, r5, #1
 80014f6:	429d      	cmp	r5, r3
 80014f8:	bf38      	it	cc
 80014fa:	461d      	movcc	r5, r3
 80014fc:	0553      	lsls	r3, r2, #21
 80014fe:	d527      	bpl.n	8001550 <__ssputs_r+0x8c>
 8001500:	4629      	mov	r1, r5
 8001502:	f7ff ff53 	bl	80013ac <_malloc_r>
 8001506:	4606      	mov	r6, r0
 8001508:	b360      	cbz	r0, 8001564 <__ssputs_r+0xa0>
 800150a:	6921      	ldr	r1, [r4, #16]
 800150c:	464a      	mov	r2, r9
 800150e:	f000 faeb 	bl	8001ae8 <memcpy>
 8001512:	89a3      	ldrh	r3, [r4, #12]
 8001514:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800151c:	81a3      	strh	r3, [r4, #12]
 800151e:	6126      	str	r6, [r4, #16]
 8001520:	6165      	str	r5, [r4, #20]
 8001522:	444e      	add	r6, r9
 8001524:	eba5 0509 	sub.w	r5, r5, r9
 8001528:	6026      	str	r6, [r4, #0]
 800152a:	60a5      	str	r5, [r4, #8]
 800152c:	463e      	mov	r6, r7
 800152e:	42be      	cmp	r6, r7
 8001530:	d900      	bls.n	8001534 <__ssputs_r+0x70>
 8001532:	463e      	mov	r6, r7
 8001534:	6820      	ldr	r0, [r4, #0]
 8001536:	4632      	mov	r2, r6
 8001538:	4641      	mov	r1, r8
 800153a:	f000 faab 	bl	8001a94 <memmove>
 800153e:	68a3      	ldr	r3, [r4, #8]
 8001540:	1b9b      	subs	r3, r3, r6
 8001542:	60a3      	str	r3, [r4, #8]
 8001544:	6823      	ldr	r3, [r4, #0]
 8001546:	4433      	add	r3, r6
 8001548:	6023      	str	r3, [r4, #0]
 800154a:	2000      	movs	r0, #0
 800154c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001550:	462a      	mov	r2, r5
 8001552:	f000 fad7 	bl	8001b04 <_realloc_r>
 8001556:	4606      	mov	r6, r0
 8001558:	2800      	cmp	r0, #0
 800155a:	d1e0      	bne.n	800151e <__ssputs_r+0x5a>
 800155c:	6921      	ldr	r1, [r4, #16]
 800155e:	4650      	mov	r0, sl
 8001560:	f7ff feb8 	bl	80012d4 <_free_r>
 8001564:	230c      	movs	r3, #12
 8001566:	f8ca 3000 	str.w	r3, [sl]
 800156a:	89a3      	ldrh	r3, [r4, #12]
 800156c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001570:	81a3      	strh	r3, [r4, #12]
 8001572:	f04f 30ff 	mov.w	r0, #4294967295
 8001576:	e7e9      	b.n	800154c <__ssputs_r+0x88>

08001578 <_svfiprintf_r>:
 8001578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800157c:	4698      	mov	r8, r3
 800157e:	898b      	ldrh	r3, [r1, #12]
 8001580:	061b      	lsls	r3, r3, #24
 8001582:	b09d      	sub	sp, #116	; 0x74
 8001584:	4607      	mov	r7, r0
 8001586:	460d      	mov	r5, r1
 8001588:	4614      	mov	r4, r2
 800158a:	d50e      	bpl.n	80015aa <_svfiprintf_r+0x32>
 800158c:	690b      	ldr	r3, [r1, #16]
 800158e:	b963      	cbnz	r3, 80015aa <_svfiprintf_r+0x32>
 8001590:	2140      	movs	r1, #64	; 0x40
 8001592:	f7ff ff0b 	bl	80013ac <_malloc_r>
 8001596:	6028      	str	r0, [r5, #0]
 8001598:	6128      	str	r0, [r5, #16]
 800159a:	b920      	cbnz	r0, 80015a6 <_svfiprintf_r+0x2e>
 800159c:	230c      	movs	r3, #12
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	e0d0      	b.n	8001748 <_svfiprintf_r+0x1d0>
 80015a6:	2340      	movs	r3, #64	; 0x40
 80015a8:	616b      	str	r3, [r5, #20]
 80015aa:	2300      	movs	r3, #0
 80015ac:	9309      	str	r3, [sp, #36]	; 0x24
 80015ae:	2320      	movs	r3, #32
 80015b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80015b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80015b8:	2330      	movs	r3, #48	; 0x30
 80015ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001760 <_svfiprintf_r+0x1e8>
 80015be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80015c2:	f04f 0901 	mov.w	r9, #1
 80015c6:	4623      	mov	r3, r4
 80015c8:	469a      	mov	sl, r3
 80015ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80015ce:	b10a      	cbz	r2, 80015d4 <_svfiprintf_r+0x5c>
 80015d0:	2a25      	cmp	r2, #37	; 0x25
 80015d2:	d1f9      	bne.n	80015c8 <_svfiprintf_r+0x50>
 80015d4:	ebba 0b04 	subs.w	fp, sl, r4
 80015d8:	d00b      	beq.n	80015f2 <_svfiprintf_r+0x7a>
 80015da:	465b      	mov	r3, fp
 80015dc:	4622      	mov	r2, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	4638      	mov	r0, r7
 80015e2:	f7ff ff6f 	bl	80014c4 <__ssputs_r>
 80015e6:	3001      	adds	r0, #1
 80015e8:	f000 80a9 	beq.w	800173e <_svfiprintf_r+0x1c6>
 80015ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80015ee:	445a      	add	r2, fp
 80015f0:	9209      	str	r2, [sp, #36]	; 0x24
 80015f2:	f89a 3000 	ldrb.w	r3, [sl]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80a1 	beq.w	800173e <_svfiprintf_r+0x1c6>
 80015fc:	2300      	movs	r3, #0
 80015fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001606:	f10a 0a01 	add.w	sl, sl, #1
 800160a:	9304      	str	r3, [sp, #16]
 800160c:	9307      	str	r3, [sp, #28]
 800160e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001612:	931a      	str	r3, [sp, #104]	; 0x68
 8001614:	4654      	mov	r4, sl
 8001616:	2205      	movs	r2, #5
 8001618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800161c:	4850      	ldr	r0, [pc, #320]	; (8001760 <_svfiprintf_r+0x1e8>)
 800161e:	f7fe fdef 	bl	8000200 <memchr>
 8001622:	9a04      	ldr	r2, [sp, #16]
 8001624:	b9d8      	cbnz	r0, 800165e <_svfiprintf_r+0xe6>
 8001626:	06d0      	lsls	r0, r2, #27
 8001628:	bf44      	itt	mi
 800162a:	2320      	movmi	r3, #32
 800162c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001630:	0711      	lsls	r1, r2, #28
 8001632:	bf44      	itt	mi
 8001634:	232b      	movmi	r3, #43	; 0x2b
 8001636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800163a:	f89a 3000 	ldrb.w	r3, [sl]
 800163e:	2b2a      	cmp	r3, #42	; 0x2a
 8001640:	d015      	beq.n	800166e <_svfiprintf_r+0xf6>
 8001642:	9a07      	ldr	r2, [sp, #28]
 8001644:	4654      	mov	r4, sl
 8001646:	2000      	movs	r0, #0
 8001648:	f04f 0c0a 	mov.w	ip, #10
 800164c:	4621      	mov	r1, r4
 800164e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001652:	3b30      	subs	r3, #48	; 0x30
 8001654:	2b09      	cmp	r3, #9
 8001656:	d94d      	bls.n	80016f4 <_svfiprintf_r+0x17c>
 8001658:	b1b0      	cbz	r0, 8001688 <_svfiprintf_r+0x110>
 800165a:	9207      	str	r2, [sp, #28]
 800165c:	e014      	b.n	8001688 <_svfiprintf_r+0x110>
 800165e:	eba0 0308 	sub.w	r3, r0, r8
 8001662:	fa09 f303 	lsl.w	r3, r9, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	9304      	str	r3, [sp, #16]
 800166a:	46a2      	mov	sl, r4
 800166c:	e7d2      	b.n	8001614 <_svfiprintf_r+0x9c>
 800166e:	9b03      	ldr	r3, [sp, #12]
 8001670:	1d19      	adds	r1, r3, #4
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	9103      	str	r1, [sp, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	bfbb      	ittet	lt
 800167a:	425b      	neglt	r3, r3
 800167c:	f042 0202 	orrlt.w	r2, r2, #2
 8001680:	9307      	strge	r3, [sp, #28]
 8001682:	9307      	strlt	r3, [sp, #28]
 8001684:	bfb8      	it	lt
 8001686:	9204      	strlt	r2, [sp, #16]
 8001688:	7823      	ldrb	r3, [r4, #0]
 800168a:	2b2e      	cmp	r3, #46	; 0x2e
 800168c:	d10c      	bne.n	80016a8 <_svfiprintf_r+0x130>
 800168e:	7863      	ldrb	r3, [r4, #1]
 8001690:	2b2a      	cmp	r3, #42	; 0x2a
 8001692:	d134      	bne.n	80016fe <_svfiprintf_r+0x186>
 8001694:	9b03      	ldr	r3, [sp, #12]
 8001696:	1d1a      	adds	r2, r3, #4
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	9203      	str	r2, [sp, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	bfb8      	it	lt
 80016a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80016a4:	3402      	adds	r4, #2
 80016a6:	9305      	str	r3, [sp, #20]
 80016a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001770 <_svfiprintf_r+0x1f8>
 80016ac:	7821      	ldrb	r1, [r4, #0]
 80016ae:	2203      	movs	r2, #3
 80016b0:	4650      	mov	r0, sl
 80016b2:	f7fe fda5 	bl	8000200 <memchr>
 80016b6:	b138      	cbz	r0, 80016c8 <_svfiprintf_r+0x150>
 80016b8:	9b04      	ldr	r3, [sp, #16]
 80016ba:	eba0 000a 	sub.w	r0, r0, sl
 80016be:	2240      	movs	r2, #64	; 0x40
 80016c0:	4082      	lsls	r2, r0
 80016c2:	4313      	orrs	r3, r2
 80016c4:	3401      	adds	r4, #1
 80016c6:	9304      	str	r3, [sp, #16]
 80016c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016cc:	4825      	ldr	r0, [pc, #148]	; (8001764 <_svfiprintf_r+0x1ec>)
 80016ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80016d2:	2206      	movs	r2, #6
 80016d4:	f7fe fd94 	bl	8000200 <memchr>
 80016d8:	2800      	cmp	r0, #0
 80016da:	d038      	beq.n	800174e <_svfiprintf_r+0x1d6>
 80016dc:	4b22      	ldr	r3, [pc, #136]	; (8001768 <_svfiprintf_r+0x1f0>)
 80016de:	bb1b      	cbnz	r3, 8001728 <_svfiprintf_r+0x1b0>
 80016e0:	9b03      	ldr	r3, [sp, #12]
 80016e2:	3307      	adds	r3, #7
 80016e4:	f023 0307 	bic.w	r3, r3, #7
 80016e8:	3308      	adds	r3, #8
 80016ea:	9303      	str	r3, [sp, #12]
 80016ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016ee:	4433      	add	r3, r6
 80016f0:	9309      	str	r3, [sp, #36]	; 0x24
 80016f2:	e768      	b.n	80015c6 <_svfiprintf_r+0x4e>
 80016f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80016f8:	460c      	mov	r4, r1
 80016fa:	2001      	movs	r0, #1
 80016fc:	e7a6      	b.n	800164c <_svfiprintf_r+0xd4>
 80016fe:	2300      	movs	r3, #0
 8001700:	3401      	adds	r4, #1
 8001702:	9305      	str	r3, [sp, #20]
 8001704:	4619      	mov	r1, r3
 8001706:	f04f 0c0a 	mov.w	ip, #10
 800170a:	4620      	mov	r0, r4
 800170c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001710:	3a30      	subs	r2, #48	; 0x30
 8001712:	2a09      	cmp	r2, #9
 8001714:	d903      	bls.n	800171e <_svfiprintf_r+0x1a6>
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0c6      	beq.n	80016a8 <_svfiprintf_r+0x130>
 800171a:	9105      	str	r1, [sp, #20]
 800171c:	e7c4      	b.n	80016a8 <_svfiprintf_r+0x130>
 800171e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001722:	4604      	mov	r4, r0
 8001724:	2301      	movs	r3, #1
 8001726:	e7f0      	b.n	800170a <_svfiprintf_r+0x192>
 8001728:	ab03      	add	r3, sp, #12
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	462a      	mov	r2, r5
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <_svfiprintf_r+0x1f4>)
 8001730:	a904      	add	r1, sp, #16
 8001732:	4638      	mov	r0, r7
 8001734:	f3af 8000 	nop.w
 8001738:	1c42      	adds	r2, r0, #1
 800173a:	4606      	mov	r6, r0
 800173c:	d1d6      	bne.n	80016ec <_svfiprintf_r+0x174>
 800173e:	89ab      	ldrh	r3, [r5, #12]
 8001740:	065b      	lsls	r3, r3, #25
 8001742:	f53f af2d 	bmi.w	80015a0 <_svfiprintf_r+0x28>
 8001746:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001748:	b01d      	add	sp, #116	; 0x74
 800174a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800174e:	ab03      	add	r3, sp, #12
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	462a      	mov	r2, r5
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <_svfiprintf_r+0x1f4>)
 8001756:	a904      	add	r1, sp, #16
 8001758:	4638      	mov	r0, r7
 800175a:	f000 f879 	bl	8001850 <_printf_i>
 800175e:	e7eb      	b.n	8001738 <_svfiprintf_r+0x1c0>
 8001760:	08001e47 	.word	0x08001e47
 8001764:	08001e51 	.word	0x08001e51
 8001768:	00000000 	.word	0x00000000
 800176c:	080014c5 	.word	0x080014c5
 8001770:	08001e4d 	.word	0x08001e4d

08001774 <_printf_common>:
 8001774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001778:	4616      	mov	r6, r2
 800177a:	4699      	mov	r9, r3
 800177c:	688a      	ldr	r2, [r1, #8]
 800177e:	690b      	ldr	r3, [r1, #16]
 8001780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001784:	4293      	cmp	r3, r2
 8001786:	bfb8      	it	lt
 8001788:	4613      	movlt	r3, r2
 800178a:	6033      	str	r3, [r6, #0]
 800178c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001790:	4607      	mov	r7, r0
 8001792:	460c      	mov	r4, r1
 8001794:	b10a      	cbz	r2, 800179a <_printf_common+0x26>
 8001796:	3301      	adds	r3, #1
 8001798:	6033      	str	r3, [r6, #0]
 800179a:	6823      	ldr	r3, [r4, #0]
 800179c:	0699      	lsls	r1, r3, #26
 800179e:	bf42      	ittt	mi
 80017a0:	6833      	ldrmi	r3, [r6, #0]
 80017a2:	3302      	addmi	r3, #2
 80017a4:	6033      	strmi	r3, [r6, #0]
 80017a6:	6825      	ldr	r5, [r4, #0]
 80017a8:	f015 0506 	ands.w	r5, r5, #6
 80017ac:	d106      	bne.n	80017bc <_printf_common+0x48>
 80017ae:	f104 0a19 	add.w	sl, r4, #25
 80017b2:	68e3      	ldr	r3, [r4, #12]
 80017b4:	6832      	ldr	r2, [r6, #0]
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	42ab      	cmp	r3, r5
 80017ba:	dc26      	bgt.n	800180a <_printf_common+0x96>
 80017bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80017c0:	1e13      	subs	r3, r2, #0
 80017c2:	6822      	ldr	r2, [r4, #0]
 80017c4:	bf18      	it	ne
 80017c6:	2301      	movne	r3, #1
 80017c8:	0692      	lsls	r2, r2, #26
 80017ca:	d42b      	bmi.n	8001824 <_printf_common+0xb0>
 80017cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80017d0:	4649      	mov	r1, r9
 80017d2:	4638      	mov	r0, r7
 80017d4:	47c0      	blx	r8
 80017d6:	3001      	adds	r0, #1
 80017d8:	d01e      	beq.n	8001818 <_printf_common+0xa4>
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	6922      	ldr	r2, [r4, #16]
 80017de:	f003 0306 	and.w	r3, r3, #6
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	bf02      	ittt	eq
 80017e6:	68e5      	ldreq	r5, [r4, #12]
 80017e8:	6833      	ldreq	r3, [r6, #0]
 80017ea:	1aed      	subeq	r5, r5, r3
 80017ec:	68a3      	ldr	r3, [r4, #8]
 80017ee:	bf0c      	ite	eq
 80017f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017f4:	2500      	movne	r5, #0
 80017f6:	4293      	cmp	r3, r2
 80017f8:	bfc4      	itt	gt
 80017fa:	1a9b      	subgt	r3, r3, r2
 80017fc:	18ed      	addgt	r5, r5, r3
 80017fe:	2600      	movs	r6, #0
 8001800:	341a      	adds	r4, #26
 8001802:	42b5      	cmp	r5, r6
 8001804:	d11a      	bne.n	800183c <_printf_common+0xc8>
 8001806:	2000      	movs	r0, #0
 8001808:	e008      	b.n	800181c <_printf_common+0xa8>
 800180a:	2301      	movs	r3, #1
 800180c:	4652      	mov	r2, sl
 800180e:	4649      	mov	r1, r9
 8001810:	4638      	mov	r0, r7
 8001812:	47c0      	blx	r8
 8001814:	3001      	adds	r0, #1
 8001816:	d103      	bne.n	8001820 <_printf_common+0xac>
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001820:	3501      	adds	r5, #1
 8001822:	e7c6      	b.n	80017b2 <_printf_common+0x3e>
 8001824:	18e1      	adds	r1, r4, r3
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	2030      	movs	r0, #48	; 0x30
 800182a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800182e:	4422      	add	r2, r4
 8001830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001838:	3302      	adds	r3, #2
 800183a:	e7c7      	b.n	80017cc <_printf_common+0x58>
 800183c:	2301      	movs	r3, #1
 800183e:	4622      	mov	r2, r4
 8001840:	4649      	mov	r1, r9
 8001842:	4638      	mov	r0, r7
 8001844:	47c0      	blx	r8
 8001846:	3001      	adds	r0, #1
 8001848:	d0e6      	beq.n	8001818 <_printf_common+0xa4>
 800184a:	3601      	adds	r6, #1
 800184c:	e7d9      	b.n	8001802 <_printf_common+0x8e>
	...

08001850 <_printf_i>:
 8001850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001854:	7e0f      	ldrb	r7, [r1, #24]
 8001856:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001858:	2f78      	cmp	r7, #120	; 0x78
 800185a:	4691      	mov	r9, r2
 800185c:	4680      	mov	r8, r0
 800185e:	460c      	mov	r4, r1
 8001860:	469a      	mov	sl, r3
 8001862:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001866:	d807      	bhi.n	8001878 <_printf_i+0x28>
 8001868:	2f62      	cmp	r7, #98	; 0x62
 800186a:	d80a      	bhi.n	8001882 <_printf_i+0x32>
 800186c:	2f00      	cmp	r7, #0
 800186e:	f000 80d4 	beq.w	8001a1a <_printf_i+0x1ca>
 8001872:	2f58      	cmp	r7, #88	; 0x58
 8001874:	f000 80c0 	beq.w	80019f8 <_printf_i+0x1a8>
 8001878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800187c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001880:	e03a      	b.n	80018f8 <_printf_i+0xa8>
 8001882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001886:	2b15      	cmp	r3, #21
 8001888:	d8f6      	bhi.n	8001878 <_printf_i+0x28>
 800188a:	a101      	add	r1, pc, #4	; (adr r1, 8001890 <_printf_i+0x40>)
 800188c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001890:	080018e9 	.word	0x080018e9
 8001894:	080018fd 	.word	0x080018fd
 8001898:	08001879 	.word	0x08001879
 800189c:	08001879 	.word	0x08001879
 80018a0:	08001879 	.word	0x08001879
 80018a4:	08001879 	.word	0x08001879
 80018a8:	080018fd 	.word	0x080018fd
 80018ac:	08001879 	.word	0x08001879
 80018b0:	08001879 	.word	0x08001879
 80018b4:	08001879 	.word	0x08001879
 80018b8:	08001879 	.word	0x08001879
 80018bc:	08001a01 	.word	0x08001a01
 80018c0:	08001929 	.word	0x08001929
 80018c4:	080019bb 	.word	0x080019bb
 80018c8:	08001879 	.word	0x08001879
 80018cc:	08001879 	.word	0x08001879
 80018d0:	08001a23 	.word	0x08001a23
 80018d4:	08001879 	.word	0x08001879
 80018d8:	08001929 	.word	0x08001929
 80018dc:	08001879 	.word	0x08001879
 80018e0:	08001879 	.word	0x08001879
 80018e4:	080019c3 	.word	0x080019c3
 80018e8:	682b      	ldr	r3, [r5, #0]
 80018ea:	1d1a      	adds	r2, r3, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	602a      	str	r2, [r5, #0]
 80018f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018f8:	2301      	movs	r3, #1
 80018fa:	e09f      	b.n	8001a3c <_printf_i+0x1ec>
 80018fc:	6820      	ldr	r0, [r4, #0]
 80018fe:	682b      	ldr	r3, [r5, #0]
 8001900:	0607      	lsls	r7, r0, #24
 8001902:	f103 0104 	add.w	r1, r3, #4
 8001906:	6029      	str	r1, [r5, #0]
 8001908:	d501      	bpl.n	800190e <_printf_i+0xbe>
 800190a:	681e      	ldr	r6, [r3, #0]
 800190c:	e003      	b.n	8001916 <_printf_i+0xc6>
 800190e:	0646      	lsls	r6, r0, #25
 8001910:	d5fb      	bpl.n	800190a <_printf_i+0xba>
 8001912:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001916:	2e00      	cmp	r6, #0
 8001918:	da03      	bge.n	8001922 <_printf_i+0xd2>
 800191a:	232d      	movs	r3, #45	; 0x2d
 800191c:	4276      	negs	r6, r6
 800191e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001922:	485a      	ldr	r0, [pc, #360]	; (8001a8c <_printf_i+0x23c>)
 8001924:	230a      	movs	r3, #10
 8001926:	e012      	b.n	800194e <_printf_i+0xfe>
 8001928:	682b      	ldr	r3, [r5, #0]
 800192a:	6820      	ldr	r0, [r4, #0]
 800192c:	1d19      	adds	r1, r3, #4
 800192e:	6029      	str	r1, [r5, #0]
 8001930:	0605      	lsls	r5, r0, #24
 8001932:	d501      	bpl.n	8001938 <_printf_i+0xe8>
 8001934:	681e      	ldr	r6, [r3, #0]
 8001936:	e002      	b.n	800193e <_printf_i+0xee>
 8001938:	0641      	lsls	r1, r0, #25
 800193a:	d5fb      	bpl.n	8001934 <_printf_i+0xe4>
 800193c:	881e      	ldrh	r6, [r3, #0]
 800193e:	4853      	ldr	r0, [pc, #332]	; (8001a8c <_printf_i+0x23c>)
 8001940:	2f6f      	cmp	r7, #111	; 0x6f
 8001942:	bf0c      	ite	eq
 8001944:	2308      	moveq	r3, #8
 8001946:	230a      	movne	r3, #10
 8001948:	2100      	movs	r1, #0
 800194a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800194e:	6865      	ldr	r5, [r4, #4]
 8001950:	60a5      	str	r5, [r4, #8]
 8001952:	2d00      	cmp	r5, #0
 8001954:	bfa2      	ittt	ge
 8001956:	6821      	ldrge	r1, [r4, #0]
 8001958:	f021 0104 	bicge.w	r1, r1, #4
 800195c:	6021      	strge	r1, [r4, #0]
 800195e:	b90e      	cbnz	r6, 8001964 <_printf_i+0x114>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d04b      	beq.n	80019fc <_printf_i+0x1ac>
 8001964:	4615      	mov	r5, r2
 8001966:	fbb6 f1f3 	udiv	r1, r6, r3
 800196a:	fb03 6711 	mls	r7, r3, r1, r6
 800196e:	5dc7      	ldrb	r7, [r0, r7]
 8001970:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001974:	4637      	mov	r7, r6
 8001976:	42bb      	cmp	r3, r7
 8001978:	460e      	mov	r6, r1
 800197a:	d9f4      	bls.n	8001966 <_printf_i+0x116>
 800197c:	2b08      	cmp	r3, #8
 800197e:	d10b      	bne.n	8001998 <_printf_i+0x148>
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	07de      	lsls	r6, r3, #31
 8001984:	d508      	bpl.n	8001998 <_printf_i+0x148>
 8001986:	6923      	ldr	r3, [r4, #16]
 8001988:	6861      	ldr	r1, [r4, #4]
 800198a:	4299      	cmp	r1, r3
 800198c:	bfde      	ittt	le
 800198e:	2330      	movle	r3, #48	; 0x30
 8001990:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001994:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001998:	1b52      	subs	r2, r2, r5
 800199a:	6122      	str	r2, [r4, #16]
 800199c:	f8cd a000 	str.w	sl, [sp]
 80019a0:	464b      	mov	r3, r9
 80019a2:	aa03      	add	r2, sp, #12
 80019a4:	4621      	mov	r1, r4
 80019a6:	4640      	mov	r0, r8
 80019a8:	f7ff fee4 	bl	8001774 <_printf_common>
 80019ac:	3001      	adds	r0, #1
 80019ae:	d14a      	bne.n	8001a46 <_printf_i+0x1f6>
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	b004      	add	sp, #16
 80019b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	f043 0320 	orr.w	r3, r3, #32
 80019c0:	6023      	str	r3, [r4, #0]
 80019c2:	4833      	ldr	r0, [pc, #204]	; (8001a90 <_printf_i+0x240>)
 80019c4:	2778      	movs	r7, #120	; 0x78
 80019c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	6829      	ldr	r1, [r5, #0]
 80019ce:	061f      	lsls	r7, r3, #24
 80019d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80019d4:	d402      	bmi.n	80019dc <_printf_i+0x18c>
 80019d6:	065f      	lsls	r7, r3, #25
 80019d8:	bf48      	it	mi
 80019da:	b2b6      	uxthmi	r6, r6
 80019dc:	07df      	lsls	r7, r3, #31
 80019de:	bf48      	it	mi
 80019e0:	f043 0320 	orrmi.w	r3, r3, #32
 80019e4:	6029      	str	r1, [r5, #0]
 80019e6:	bf48      	it	mi
 80019e8:	6023      	strmi	r3, [r4, #0]
 80019ea:	b91e      	cbnz	r6, 80019f4 <_printf_i+0x1a4>
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	f023 0320 	bic.w	r3, r3, #32
 80019f2:	6023      	str	r3, [r4, #0]
 80019f4:	2310      	movs	r3, #16
 80019f6:	e7a7      	b.n	8001948 <_printf_i+0xf8>
 80019f8:	4824      	ldr	r0, [pc, #144]	; (8001a8c <_printf_i+0x23c>)
 80019fa:	e7e4      	b.n	80019c6 <_printf_i+0x176>
 80019fc:	4615      	mov	r5, r2
 80019fe:	e7bd      	b.n	800197c <_printf_i+0x12c>
 8001a00:	682b      	ldr	r3, [r5, #0]
 8001a02:	6826      	ldr	r6, [r4, #0]
 8001a04:	6961      	ldr	r1, [r4, #20]
 8001a06:	1d18      	adds	r0, r3, #4
 8001a08:	6028      	str	r0, [r5, #0]
 8001a0a:	0635      	lsls	r5, r6, #24
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	d501      	bpl.n	8001a14 <_printf_i+0x1c4>
 8001a10:	6019      	str	r1, [r3, #0]
 8001a12:	e002      	b.n	8001a1a <_printf_i+0x1ca>
 8001a14:	0670      	lsls	r0, r6, #25
 8001a16:	d5fb      	bpl.n	8001a10 <_printf_i+0x1c0>
 8001a18:	8019      	strh	r1, [r3, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	6123      	str	r3, [r4, #16]
 8001a1e:	4615      	mov	r5, r2
 8001a20:	e7bc      	b.n	800199c <_printf_i+0x14c>
 8001a22:	682b      	ldr	r3, [r5, #0]
 8001a24:	1d1a      	adds	r2, r3, #4
 8001a26:	602a      	str	r2, [r5, #0]
 8001a28:	681d      	ldr	r5, [r3, #0]
 8001a2a:	6862      	ldr	r2, [r4, #4]
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4628      	mov	r0, r5
 8001a30:	f7fe fbe6 	bl	8000200 <memchr>
 8001a34:	b108      	cbz	r0, 8001a3a <_printf_i+0x1ea>
 8001a36:	1b40      	subs	r0, r0, r5
 8001a38:	6060      	str	r0, [r4, #4]
 8001a3a:	6863      	ldr	r3, [r4, #4]
 8001a3c:	6123      	str	r3, [r4, #16]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a44:	e7aa      	b.n	800199c <_printf_i+0x14c>
 8001a46:	6923      	ldr	r3, [r4, #16]
 8001a48:	462a      	mov	r2, r5
 8001a4a:	4649      	mov	r1, r9
 8001a4c:	4640      	mov	r0, r8
 8001a4e:	47d0      	blx	sl
 8001a50:	3001      	adds	r0, #1
 8001a52:	d0ad      	beq.n	80019b0 <_printf_i+0x160>
 8001a54:	6823      	ldr	r3, [r4, #0]
 8001a56:	079b      	lsls	r3, r3, #30
 8001a58:	d413      	bmi.n	8001a82 <_printf_i+0x232>
 8001a5a:	68e0      	ldr	r0, [r4, #12]
 8001a5c:	9b03      	ldr	r3, [sp, #12]
 8001a5e:	4298      	cmp	r0, r3
 8001a60:	bfb8      	it	lt
 8001a62:	4618      	movlt	r0, r3
 8001a64:	e7a6      	b.n	80019b4 <_printf_i+0x164>
 8001a66:	2301      	movs	r3, #1
 8001a68:	4632      	mov	r2, r6
 8001a6a:	4649      	mov	r1, r9
 8001a6c:	4640      	mov	r0, r8
 8001a6e:	47d0      	blx	sl
 8001a70:	3001      	adds	r0, #1
 8001a72:	d09d      	beq.n	80019b0 <_printf_i+0x160>
 8001a74:	3501      	adds	r5, #1
 8001a76:	68e3      	ldr	r3, [r4, #12]
 8001a78:	9903      	ldr	r1, [sp, #12]
 8001a7a:	1a5b      	subs	r3, r3, r1
 8001a7c:	42ab      	cmp	r3, r5
 8001a7e:	dcf2      	bgt.n	8001a66 <_printf_i+0x216>
 8001a80:	e7eb      	b.n	8001a5a <_printf_i+0x20a>
 8001a82:	2500      	movs	r5, #0
 8001a84:	f104 0619 	add.w	r6, r4, #25
 8001a88:	e7f5      	b.n	8001a76 <_printf_i+0x226>
 8001a8a:	bf00      	nop
 8001a8c:	08001e58 	.word	0x08001e58
 8001a90:	08001e69 	.word	0x08001e69

08001a94 <memmove>:
 8001a94:	4288      	cmp	r0, r1
 8001a96:	b510      	push	{r4, lr}
 8001a98:	eb01 0402 	add.w	r4, r1, r2
 8001a9c:	d902      	bls.n	8001aa4 <memmove+0x10>
 8001a9e:	4284      	cmp	r4, r0
 8001aa0:	4623      	mov	r3, r4
 8001aa2:	d807      	bhi.n	8001ab4 <memmove+0x20>
 8001aa4:	1e43      	subs	r3, r0, #1
 8001aa6:	42a1      	cmp	r1, r4
 8001aa8:	d008      	beq.n	8001abc <memmove+0x28>
 8001aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001aae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001ab2:	e7f8      	b.n	8001aa6 <memmove+0x12>
 8001ab4:	4402      	add	r2, r0
 8001ab6:	4601      	mov	r1, r0
 8001ab8:	428a      	cmp	r2, r1
 8001aba:	d100      	bne.n	8001abe <memmove+0x2a>
 8001abc:	bd10      	pop	{r4, pc}
 8001abe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001ac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001ac6:	e7f7      	b.n	8001ab8 <memmove+0x24>

08001ac8 <_sbrk_r>:
 8001ac8:	b538      	push	{r3, r4, r5, lr}
 8001aca:	4d06      	ldr	r5, [pc, #24]	; (8001ae4 <_sbrk_r+0x1c>)
 8001acc:	2300      	movs	r3, #0
 8001ace:	4604      	mov	r4, r0
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	602b      	str	r3, [r5, #0]
 8001ad4:	f7ff f9fe 	bl	8000ed4 <_sbrk>
 8001ad8:	1c43      	adds	r3, r0, #1
 8001ada:	d102      	bne.n	8001ae2 <_sbrk_r+0x1a>
 8001adc:	682b      	ldr	r3, [r5, #0]
 8001ade:	b103      	cbz	r3, 8001ae2 <_sbrk_r+0x1a>
 8001ae0:	6023      	str	r3, [r4, #0]
 8001ae2:	bd38      	pop	{r3, r4, r5, pc}
 8001ae4:	20007e04 	.word	0x20007e04

08001ae8 <memcpy>:
 8001ae8:	440a      	add	r2, r1
 8001aea:	4291      	cmp	r1, r2
 8001aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8001af0:	d100      	bne.n	8001af4 <memcpy+0xc>
 8001af2:	4770      	bx	lr
 8001af4:	b510      	push	{r4, lr}
 8001af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001afe:	4291      	cmp	r1, r2
 8001b00:	d1f9      	bne.n	8001af6 <memcpy+0xe>
 8001b02:	bd10      	pop	{r4, pc}

08001b04 <_realloc_r>:
 8001b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b08:	4680      	mov	r8, r0
 8001b0a:	4614      	mov	r4, r2
 8001b0c:	460e      	mov	r6, r1
 8001b0e:	b921      	cbnz	r1, 8001b1a <_realloc_r+0x16>
 8001b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b14:	4611      	mov	r1, r2
 8001b16:	f7ff bc49 	b.w	80013ac <_malloc_r>
 8001b1a:	b92a      	cbnz	r2, 8001b28 <_realloc_r+0x24>
 8001b1c:	f7ff fbda 	bl	80012d4 <_free_r>
 8001b20:	4625      	mov	r5, r4
 8001b22:	4628      	mov	r0, r5
 8001b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b28:	f000 f81b 	bl	8001b62 <_malloc_usable_size_r>
 8001b2c:	4284      	cmp	r4, r0
 8001b2e:	4607      	mov	r7, r0
 8001b30:	d802      	bhi.n	8001b38 <_realloc_r+0x34>
 8001b32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001b36:	d812      	bhi.n	8001b5e <_realloc_r+0x5a>
 8001b38:	4621      	mov	r1, r4
 8001b3a:	4640      	mov	r0, r8
 8001b3c:	f7ff fc36 	bl	80013ac <_malloc_r>
 8001b40:	4605      	mov	r5, r0
 8001b42:	2800      	cmp	r0, #0
 8001b44:	d0ed      	beq.n	8001b22 <_realloc_r+0x1e>
 8001b46:	42bc      	cmp	r4, r7
 8001b48:	4622      	mov	r2, r4
 8001b4a:	4631      	mov	r1, r6
 8001b4c:	bf28      	it	cs
 8001b4e:	463a      	movcs	r2, r7
 8001b50:	f7ff ffca 	bl	8001ae8 <memcpy>
 8001b54:	4631      	mov	r1, r6
 8001b56:	4640      	mov	r0, r8
 8001b58:	f7ff fbbc 	bl	80012d4 <_free_r>
 8001b5c:	e7e1      	b.n	8001b22 <_realloc_r+0x1e>
 8001b5e:	4635      	mov	r5, r6
 8001b60:	e7df      	b.n	8001b22 <_realloc_r+0x1e>

08001b62 <_malloc_usable_size_r>:
 8001b62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b66:	1f18      	subs	r0, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bfbc      	itt	lt
 8001b6c:	580b      	ldrlt	r3, [r1, r0]
 8001b6e:	18c0      	addlt	r0, r0, r3
 8001b70:	4770      	bx	lr
	...

08001b74 <_init>:
 8001b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b76:	bf00      	nop
 8001b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b7a:	bc08      	pop	{r3}
 8001b7c:	469e      	mov	lr, r3
 8001b7e:	4770      	bx	lr

08001b80 <_fini>:
 8001b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b82:	bf00      	nop
 8001b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b86:	bc08      	pop	{r3}
 8001b88:	469e      	mov	lr, r3
 8001b8a:	4770      	bx	lr
