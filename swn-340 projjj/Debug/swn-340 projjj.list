
swn-340 projjj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ad4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08001c64  08001c64  00011c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e2c  08001e2c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e2c  08001e2c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e2c  08001e2c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e2c  08001e2c  00011e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e30  08001e30  00011e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000005c  08001e90  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08001e90  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000419e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001544  00000000  00000000  0002426d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000408  00000000  00000000  000257b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002c5  00000000  00000000  00025bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002107  00000000  00000000  00025e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007377  00000000  00000000  00027f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5bb4  00000000  00000000  0002f303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001160  00000000  00000000  00124eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00126018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001c4c 	.word	0x08001c4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001c4c 	.word	0x08001c4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08a      	sub	sp, #40	; 0x28
 8000274:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000276:	f107 0314 	add.w	r3, r7, #20
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000286:	4b30      	ldr	r3, [pc, #192]	; (8000348 <GPIO_Init+0xd8>)
 8000288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800028a:	4a2f      	ldr	r2, [pc, #188]	; (8000348 <GPIO_Init+0xd8>)
 800028c:	f043 0304 	orr.w	r3, r3, #4
 8000290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000292:	4b2d      	ldr	r3, [pc, #180]	; (8000348 <GPIO_Init+0xd8>)
 8000294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000296:	f003 0304 	and.w	r3, r3, #4
 800029a:	613b      	str	r3, [r7, #16]
 800029c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800029e:	4b2a      	ldr	r3, [pc, #168]	; (8000348 <GPIO_Init+0xd8>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	4a29      	ldr	r2, [pc, #164]	; (8000348 <GPIO_Init+0xd8>)
 80002a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002aa:	4b27      	ldr	r3, [pc, #156]	; (8000348 <GPIO_Init+0xd8>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002b2:	60fb      	str	r3, [r7, #12]
 80002b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002b6:	4b24      	ldr	r3, [pc, #144]	; (8000348 <GPIO_Init+0xd8>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	4a23      	ldr	r2, [pc, #140]	; (8000348 <GPIO_Init+0xd8>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002c2:	4b21      	ldr	r3, [pc, #132]	; (8000348 <GPIO_Init+0xd8>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	f003 0301 	and.w	r3, r3, #1
 80002ca:	60bb      	str	r3, [r7, #8]
 80002cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80002ce:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <GPIO_Init+0xd8>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	4a1d      	ldr	r2, [pc, #116]	; (8000348 <GPIO_Init+0xd8>)
 80002d4:	f043 0302 	orr.w	r3, r3, #2
 80002d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002da:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <GPIO_Init+0xd8>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	f003 0302 	and.w	r3, r3, #2
 80002e2:	607b      	str	r3, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 80002e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80002f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f2:	2300      	movs	r3, #0
 80002f4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	4619      	mov	r1, r3
 80002fc:	4813      	ldr	r0, [pc, #76]	; (800034c <GPIO_Init+0xdc>)
 80002fe:	f000 fe23 	bl	8000f48 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = S1_Pin;
 8000302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000306:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000308:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800030c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800030e:	2302      	movs	r3, #2
 8000310:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8000312:	f107 0314 	add.w	r3, r7, #20
 8000316:	4619      	mov	r1, r3
 8000318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031c:	f000 fe14 	bl	8000f48 <HAL_GPIO_Init>

	/* EXTI15_10_IRQn interrupt init*/
	// Note you will ahave to add EXTI15_10_IRQn Interrupt handler function as well
	// This is the interrupt handler for the blue button
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000320:	2200      	movs	r2, #0
 8000322:	2100      	movs	r1, #0
 8000324:	2028      	movs	r0, #40	; 0x28
 8000326:	f000 fde4 	bl	8000ef2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800032a:	2028      	movs	r0, #40	; 0x28
 800032c:	f000 fdfd 	bl	8000f2a <HAL_NVIC_EnableIRQ>


	/* EXTI9_5_IRQn interrupt init*/
	// Note you will have to add EXTI9_15_IRQn Interrupt handler function as well
	// This is the interrupt handler for the external buttons (S1)
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000330:	2200      	movs	r2, #0
 8000332:	2101      	movs	r1, #1
 8000334:	2017      	movs	r0, #23
 8000336:	f000 fddc 	bl	8000ef2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800033a:	2017      	movs	r0, #23
 800033c:	f000 fdf5 	bl	8000f2a <HAL_NVIC_EnableIRQ>

}
 8000340:	bf00      	nop
 8000342:	3728      	adds	r7, #40	; 0x28
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40021000 	.word	0x40021000
 800034c:	48000800 	.word	0x48000800

08000350 <LED_Init>:

//******************************************************************************************
// User pin = LD2 Green pin = PA.5
//******************************************************************************************

void LED_Init(uint8_t pin){
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 800035a:	4b2b      	ldr	r3, [pc, #172]	; (8000408 <LED_Init+0xb8>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035e:	4a2a      	ldr	r2, [pc, #168]	; (8000408 <LED_Init+0xb8>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));
 8000366:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	2103      	movs	r1, #3
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	43db      	mvns	r3, r3
 8000378:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800037c:	4013      	ands	r3, r2
 800037e:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 8000380:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	2101      	movs	r1, #1
 800038c:	fa01 f303 	lsl.w	r3, r1, r3
 8000390:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000394:	4313      	orrs	r3, r2
 8000396:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 8000398:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	79fb      	ldrb	r3, [r7, #7]
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	2103      	movs	r1, #3
 80003a4:	fa01 f303 	lsl.w	r3, r1, r3
 80003a8:	43db      	mvns	r3, r3
 80003aa:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003ae:	4013      	ands	r3, r2
 80003b0:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 80003b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b6:	689a      	ldr	r2, [r3, #8]
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	2103      	movs	r1, #3
 80003be:	fa01 f303 	lsl.w	r3, r1, r3
 80003c2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003c6:	4313      	orrs	r3, r2
 80003c8:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 80003ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ce:	685a      	ldr	r2, [r3, #4]
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	2101      	movs	r1, #1
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	43db      	mvns	r3, r3
 80003da:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003de:	4013      	ands	r3, r2
 80003e0:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 80003e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e6:	68da      	ldr	r2, [r3, #12]
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	2103      	movs	r1, #3
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	43db      	mvns	r3, r3
 80003f4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003f8:	4013      	ands	r3, r2
 80003fa:	60cb      	str	r3, [r1, #12]
	
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	40021000 	.word	0x40021000

0800040c <LED_On>:

//******************************************************************************************
// Turn pin On
//******************************************************************************************
void LED_On(uint8_t pin){
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR |= (1UL<<pin);
 8000416:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800041a:	695a      	ldr	r2, [r3, #20]
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	2101      	movs	r1, #1
 8000420:	fa01 f303 	lsl.w	r3, r1, r3
 8000424:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000428:	4313      	orrs	r3, r2
 800042a:	614b      	str	r3, [r1, #20]
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <LED_Off>:

//******************************************************************************************
// Turn pin Off
//******************************************************************************************
void LED_Off(uint8_t pin){
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR &= ~(1UL<<pin);
 8000442:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000446:	695a      	ldr	r2, [r3, #20]
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2101      	movs	r1, #1
 800044c:	fa01 f303 	lsl.w	r3, r1, r3
 8000450:	43db      	mvns	r3, r3
 8000452:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000456:	4013      	ands	r3, r2
 8000458:	614b      	str	r3, [r1, #20]
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
	...

08000468 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 800046e:	4b6b      	ldr	r3, [pc, #428]	; (800061c <System_Clock_Init+0x1b4>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a6a      	ldr	r2, [pc, #424]	; (800061c <System_Clock_Init+0x1b4>)
 8000474:	f023 0307 	bic.w	r3, r3, #7
 8000478:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 800047a:	4b68      	ldr	r3, [pc, #416]	; (800061c <System_Clock_Init+0x1b4>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a67      	ldr	r2, [pc, #412]	; (800061c <System_Clock_Init+0x1b4>)
 8000480:	f043 0302 	orr.w	r3, r3, #2
 8000484:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 8000486:	4b66      	ldr	r3, [pc, #408]	; (8000620 <System_Clock_Init+0x1b8>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a65      	ldr	r2, [pc, #404]	; (8000620 <System_Clock_Init+0x1b8>)
 800048c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000490:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 8000492:	bf00      	nop
 8000494:	4b62      	ldr	r3, [pc, #392]	; (8000620 <System_Clock_Init+0x1b8>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800049c:	2b00      	cmp	r3, #0
 800049e:	d0f9      	beq.n	8000494 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 80004a0:	2310      	movs	r3, #16
 80004a2:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 80004a4:	4b5e      	ldr	r3, [pc, #376]	; (8000620 <System_Clock_Init+0x1b8>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	4a5d      	ldr	r2, [pc, #372]	; (8000620 <System_Clock_Init+0x1b8>)
 80004aa:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80004ae:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 80004b0:	4b5b      	ldr	r3, [pc, #364]	; (8000620 <System_Clock_Init+0x1b8>)
 80004b2:	685a      	ldr	r2, [r3, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	061b      	lsls	r3, r3, #24
 80004b8:	4959      	ldr	r1, [pc, #356]	; (8000620 <System_Clock_Init+0x1b8>)
 80004ba:	4313      	orrs	r3, r2
 80004bc:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 80004be:	4b58      	ldr	r3, [pc, #352]	; (8000620 <System_Clock_Init+0x1b8>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a57      	ldr	r2, [pc, #348]	; (8000620 <System_Clock_Init+0x1b8>)
 80004c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004c8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 80004ca:	bf00      	nop
 80004cc:	4b54      	ldr	r3, [pc, #336]	; (8000620 <System_Clock_Init+0x1b8>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80004d8:	d0f8      	beq.n	80004cc <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 80004da:	4b51      	ldr	r3, [pc, #324]	; (8000620 <System_Clock_Init+0x1b8>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	4a50      	ldr	r2, [pc, #320]	; (8000620 <System_Clock_Init+0x1b8>)
 80004e0:	f023 0303 	bic.w	r3, r3, #3
 80004e4:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 80004e6:	4b4e      	ldr	r3, [pc, #312]	; (8000620 <System_Clock_Init+0x1b8>)
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	4a4d      	ldr	r2, [pc, #308]	; (8000620 <System_Clock_Init+0x1b8>)
 80004ec:	f043 0302 	orr.w	r3, r3, #2
 80004f0:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 80004f2:	4b4b      	ldr	r3, [pc, #300]	; (8000620 <System_Clock_Init+0x1b8>)
 80004f4:	68db      	ldr	r3, [r3, #12]
 80004f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80004fa:	4a49      	ldr	r2, [pc, #292]	; (8000620 <System_Clock_Init+0x1b8>)
 80004fc:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000500:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 8000502:	4b47      	ldr	r3, [pc, #284]	; (8000620 <System_Clock_Init+0x1b8>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800050a:	4a45      	ldr	r2, [pc, #276]	; (8000620 <System_Clock_Init+0x1b8>)
 800050c:	f043 0310 	orr.w	r3, r3, #16
 8000510:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 8000512:	4b43      	ldr	r3, [pc, #268]	; (8000620 <System_Clock_Init+0x1b8>)
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	4a42      	ldr	r2, [pc, #264]	; (8000620 <System_Clock_Init+0x1b8>)
 8000518:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800051c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 800051e:	4b40      	ldr	r3, [pc, #256]	; (8000620 <System_Clock_Init+0x1b8>)
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	4a3f      	ldr	r2, [pc, #252]	; (8000620 <System_Clock_Init+0x1b8>)
 8000524:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000528:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 800052a:	4b3d      	ldr	r3, [pc, #244]	; (8000620 <System_Clock_Init+0x1b8>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a3c      	ldr	r2, [pc, #240]	; (8000620 <System_Clock_Init+0x1b8>)
 8000530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000534:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000536:	bf00      	nop
 8000538:	4b39      	ldr	r3, [pc, #228]	; (8000620 <System_Clock_Init+0x1b8>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0f9      	beq.n	8000538 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 8000544:	4b36      	ldr	r3, [pc, #216]	; (8000620 <System_Clock_Init+0x1b8>)
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	4a35      	ldr	r2, [pc, #212]	; (8000620 <System_Clock_Init+0x1b8>)
 800054a:	f023 0303 	bic.w	r3, r3, #3
 800054e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8000550:	4b33      	ldr	r3, [pc, #204]	; (8000620 <System_Clock_Init+0x1b8>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	4a32      	ldr	r2, [pc, #200]	; (8000620 <System_Clock_Init+0x1b8>)
 8000556:	f043 0303 	orr.w	r3, r3, #3
 800055a:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800055c:	bf00      	nop
 800055e:	4b30      	ldr	r3, [pc, #192]	; (8000620 <System_Clock_Init+0x1b8>)
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	f003 030c 	and.w	r3, r3, #12
 8000566:	2b0c      	cmp	r3, #12
 8000568:	d1f9      	bne.n	800055e <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 800056a:	4b2d      	ldr	r3, [pc, #180]	; (8000620 <System_Clock_Init+0x1b8>)
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	4a2c      	ldr	r2, [pc, #176]	; (8000620 <System_Clock_Init+0x1b8>)
 8000570:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000574:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 8000576:	4b2a      	ldr	r3, [pc, #168]	; (8000620 <System_Clock_Init+0x1b8>)
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	4a29      	ldr	r2, [pc, #164]	; (8000620 <System_Clock_Init+0x1b8>)
 800057c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000580:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 8000582:	4b27      	ldr	r3, [pc, #156]	; (8000620 <System_Clock_Init+0x1b8>)
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	4a26      	ldr	r2, [pc, #152]	; (8000620 <System_Clock_Init+0x1b8>)
 8000588:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800058c:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 800058e:	4b24      	ldr	r3, [pc, #144]	; (8000620 <System_Clock_Init+0x1b8>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a23      	ldr	r2, [pc, #140]	; (8000620 <System_Clock_Init+0x1b8>)
 8000594:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000598:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 800059a:	bf00      	nop
 800059c:	4b20      	ldr	r3, [pc, #128]	; (8000620 <System_Clock_Init+0x1b8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80005a8:	d0f8      	beq.n	800059c <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 80005aa:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <System_Clock_Init+0x1b8>)
 80005ac:	691b      	ldr	r3, [r3, #16]
 80005ae:	4a1c      	ldr	r2, [pc, #112]	; (8000620 <System_Clock_Init+0x1b8>)
 80005b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80005b4:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 80005b6:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <System_Clock_Init+0x1b8>)
 80005b8:	691b      	ldr	r3, [r3, #16]
 80005ba:	4a19      	ldr	r2, [pc, #100]	; (8000620 <System_Clock_Init+0x1b8>)
 80005bc:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 80005c0:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <System_Clock_Init+0x1b8>)
 80005c4:	691b      	ldr	r3, [r3, #16]
 80005c6:	4a16      	ldr	r2, [pc, #88]	; (8000620 <System_Clock_Init+0x1b8>)
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005cc:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <System_Clock_Init+0x1b8>)
 80005d0:	691b      	ldr	r3, [r3, #16]
 80005d2:	4a13      	ldr	r2, [pc, #76]	; (8000620 <System_Clock_Init+0x1b8>)
 80005d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005d8:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <System_Clock_Init+0x1b8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a10      	ldr	r2, [pc, #64]	; (8000620 <System_Clock_Init+0x1b8>)
 80005e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005e4:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 80005e6:	bf00      	nop
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <System_Clock_Init+0x1b8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0f9      	beq.n	80005e8 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <System_Clock_Init+0x1b8>)
 80005f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005fa:	4a09      	ldr	r2, [pc, #36]	; (8000620 <System_Clock_Init+0x1b8>)
 80005fc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <System_Clock_Init+0x1b8>)
 8000606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000608:	4a05      	ldr	r2, [pc, #20]	; (8000620 <System_Clock_Init+0x1b8>)
 800060a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800060e:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	40022000 	.word	0x40022000
 8000620:	40021000 	.word	0x40021000

08000624 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <UART2_Init+0x40>)
 800062a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <UART2_Init+0x40>)
 800062e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000632:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <UART2_Init+0x40>)
 8000636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <UART2_Init+0x40>)
 800063c:	f023 030c 	bic.w	r3, r3, #12
 8000640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <UART2_Init+0x40>)
 8000646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800064a:	4a06      	ldr	r2, [pc, #24]	; (8000664 <UART2_Init+0x40>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000654:	f000 f80a 	bl	800066c <UART2_GPIO_Init>
	USART_Init(USART2);
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <UART2_Init+0x44>)
 800065a:	f000 f84f 	bl	80006fc <USART_Init>
	
//	NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
//	NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000
 8000668:	40004400 	.word	0x40004400

0800066c <UART2_GPIO_Init>:
void UART2_GPIO_Init(void) {
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <UART2_GPIO_Init+0x8c>)
 8000672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000674:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <UART2_GPIO_Init+0x8c>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 800067c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800068a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 800068c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000696:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800069a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 800069c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006a0:	6a1b      	ldr	r3, [r3, #32]
 80006a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80006aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 80006ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006b0:	6a1b      	ldr	r3, [r3, #32]
 80006b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006b6:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80006ba:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 80006bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006c6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80006ca:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 80006cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006da:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 80006dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006e6:	f023 030c 	bic.w	r3, r3, #12
 80006ea:	6053      	str	r3, [r2, #4]
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000

080006fc <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f023 0201 	bic.w	r2, r3, #1
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f242 028d 	movw	r2, #8333	; 0x208d
 800073a:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f043 020c 	orr.w	r2, r3, #12
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a2f      	ldr	r2, [pc, #188]	; (8000808 <USART_Init+0x10c>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d129      	bne.n	80007a4 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f043 0220 	orr.w	r2, r3, #32
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f023 0210 	bic.w	r2, r3, #16
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f023 0201 	bic.w	r2, r3, #1
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a19      	ldr	r2, [pc, #100]	; (800080c <USART_Init+0x110>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d111      	bne.n	80007d0 <USART_Init+0xd4>
		USARTx->ICR |= USART_ICR_TCCF;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6a1b      	ldr	r3, [r3, #32]
 80007b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <USART_Init+0x114>)
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	4a14      	ldr	r2, [pc, #80]	; (8000810 <USART_Init+0x114>)
 80007be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80007c2:	6093      	str	r3, [r2, #8]
		USARTx-> CR1 |= USART_CR1_RXNEIE;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f043 0220 	orr.w	r2, r3, #32
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	601a      	str	r2, [r3, #0]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f043 0201 	orr.w	r2, r3, #1
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 80007dc:	bf00      	nop
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0f9      	beq.n	80007de <USART_Init+0xe2>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 80007ea:	bf00      	nop
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	69db      	ldr	r3, [r3, #28]
 80007f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d0f9      	beq.n	80007ec <USART_Init+0xf0>
}
 80007f8:	bf00      	nop
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40004c00 	.word	0x40004c00
 800080c:	40004400 	.word	0x40004400
 8000810:	40013800 	.word	0x40013800

08000814 <USART_Read>:


uint8_t USART_Read (USART_TypeDef * USARTx) {
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 800081c:	bf00      	nop
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	f003 0320 	and.w	r3, r3, #32
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0f9      	beq.n	800081e <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800082e:	b29b      	uxth	r3, r3
 8000830:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <USART_Write>:
	}else{
		return ((uint8_t)(USARTx->RDR & 0xFF));
	}
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 800083e:	b580      	push	{r7, lr}
 8000840:	b086      	sub	sp, #24
 8000842:	af00      	add	r7, sp, #0
 8000844:	60f8      	str	r0, [r7, #12]
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	e014      	b.n	800087a <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 8000850:	bf00      	nop
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0f9      	beq.n	8000852 <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b29a      	uxth	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 800086c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000870:	f000 f818 	bl	80008a4 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	3301      	adds	r3, #1
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	429a      	cmp	r2, r3
 8000880:	d8e6      	bhi.n	8000850 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 8000882:	bf00      	nop
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	69db      	ldr	r3, [r3, #28]
 8000888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800088c:	2b00      	cmp	r3, #0
 800088e:	d0f9      	beq.n	8000884 <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	61da      	str	r2, [r3, #28]
}   
 800089c:	bf00      	nop
 800089e:	3718      	adds	r7, #24
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2264      	movs	r2, #100	; 0x64
 80008b0:	fb03 f202 	mul.w	r2, r3, r2
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <USART_Delay+0x3c>)
 80008b6:	fba3 1302 	umull	r1, r3, r3, r2
 80008ba:	1ad2      	subs	r2, r2, r3
 80008bc:	0852      	lsrs	r2, r2, #1
 80008be:	4413      	add	r3, r2
 80008c0:	089b      	lsrs	r3, r3, #2
 80008c2:	60fb      	str	r3, [r7, #12]
	while(--time);   
 80008c4:	bf00      	nop
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3b01      	subs	r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1f9      	bne.n	80008c6 <USART_Delay+0x22>
}
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	24924925 	.word	0x24924925

080008e4 <init_syst>:
    uint32_t CSR;
    uint32_t RVR;
    uint32_t CVR;
    uint32_t CALIB;
};
void init_syst (){
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
    // Create an instance of systick
    // Set timer to 10 ms
    SYST_TICK->RVR = 799999; //1 ms timer
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <init_syst+0x38>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0c      	ldr	r2, [pc, #48]	; (8000920 <init_syst+0x3c>)
 80008ee:	605a      	str	r2, [r3, #4]
    // Turn on timer -
    SYST_TICK->CSR |= (1<<2); // Use pc source
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <init_syst+0x38>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <init_syst+0x38>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f042 0204 	orr.w	r2, r2, #4
 80008fe:	601a      	str	r2, [r3, #0]
    SYST_TICK->CSR |= (1<<0); // Enable
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <init_syst+0x38>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <init_syst+0x38>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f042 0201 	orr.w	r2, r2, #1
 800090e:	601a      	str	r2, [r3, #0]
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000004 	.word	0x20000004
 8000920:	000c34ff 	.word	0x000c34ff

08000924 <play_song>:
	printf("\r\n%s%s","Song Title: ",songTitle);
	printf("\r\n%s%s\r\n","Song Copyright: ",songCopyright);

}
//play song
void play_song(){
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	PLAY_PAUSE_TOG = 1;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <play_song+0x20>)
 800092a:	2201      	movs	r2, #1
 800092c:	601a      	str	r2, [r3, #0]
	lightState = 1;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <play_song+0x24>)
 8000930:	2201      	movs	r2, #1
 8000932:	601a      	str	r2, [r3, #0]
	LED_On(EXTERN_LED);
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <play_song+0x28>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fd66 	bl	800040c <LED_On>
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000078 	.word	0x20000078
 8000948:	200000fc 	.word	0x200000fc
 800094c:	20000008 	.word	0x20000008

08000950 <stop_song>:
//stop song
void stop_song(){
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	lightState = 0;
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <stop_song+0x1c>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
	LED_Off(EXTERN_LED);
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <stop_song+0x20>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fd69 	bl	8000438 <LED_Off>
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000fc 	.word	0x200000fc
 8000970:	20000008 	.word	0x20000008

08000974 <mode_print>:
			}
		}

}

void mode_print(){
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	if(isRemote == 1){
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <mode_print+0x28>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d107      	bne.n	8000990 <mode_print+0x1c>
			printf("\r\n%s","***REMOTE MODE ACTIVE***");
 8000980:	4907      	ldr	r1, [pc, #28]	; (80009a0 <mode_print+0x2c>)
 8000982:	4808      	ldr	r0, [pc, #32]	; (80009a4 <mode_print+0x30>)
 8000984:	f000 f8e6 	bl	8000b54 <printf>
			printf("\n\rAvailable User Commands\n\rNEXT - Show next song info\n\rPLAY - Play the song (LED on)\n\rPAUSE - Pause the song (LED flash)\n\rSTOP - Stop the song (LED off)\n\r");
 8000988:	4807      	ldr	r0, [pc, #28]	; (80009a8 <mode_print+0x34>)
 800098a:	f000 f8e3 	bl	8000b54 <printf>
		}else{
			 printf("\r\n%s\r\n","***MANUAL OVERRIDE MODE ACTIVE***");
	}
}
 800098e:	e003      	b.n	8000998 <mode_print+0x24>
			 printf("\r\n%s\r\n","***MANUAL OVERRIDE MODE ACTIVE***");
 8000990:	4906      	ldr	r1, [pc, #24]	; (80009ac <mode_print+0x38>)
 8000992:	4807      	ldr	r0, [pc, #28]	; (80009b0 <mode_print+0x3c>)
 8000994:	f000 f8de 	bl	8000b54 <printf>
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000000 	.word	0x20000000
 80009a0:	08001dac 	.word	0x08001dac
 80009a4:	08001c74 	.word	0x08001c74
 80009a8:	08001cf8 	.word	0x08001cf8
 80009ac:	08001dc8 	.word	0x08001dc8
 80009b0:	08001cd0 	.word	0x08001cd0

080009b4 <USART2_IRQHandler>:
uint32_t buttonPressCount = 0;
uint32_t ticks = 0;
uint32_t lastButtonPressTime;

// Interrupt handler for USART2
void USART2_IRQHandler(void){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
    uint8_t ch = USART_Read(USART2);
 80009ba:	4808      	ldr	r0, [pc, #32]	; (80009dc <USART2_IRQHandler+0x28>)
 80009bc:	f7ff ff2a 	bl	8000814 <USART_Read>
 80009c0:	4603      	mov	r3, r0
 80009c2:	71fb      	strb	r3, [r7, #7]
    BUFFER[0] = ch;
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <USART2_IRQHandler+0x2c>)
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	7013      	strb	r3, [r2, #0]
    printf("%c",ch);
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 f8b3 	bl	8000b38 <putchar>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40004400 	.word	0x40004400
 80009e0:	2000007c 	.word	0x2000007c

080009e4 <SysTick_Handler>:

// SysTick interrupt handler
void SysTick_Handler(void) {
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
    ticks++;  // Increment the counter on each SysTick interrupt
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <SysTick_Handler+0x18>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a03      	ldr	r2, [pc, #12]	; (80009fc <SysTick_Handler+0x18>)
 80009f0:	6013      	str	r3, [r2, #0]
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	20000104 	.word	0x20000104

08000a00 <EXTI15_10_IRQHandler>:

// EXTI15_10 interrupt handler
void EXTI15_10_IRQHandler(void){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
    // Toggle the isRemote variable and reset lightState
    isRemote = !isRemote;
 8000a04:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <EXTI15_10_IRQHandler+0x3c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	bf0c      	ite	eq
 8000a0c:	2301      	moveq	r3, #1
 8000a0e:	2300      	movne	r3, #0
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <EXTI15_10_IRQHandler+0x3c>)
 8000a16:	601a      	str	r2, [r3, #0]
    lightState = 0;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <EXTI15_10_IRQHandler+0x40>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
    LED_Off(EXTERN_LED);
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <EXTI15_10_IRQHandler+0x44>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fd07 	bl	8000438 <LED_Off>
    mode_print();
 8000a2a:	f7ff ffa3 	bl	8000974 <mode_print>

    // Handle EXTI interrupt for GPIO_PIN_13
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a2e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a32:	f000 fc4b 	bl	80012cc <HAL_GPIO_EXTI_IRQHandler>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	200000fc 	.word	0x200000fc
 8000a44:	20000008 	.word	0x20000008

08000a48 <EXTI9_5_IRQHandler>:

// EXTI9_5 interrupt handler
void EXTI9_5_IRQHandler(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
    // Initialize SysTick timer
    init_systick();
 8000a4e:	f000 f909 	bl	8000c64 <init_systick>

    // Increment buttonPressCount
    buttonPressCount++;
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <EXTI9_5_IRQHandler+0xb4>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	4a28      	ldr	r2, [pc, #160]	; (8000afc <EXTI9_5_IRQHandler+0xb4>)
 8000a5a:	6013      	str	r3, [r2, #0]

    // Record the start time of the button press
    uint32_t startTime = ticks;
 8000a5c:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <EXTI9_5_IRQHandler+0xb8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	60bb      	str	r3, [r7, #8]

    // Calculate time since the last button press
    uint32_t timeSinceLastPress = startTime - lastButtonPressTime;
 8000a62:	4b28      	ldr	r3, [pc, #160]	; (8000b04 <EXTI9_5_IRQHandler+0xbc>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	607b      	str	r3, [r7, #4]

    // Update buttonPressCount based on time since last press
    if (timeSinceLastPress <= 1000) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a72:	d805      	bhi.n	8000a80 <EXTI9_5_IRQHandler+0x38>
        buttonPressCount++;
 8000a74:	4b21      	ldr	r3, [pc, #132]	; (8000afc <EXTI9_5_IRQHandler+0xb4>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	4a20      	ldr	r2, [pc, #128]	; (8000afc <EXTI9_5_IRQHandler+0xb4>)
 8000a7c:	6013      	str	r3, [r2, #0]
 8000a7e:	e002      	b.n	8000a86 <EXTI9_5_IRQHandler+0x3e>
    } else {
        buttonPressCount = 1;
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <EXTI9_5_IRQHandler+0xb4>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
    }

    // Update the last button press time
    lastButtonPressTime = startTime;
 8000a86:	4a1f      	ldr	r2, [pc, #124]	; (8000b04 <EXTI9_5_IRQHandler+0xbc>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	6013      	str	r3, [r2, #0]

    // Wait for the button to be released
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
 8000a8c:	bf00      	nop
 8000a8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f000 fc01 	bl	800129c <HAL_GPIO_ReadPin>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d0f6      	beq.n	8000a8e <EXTI9_5_IRQHandler+0x46>
    }

    // Calculate elapsed time since the button press started
    uint32_t elapsed = ticks - startTime;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <EXTI9_5_IRQHandler+0xb8>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	603b      	str	r3, [r7, #0]

    // Delay for a short period
    for(int i = 0; i < 1000; i++) {
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	e004      	b.n	8000aba <EXTI9_5_IRQHandler+0x72>
        delay_systick();
 8000ab0:	f000 f90a 	bl	8000cc8 <delay_systick>
    for(int i = 0; i < 1000; i++) {
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ac0:	dbf6      	blt.n	8000ab0 <EXTI9_5_IRQHandler+0x68>
    }

    // Handle different cases based on isRemote and elapsed time
    if (isRemote == 0) {
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <EXTI9_5_IRQHandler+0xc0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d110      	bne.n	8000aec <EXTI9_5_IRQHandler+0xa4>
        if (elapsed > 1000) {
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ad0:	d902      	bls.n	8000ad8 <EXTI9_5_IRQHandler+0x90>
            stop_song();
 8000ad2:	f7ff ff3d 	bl	8000950 <stop_song>
 8000ad6:	e009      	b.n	8000aec <EXTI9_5_IRQHandler+0xa4>
        } else {
            if (PLAY_PAUSE_TOG == 0) {
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <EXTI9_5_IRQHandler+0xc4>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d102      	bne.n	8000ae6 <EXTI9_5_IRQHandler+0x9e>
                play_song();
 8000ae0:	f7ff ff20 	bl	8000924 <play_song>
 8000ae4:	e002      	b.n	8000aec <EXTI9_5_IRQHandler+0xa4>
            } else {
                lightState = 2;
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <EXTI9_5_IRQHandler+0xc8>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Handle EXTI interrupt for S1_Pin
    HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8000aec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000af0:	f000 fbec 	bl	80012cc <HAL_GPIO_EXTI_IRQHandler>
}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000100 	.word	0x20000100
 8000b00:	20000104 	.word	0x20000104
 8000b04:	20000108 	.word	0x20000108
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000078 	.word	0x20000078
 8000b10:	200000fc 	.word	0x200000fc

08000b14 <print_string>:
#include <stdio.h>
#include <stdarg.h>

static char buffer[128];

static void print_string (const char* string, int len) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
    USART_Write (USART2, (unsigned char*) string, len);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	4803      	ldr	r0, [pc, #12]	; (8000b34 <print_string+0x20>)
 8000b26:	f7ff fe8a 	bl	800083e <USART_Write>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40004400 	.word	0x40004400

08000b38 <putchar>:
    print_string (string, len);
    print_string ("\n", 1);
    return len;
}

int putchar (int chr){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
    print_string ((char*)&chr, 1);
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2101      	movs	r1, #1
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff ffe5 	bl	8000b14 <print_string>
    return chr;
 8000b4a:	687b      	ldr	r3, [r7, #4]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <printf>:

int printf (const char* format, ...) {
 8000b54:	b40f      	push	{r0, r1, r2, r3}
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
    va_list aptr;
    int ret;

    va_start(aptr, format);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	603b      	str	r3, [r7, #0]
    ret = vsprintf(buffer, format, aptr);
 8000b62:	683a      	ldr	r2, [r7, #0]
 8000b64:	6939      	ldr	r1, [r7, #16]
 8000b66:	4808      	ldr	r0, [pc, #32]	; (8000b88 <printf+0x34>)
 8000b68:	f000 fbea 	bl	8001340 <vsiprintf>
 8000b6c:	6078      	str	r0, [r7, #4]
    va_end(aptr);
    print_string (buffer, ret);
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <printf+0x34>)
 8000b72:	f7ff ffcf 	bl	8000b14 <print_string>

    return(ret);
 8000b76:	687b      	ldr	r3, [r7, #4]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b82:	b004      	add	sp, #16
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000010c 	.word	0x2000010c

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f000 fbca 	bl	8001354 <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20018000 	.word	0x20018000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	2000018c 	.word	0x2000018c
 8000bf4:	200002d8 	.word	0x200002d8

08000bf8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <SystemInit+0x64>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c02:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <SystemInit+0x64>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <SystemInit+0x68>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <SystemInit+0x68>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <SystemInit+0x68>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <SystemInit+0x68>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <SystemInit+0x68>)
 8000c24:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c28:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <SystemInit+0x68>)
 8000c30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c34:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <SystemInit+0x68>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <SystemInit+0x68>)
 8000c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <SystemInit+0x68>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SystemInit+0x64>)
 8000c4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00
 8000c60:	40021000 	.word	0x40021000

08000c64 <init_systick>:
	uint32_t CVR;
	uint32_t CALIB;
};
struct SYST* SYST_TICK = (struct SYST*) 0xE000E010;
// This function is to Initialize SysTick registers
struct SYST* init_systick(){
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
		//clear csr register
		SYST_TICK->CSR &= ~(1 << 0);;
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <init_systick+0x58>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <init_systick+0x58>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f022 0201 	bic.w	r2, r2, #1
 8000c76:	601a      	str	r2, [r3, #0]
	    // Set timer to 10 ms
	    SYST_TICK->RVR = 79999;
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <init_systick+0x58>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <init_systick+0x5c>)
 8000c7e:	605a      	str	r2, [r3, #4]
	    //Set to internal clock
	    SYST_TICK->CSR |= (1<<2); // Use pc source
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <init_systick+0x58>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <init_systick+0x58>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f042 0204 	orr.w	r2, r2, #4
 8000c8e:	601a      	str	r2, [r3, #0]
	    //Enable timer
	    SYST_TICK->CSR |= (1<<0); // Enable
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <init_systick+0x58>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <init_systick+0x58>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f042 0201 	orr.w	r2, r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]
	    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <init_systick+0x60>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <init_systick+0x60>)
 8000ca6:	f043 0302 	orr.w	r3, r3, #2
 8000caa:	6013      	str	r3, [r2, #0]
	    return SYST_TICK;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <init_systick+0x58>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000004 	.word	0x20000004
 8000cc0:	0001387f 	.word	0x0001387f
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <delay_systick>:

// This function is to create delay using SysTick timer counter
void delay_systick(){
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
		int x = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
		while(x == 0){
 8000cd2:	e007      	b.n	8000ce4 <delay_systick+0x1c>
			if ((SYST_TICK->CSR >> 16) == 1) {
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <delay_systick+0x30>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	0c1b      	lsrs	r3, r3, #16
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d101      	bne.n	8000ce4 <delay_systick+0x1c>
		         x = 1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
		while(x == 0){
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0f4      	beq.n	8000cd4 <delay_systick+0xc>
			}
		}
}
 8000cea:	bf00      	nop
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	20000004 	.word	0x20000004

08000cfc <main>:
#include "timer.h"
#include "sqr_wave.h"

int EXTERN_LED = 6;

int main(void){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 8000d00:	f7ff fbb2 	bl	8000468 <System_Clock_Init>
	UART2_Init ();
 8000d04:	f7ff fc8e 	bl	8000624 <UART2_Init>
	LED_Init(EXTERN_LED);
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <main+0x2c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fb1e 	bl	8000350 <LED_Init>
	init_syst();
 8000d14:	f7ff fde6 	bl	80008e4 <init_syst>
	GPIO_Init();
 8000d18:	f7ff faaa 	bl	8000270 <GPIO_Init>
	run_wave(3);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f805 	bl	8000d2c <run_wave>
 8000d22:	2300      	movs	r3, #0
//	mode_print();
//	init_player();

}
 8000d24:	4618      	mov	r0, r3
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000008 	.word	0x20000008

08000d2c <run_wave>:

//frequency is in Hertz
#include "printf.h"
#include "systick.h"

void run_wave(int frequency){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	int cnt = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
	while(0 == 0){
		while(cnt <=50){
 8000d38:	e008      	b.n	8000d4c <run_wave+0x20>
	       cnt++;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
		   delay_systick();
 8000d40:	f7ff ffc2 	bl	8000cc8 <delay_systick>
		   printf("%d",0);
 8000d44:	2100      	movs	r1, #0
 8000d46:	480e      	ldr	r0, [pc, #56]	; (8000d80 <run_wave+0x54>)
 8000d48:	f7ff ff04 	bl	8000b54 <printf>
		while(cnt <=50){
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b32      	cmp	r3, #50	; 0x32
 8000d50:	ddf3      	ble.n	8000d3a <run_wave+0xe>
		}
		cnt = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
		printf("\r\n%s"," ");
 8000d56:	490b      	ldr	r1, [pc, #44]	; (8000d84 <run_wave+0x58>)
 8000d58:	480b      	ldr	r0, [pc, #44]	; (8000d88 <run_wave+0x5c>)
 8000d5a:	f7ff fefb 	bl	8000b54 <printf>
		while(cnt <=50){
 8000d5e:	e008      	b.n	8000d72 <run_wave+0x46>
			       cnt++;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	3301      	adds	r3, #1
 8000d64:	60fb      	str	r3, [r7, #12]
				   delay_systick();
 8000d66:	f7ff ffaf 	bl	8000cc8 <delay_systick>
				   printf("%d",1);
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <run_wave+0x54>)
 8000d6e:	f7ff fef1 	bl	8000b54 <printf>
		while(cnt <=50){
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	2b32      	cmp	r3, #50	; 0x32
 8000d76:	ddf3      	ble.n	8000d60 <run_wave+0x34>
		}
		cnt = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
		while(cnt <=50){
 8000d7c:	e7e6      	b.n	8000d4c <run_wave+0x20>
 8000d7e:	bf00      	nop
 8000d80:	08001dec 	.word	0x08001dec
 8000d84:	08001df0 	.word	0x08001df0
 8000d88:	08001df4 	.word	0x08001df4

08000d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d90:	f7ff ff32 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	; (8000dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <LoopForever+0xe>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	; (8000dd8 <LoopForever+0x16>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dba:	f000 fad1 	bl	8001360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dbe:	f7ff ff9d 	bl	8000cfc <main>

08000dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dd0:	08001e34 	.word	0x08001e34
  ldr r2, =_sbss
 8000dd4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000dd8:	200002d8 	.word	0x200002d8

08000ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_2_IRQHandler>
	...

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	db0b      	blt.n	8000e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	f003 021f 	and.w	r2, r3, #31
 8000e14:	4907      	ldr	r1, [pc, #28]	; (8000e34 <__NVIC_EnableIRQ+0x38>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	095b      	lsrs	r3, r3, #5
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000e100 	.word	0xe000e100

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	; (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	; (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f04:	f7ff ff6c 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	6978      	ldr	r0, [r7, #20]
 8000f10:	f7ff ffbc 	bl	8000e8c <NVIC_EncodePriority>
 8000f14:	4602      	mov	r2, r0
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff8b 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5f 	bl	8000dfc <__NVIC_EnableIRQ>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f56:	e17f      	b.n	8001258 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 8171 	beq.w	8001252 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d005      	beq.n	8000f88 <HAL_GPIO_Init+0x40>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d130      	bne.n	8000fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68da      	ldr	r2, [r3, #12]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	f003 0201 	and.w	r2, r3, #1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d118      	bne.n	8001028 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	f003 0201 	and.w	r2, r3, #1
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b03      	cmp	r3, #3
 8001032:	d017      	beq.n	8001064 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d123      	bne.n	80010b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	08da      	lsrs	r2, r3, #3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3208      	adds	r2, #8
 8001078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	220f      	movs	r2, #15
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	691a      	ldr	r2, [r3, #16]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	6939      	ldr	r1, [r7, #16]
 80010b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0203 	and.w	r2, r3, #3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 80ac 	beq.w	8001252 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	4b5f      	ldr	r3, [pc, #380]	; (8001278 <HAL_GPIO_Init+0x330>)
 80010fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fe:	4a5e      	ldr	r2, [pc, #376]	; (8001278 <HAL_GPIO_Init+0x330>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6613      	str	r3, [r2, #96]	; 0x60
 8001106:	4b5c      	ldr	r3, [pc, #368]	; (8001278 <HAL_GPIO_Init+0x330>)
 8001108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001112:	4a5a      	ldr	r2, [pc, #360]	; (800127c <HAL_GPIO_Init+0x334>)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	3302      	adds	r3, #2
 800111a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800113c:	d025      	beq.n	800118a <HAL_GPIO_Init+0x242>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4f      	ldr	r2, [pc, #316]	; (8001280 <HAL_GPIO_Init+0x338>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d01f      	beq.n	8001186 <HAL_GPIO_Init+0x23e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4e      	ldr	r2, [pc, #312]	; (8001284 <HAL_GPIO_Init+0x33c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d019      	beq.n	8001182 <HAL_GPIO_Init+0x23a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4d      	ldr	r2, [pc, #308]	; (8001288 <HAL_GPIO_Init+0x340>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0x236>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4c      	ldr	r2, [pc, #304]	; (800128c <HAL_GPIO_Init+0x344>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00d      	beq.n	800117a <HAL_GPIO_Init+0x232>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4b      	ldr	r2, [pc, #300]	; (8001290 <HAL_GPIO_Init+0x348>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d007      	beq.n	8001176 <HAL_GPIO_Init+0x22e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4a      	ldr	r2, [pc, #296]	; (8001294 <HAL_GPIO_Init+0x34c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_GPIO_Init+0x22a>
 800116e:	2306      	movs	r3, #6
 8001170:	e00c      	b.n	800118c <HAL_GPIO_Init+0x244>
 8001172:	2307      	movs	r3, #7
 8001174:	e00a      	b.n	800118c <HAL_GPIO_Init+0x244>
 8001176:	2305      	movs	r3, #5
 8001178:	e008      	b.n	800118c <HAL_GPIO_Init+0x244>
 800117a:	2304      	movs	r3, #4
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x244>
 800117e:	2303      	movs	r3, #3
 8001180:	e004      	b.n	800118c <HAL_GPIO_Init+0x244>
 8001182:	2302      	movs	r3, #2
 8001184:	e002      	b.n	800118c <HAL_GPIO_Init+0x244>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x244>
 800118a:	2300      	movs	r3, #0
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	f002 0203 	and.w	r2, r2, #3
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4093      	lsls	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800119c:	4937      	ldr	r1, [pc, #220]	; (800127c <HAL_GPIO_Init+0x334>)
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011aa:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <HAL_GPIO_Init+0x350>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011ce:	4a32      	ldr	r2, [pc, #200]	; (8001298 <HAL_GPIO_Init+0x350>)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011d4:	4b30      	ldr	r3, [pc, #192]	; (8001298 <HAL_GPIO_Init+0x350>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011f8:	4a27      	ldr	r2, [pc, #156]	; (8001298 <HAL_GPIO_Init+0x350>)
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <HAL_GPIO_Init+0x350>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001222:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <HAL_GPIO_Init+0x350>)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <HAL_GPIO_Init+0x350>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800124c:	4a12      	ldr	r2, [pc, #72]	; (8001298 <HAL_GPIO_Init+0x350>)
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	3301      	adds	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa22 f303 	lsr.w	r3, r2, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	f47f ae78 	bne.w	8000f58 <HAL_GPIO_Init+0x10>
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	371c      	adds	r7, #28
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	40010000 	.word	0x40010000
 8001280:	48000400 	.word	0x48000400
 8001284:	48000800 	.word	0x48000800
 8001288:	48000c00 	.word	0x48000c00
 800128c:	48001000 	.word	0x48001000
 8001290:	48001400 	.word	0x48001400
 8001294:	48001800 	.word	0x48001800
 8001298:	40010400 	.word	0x40010400

0800129c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e001      	b.n	80012be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	80fb      	strh	r3, [r7, #6]

  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	4013      	ands	r3, r2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e4:	88fb      	ldrh	r3, [r7, #6]
 80012e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f806 	bl	80012fc <HAL_GPIO_EXTI_Callback>
  }
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40010400 	.word	0x40010400

080012fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <_vsiprintf_r>:
 8001314:	b500      	push	{lr}
 8001316:	b09b      	sub	sp, #108	; 0x6c
 8001318:	9100      	str	r1, [sp, #0]
 800131a:	9104      	str	r1, [sp, #16]
 800131c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001320:	9105      	str	r1, [sp, #20]
 8001322:	9102      	str	r1, [sp, #8]
 8001324:	4905      	ldr	r1, [pc, #20]	; (800133c <_vsiprintf_r+0x28>)
 8001326:	9103      	str	r1, [sp, #12]
 8001328:	4669      	mov	r1, sp
 800132a:	f000 f991 	bl	8001650 <_svfiprintf_r>
 800132e:	9b00      	ldr	r3, [sp, #0]
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
 8001334:	b01b      	add	sp, #108	; 0x6c
 8001336:	f85d fb04 	ldr.w	pc, [sp], #4
 800133a:	bf00      	nop
 800133c:	ffff0208 	.word	0xffff0208

08001340 <vsiprintf>:
 8001340:	4613      	mov	r3, r2
 8001342:	460a      	mov	r2, r1
 8001344:	4601      	mov	r1, r0
 8001346:	4802      	ldr	r0, [pc, #8]	; (8001350 <vsiprintf+0x10>)
 8001348:	6800      	ldr	r0, [r0, #0]
 800134a:	f7ff bfe3 	b.w	8001314 <_vsiprintf_r>
 800134e:	bf00      	nop
 8001350:	20000058 	.word	0x20000058

08001354 <__errno>:
 8001354:	4b01      	ldr	r3, [pc, #4]	; (800135c <__errno+0x8>)
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000058 	.word	0x20000058

08001360 <__libc_init_array>:
 8001360:	b570      	push	{r4, r5, r6, lr}
 8001362:	4d0d      	ldr	r5, [pc, #52]	; (8001398 <__libc_init_array+0x38>)
 8001364:	4c0d      	ldr	r4, [pc, #52]	; (800139c <__libc_init_array+0x3c>)
 8001366:	1b64      	subs	r4, r4, r5
 8001368:	10a4      	asrs	r4, r4, #2
 800136a:	2600      	movs	r6, #0
 800136c:	42a6      	cmp	r6, r4
 800136e:	d109      	bne.n	8001384 <__libc_init_array+0x24>
 8001370:	4d0b      	ldr	r5, [pc, #44]	; (80013a0 <__libc_init_array+0x40>)
 8001372:	4c0c      	ldr	r4, [pc, #48]	; (80013a4 <__libc_init_array+0x44>)
 8001374:	f000 fc6a 	bl	8001c4c <_init>
 8001378:	1b64      	subs	r4, r4, r5
 800137a:	10a4      	asrs	r4, r4, #2
 800137c:	2600      	movs	r6, #0
 800137e:	42a6      	cmp	r6, r4
 8001380:	d105      	bne.n	800138e <__libc_init_array+0x2e>
 8001382:	bd70      	pop	{r4, r5, r6, pc}
 8001384:	f855 3b04 	ldr.w	r3, [r5], #4
 8001388:	4798      	blx	r3
 800138a:	3601      	adds	r6, #1
 800138c:	e7ee      	b.n	800136c <__libc_init_array+0xc>
 800138e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001392:	4798      	blx	r3
 8001394:	3601      	adds	r6, #1
 8001396:	e7f2      	b.n	800137e <__libc_init_array+0x1e>
 8001398:	08001e2c 	.word	0x08001e2c
 800139c:	08001e2c 	.word	0x08001e2c
 80013a0:	08001e2c 	.word	0x08001e2c
 80013a4:	08001e30 	.word	0x08001e30

080013a8 <__retarget_lock_acquire_recursive>:
 80013a8:	4770      	bx	lr

080013aa <__retarget_lock_release_recursive>:
 80013aa:	4770      	bx	lr

080013ac <_free_r>:
 80013ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80013ae:	2900      	cmp	r1, #0
 80013b0:	d044      	beq.n	800143c <_free_r+0x90>
 80013b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013b6:	9001      	str	r0, [sp, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f1a1 0404 	sub.w	r4, r1, #4
 80013be:	bfb8      	it	lt
 80013c0:	18e4      	addlt	r4, r4, r3
 80013c2:	f000 f8df 	bl	8001584 <__malloc_lock>
 80013c6:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <_free_r+0x94>)
 80013c8:	9801      	ldr	r0, [sp, #4]
 80013ca:	6813      	ldr	r3, [r2, #0]
 80013cc:	b933      	cbnz	r3, 80013dc <_free_r+0x30>
 80013ce:	6063      	str	r3, [r4, #4]
 80013d0:	6014      	str	r4, [r2, #0]
 80013d2:	b003      	add	sp, #12
 80013d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80013d8:	f000 b8da 	b.w	8001590 <__malloc_unlock>
 80013dc:	42a3      	cmp	r3, r4
 80013de:	d908      	bls.n	80013f2 <_free_r+0x46>
 80013e0:	6825      	ldr	r5, [r4, #0]
 80013e2:	1961      	adds	r1, r4, r5
 80013e4:	428b      	cmp	r3, r1
 80013e6:	bf01      	itttt	eq
 80013e8:	6819      	ldreq	r1, [r3, #0]
 80013ea:	685b      	ldreq	r3, [r3, #4]
 80013ec:	1949      	addeq	r1, r1, r5
 80013ee:	6021      	streq	r1, [r4, #0]
 80013f0:	e7ed      	b.n	80013ce <_free_r+0x22>
 80013f2:	461a      	mov	r2, r3
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	b10b      	cbz	r3, 80013fc <_free_r+0x50>
 80013f8:	42a3      	cmp	r3, r4
 80013fa:	d9fa      	bls.n	80013f2 <_free_r+0x46>
 80013fc:	6811      	ldr	r1, [r2, #0]
 80013fe:	1855      	adds	r5, r2, r1
 8001400:	42a5      	cmp	r5, r4
 8001402:	d10b      	bne.n	800141c <_free_r+0x70>
 8001404:	6824      	ldr	r4, [r4, #0]
 8001406:	4421      	add	r1, r4
 8001408:	1854      	adds	r4, r2, r1
 800140a:	42a3      	cmp	r3, r4
 800140c:	6011      	str	r1, [r2, #0]
 800140e:	d1e0      	bne.n	80013d2 <_free_r+0x26>
 8001410:	681c      	ldr	r4, [r3, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	6053      	str	r3, [r2, #4]
 8001416:	440c      	add	r4, r1
 8001418:	6014      	str	r4, [r2, #0]
 800141a:	e7da      	b.n	80013d2 <_free_r+0x26>
 800141c:	d902      	bls.n	8001424 <_free_r+0x78>
 800141e:	230c      	movs	r3, #12
 8001420:	6003      	str	r3, [r0, #0]
 8001422:	e7d6      	b.n	80013d2 <_free_r+0x26>
 8001424:	6825      	ldr	r5, [r4, #0]
 8001426:	1961      	adds	r1, r4, r5
 8001428:	428b      	cmp	r3, r1
 800142a:	bf04      	itt	eq
 800142c:	6819      	ldreq	r1, [r3, #0]
 800142e:	685b      	ldreq	r3, [r3, #4]
 8001430:	6063      	str	r3, [r4, #4]
 8001432:	bf04      	itt	eq
 8001434:	1949      	addeq	r1, r1, r5
 8001436:	6021      	streq	r1, [r4, #0]
 8001438:	6054      	str	r4, [r2, #4]
 800143a:	e7ca      	b.n	80013d2 <_free_r+0x26>
 800143c:	b003      	add	sp, #12
 800143e:	bd30      	pop	{r4, r5, pc}
 8001440:	200002d0 	.word	0x200002d0

08001444 <sbrk_aligned>:
 8001444:	b570      	push	{r4, r5, r6, lr}
 8001446:	4e0e      	ldr	r6, [pc, #56]	; (8001480 <sbrk_aligned+0x3c>)
 8001448:	460c      	mov	r4, r1
 800144a:	6831      	ldr	r1, [r6, #0]
 800144c:	4605      	mov	r5, r0
 800144e:	b911      	cbnz	r1, 8001456 <sbrk_aligned+0x12>
 8001450:	f000 fba6 	bl	8001ba0 <_sbrk_r>
 8001454:	6030      	str	r0, [r6, #0]
 8001456:	4621      	mov	r1, r4
 8001458:	4628      	mov	r0, r5
 800145a:	f000 fba1 	bl	8001ba0 <_sbrk_r>
 800145e:	1c43      	adds	r3, r0, #1
 8001460:	d00a      	beq.n	8001478 <sbrk_aligned+0x34>
 8001462:	1cc4      	adds	r4, r0, #3
 8001464:	f024 0403 	bic.w	r4, r4, #3
 8001468:	42a0      	cmp	r0, r4
 800146a:	d007      	beq.n	800147c <sbrk_aligned+0x38>
 800146c:	1a21      	subs	r1, r4, r0
 800146e:	4628      	mov	r0, r5
 8001470:	f000 fb96 	bl	8001ba0 <_sbrk_r>
 8001474:	3001      	adds	r0, #1
 8001476:	d101      	bne.n	800147c <sbrk_aligned+0x38>
 8001478:	f04f 34ff 	mov.w	r4, #4294967295
 800147c:	4620      	mov	r0, r4
 800147e:	bd70      	pop	{r4, r5, r6, pc}
 8001480:	200002d4 	.word	0x200002d4

08001484 <_malloc_r>:
 8001484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001488:	1ccd      	adds	r5, r1, #3
 800148a:	f025 0503 	bic.w	r5, r5, #3
 800148e:	3508      	adds	r5, #8
 8001490:	2d0c      	cmp	r5, #12
 8001492:	bf38      	it	cc
 8001494:	250c      	movcc	r5, #12
 8001496:	2d00      	cmp	r5, #0
 8001498:	4607      	mov	r7, r0
 800149a:	db01      	blt.n	80014a0 <_malloc_r+0x1c>
 800149c:	42a9      	cmp	r1, r5
 800149e:	d905      	bls.n	80014ac <_malloc_r+0x28>
 80014a0:	230c      	movs	r3, #12
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	2600      	movs	r6, #0
 80014a6:	4630      	mov	r0, r6
 80014a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001580 <_malloc_r+0xfc>
 80014b0:	f000 f868 	bl	8001584 <__malloc_lock>
 80014b4:	f8d8 3000 	ldr.w	r3, [r8]
 80014b8:	461c      	mov	r4, r3
 80014ba:	bb5c      	cbnz	r4, 8001514 <_malloc_r+0x90>
 80014bc:	4629      	mov	r1, r5
 80014be:	4638      	mov	r0, r7
 80014c0:	f7ff ffc0 	bl	8001444 <sbrk_aligned>
 80014c4:	1c43      	adds	r3, r0, #1
 80014c6:	4604      	mov	r4, r0
 80014c8:	d155      	bne.n	8001576 <_malloc_r+0xf2>
 80014ca:	f8d8 4000 	ldr.w	r4, [r8]
 80014ce:	4626      	mov	r6, r4
 80014d0:	2e00      	cmp	r6, #0
 80014d2:	d145      	bne.n	8001560 <_malloc_r+0xdc>
 80014d4:	2c00      	cmp	r4, #0
 80014d6:	d048      	beq.n	800156a <_malloc_r+0xe6>
 80014d8:	6823      	ldr	r3, [r4, #0]
 80014da:	4631      	mov	r1, r6
 80014dc:	4638      	mov	r0, r7
 80014de:	eb04 0903 	add.w	r9, r4, r3
 80014e2:	f000 fb5d 	bl	8001ba0 <_sbrk_r>
 80014e6:	4581      	cmp	r9, r0
 80014e8:	d13f      	bne.n	800156a <_malloc_r+0xe6>
 80014ea:	6821      	ldr	r1, [r4, #0]
 80014ec:	1a6d      	subs	r5, r5, r1
 80014ee:	4629      	mov	r1, r5
 80014f0:	4638      	mov	r0, r7
 80014f2:	f7ff ffa7 	bl	8001444 <sbrk_aligned>
 80014f6:	3001      	adds	r0, #1
 80014f8:	d037      	beq.n	800156a <_malloc_r+0xe6>
 80014fa:	6823      	ldr	r3, [r4, #0]
 80014fc:	442b      	add	r3, r5
 80014fe:	6023      	str	r3, [r4, #0]
 8001500:	f8d8 3000 	ldr.w	r3, [r8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d038      	beq.n	800157a <_malloc_r+0xf6>
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	42a2      	cmp	r2, r4
 800150c:	d12b      	bne.n	8001566 <_malloc_r+0xe2>
 800150e:	2200      	movs	r2, #0
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	e00f      	b.n	8001534 <_malloc_r+0xb0>
 8001514:	6822      	ldr	r2, [r4, #0]
 8001516:	1b52      	subs	r2, r2, r5
 8001518:	d41f      	bmi.n	800155a <_malloc_r+0xd6>
 800151a:	2a0b      	cmp	r2, #11
 800151c:	d917      	bls.n	800154e <_malloc_r+0xca>
 800151e:	1961      	adds	r1, r4, r5
 8001520:	42a3      	cmp	r3, r4
 8001522:	6025      	str	r5, [r4, #0]
 8001524:	bf18      	it	ne
 8001526:	6059      	strne	r1, [r3, #4]
 8001528:	6863      	ldr	r3, [r4, #4]
 800152a:	bf08      	it	eq
 800152c:	f8c8 1000 	streq.w	r1, [r8]
 8001530:	5162      	str	r2, [r4, r5]
 8001532:	604b      	str	r3, [r1, #4]
 8001534:	4638      	mov	r0, r7
 8001536:	f104 060b 	add.w	r6, r4, #11
 800153a:	f000 f829 	bl	8001590 <__malloc_unlock>
 800153e:	f026 0607 	bic.w	r6, r6, #7
 8001542:	1d23      	adds	r3, r4, #4
 8001544:	1af2      	subs	r2, r6, r3
 8001546:	d0ae      	beq.n	80014a6 <_malloc_r+0x22>
 8001548:	1b9b      	subs	r3, r3, r6
 800154a:	50a3      	str	r3, [r4, r2]
 800154c:	e7ab      	b.n	80014a6 <_malloc_r+0x22>
 800154e:	42a3      	cmp	r3, r4
 8001550:	6862      	ldr	r2, [r4, #4]
 8001552:	d1dd      	bne.n	8001510 <_malloc_r+0x8c>
 8001554:	f8c8 2000 	str.w	r2, [r8]
 8001558:	e7ec      	b.n	8001534 <_malloc_r+0xb0>
 800155a:	4623      	mov	r3, r4
 800155c:	6864      	ldr	r4, [r4, #4]
 800155e:	e7ac      	b.n	80014ba <_malloc_r+0x36>
 8001560:	4634      	mov	r4, r6
 8001562:	6876      	ldr	r6, [r6, #4]
 8001564:	e7b4      	b.n	80014d0 <_malloc_r+0x4c>
 8001566:	4613      	mov	r3, r2
 8001568:	e7cc      	b.n	8001504 <_malloc_r+0x80>
 800156a:	230c      	movs	r3, #12
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4638      	mov	r0, r7
 8001570:	f000 f80e 	bl	8001590 <__malloc_unlock>
 8001574:	e797      	b.n	80014a6 <_malloc_r+0x22>
 8001576:	6025      	str	r5, [r4, #0]
 8001578:	e7dc      	b.n	8001534 <_malloc_r+0xb0>
 800157a:	605b      	str	r3, [r3, #4]
 800157c:	deff      	udf	#255	; 0xff
 800157e:	bf00      	nop
 8001580:	200002d0 	.word	0x200002d0

08001584 <__malloc_lock>:
 8001584:	4801      	ldr	r0, [pc, #4]	; (800158c <__malloc_lock+0x8>)
 8001586:	f7ff bf0f 	b.w	80013a8 <__retarget_lock_acquire_recursive>
 800158a:	bf00      	nop
 800158c:	200002cc 	.word	0x200002cc

08001590 <__malloc_unlock>:
 8001590:	4801      	ldr	r0, [pc, #4]	; (8001598 <__malloc_unlock+0x8>)
 8001592:	f7ff bf0a 	b.w	80013aa <__retarget_lock_release_recursive>
 8001596:	bf00      	nop
 8001598:	200002cc 	.word	0x200002cc

0800159c <__ssputs_r>:
 800159c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015a0:	688e      	ldr	r6, [r1, #8]
 80015a2:	461f      	mov	r7, r3
 80015a4:	42be      	cmp	r6, r7
 80015a6:	680b      	ldr	r3, [r1, #0]
 80015a8:	4682      	mov	sl, r0
 80015aa:	460c      	mov	r4, r1
 80015ac:	4690      	mov	r8, r2
 80015ae:	d82c      	bhi.n	800160a <__ssputs_r+0x6e>
 80015b0:	898a      	ldrh	r2, [r1, #12]
 80015b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80015b6:	d026      	beq.n	8001606 <__ssputs_r+0x6a>
 80015b8:	6965      	ldr	r5, [r4, #20]
 80015ba:	6909      	ldr	r1, [r1, #16]
 80015bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80015c0:	eba3 0901 	sub.w	r9, r3, r1
 80015c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80015c8:	1c7b      	adds	r3, r7, #1
 80015ca:	444b      	add	r3, r9
 80015cc:	106d      	asrs	r5, r5, #1
 80015ce:	429d      	cmp	r5, r3
 80015d0:	bf38      	it	cc
 80015d2:	461d      	movcc	r5, r3
 80015d4:	0553      	lsls	r3, r2, #21
 80015d6:	d527      	bpl.n	8001628 <__ssputs_r+0x8c>
 80015d8:	4629      	mov	r1, r5
 80015da:	f7ff ff53 	bl	8001484 <_malloc_r>
 80015de:	4606      	mov	r6, r0
 80015e0:	b360      	cbz	r0, 800163c <__ssputs_r+0xa0>
 80015e2:	6921      	ldr	r1, [r4, #16]
 80015e4:	464a      	mov	r2, r9
 80015e6:	f000 faeb 	bl	8001bc0 <memcpy>
 80015ea:	89a3      	ldrh	r3, [r4, #12]
 80015ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80015f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f4:	81a3      	strh	r3, [r4, #12]
 80015f6:	6126      	str	r6, [r4, #16]
 80015f8:	6165      	str	r5, [r4, #20]
 80015fa:	444e      	add	r6, r9
 80015fc:	eba5 0509 	sub.w	r5, r5, r9
 8001600:	6026      	str	r6, [r4, #0]
 8001602:	60a5      	str	r5, [r4, #8]
 8001604:	463e      	mov	r6, r7
 8001606:	42be      	cmp	r6, r7
 8001608:	d900      	bls.n	800160c <__ssputs_r+0x70>
 800160a:	463e      	mov	r6, r7
 800160c:	6820      	ldr	r0, [r4, #0]
 800160e:	4632      	mov	r2, r6
 8001610:	4641      	mov	r1, r8
 8001612:	f000 faab 	bl	8001b6c <memmove>
 8001616:	68a3      	ldr	r3, [r4, #8]
 8001618:	1b9b      	subs	r3, r3, r6
 800161a:	60a3      	str	r3, [r4, #8]
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	4433      	add	r3, r6
 8001620:	6023      	str	r3, [r4, #0]
 8001622:	2000      	movs	r0, #0
 8001624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001628:	462a      	mov	r2, r5
 800162a:	f000 fad7 	bl	8001bdc <_realloc_r>
 800162e:	4606      	mov	r6, r0
 8001630:	2800      	cmp	r0, #0
 8001632:	d1e0      	bne.n	80015f6 <__ssputs_r+0x5a>
 8001634:	6921      	ldr	r1, [r4, #16]
 8001636:	4650      	mov	r0, sl
 8001638:	f7ff feb8 	bl	80013ac <_free_r>
 800163c:	230c      	movs	r3, #12
 800163e:	f8ca 3000 	str.w	r3, [sl]
 8001642:	89a3      	ldrh	r3, [r4, #12]
 8001644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001648:	81a3      	strh	r3, [r4, #12]
 800164a:	f04f 30ff 	mov.w	r0, #4294967295
 800164e:	e7e9      	b.n	8001624 <__ssputs_r+0x88>

08001650 <_svfiprintf_r>:
 8001650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001654:	4698      	mov	r8, r3
 8001656:	898b      	ldrh	r3, [r1, #12]
 8001658:	061b      	lsls	r3, r3, #24
 800165a:	b09d      	sub	sp, #116	; 0x74
 800165c:	4607      	mov	r7, r0
 800165e:	460d      	mov	r5, r1
 8001660:	4614      	mov	r4, r2
 8001662:	d50e      	bpl.n	8001682 <_svfiprintf_r+0x32>
 8001664:	690b      	ldr	r3, [r1, #16]
 8001666:	b963      	cbnz	r3, 8001682 <_svfiprintf_r+0x32>
 8001668:	2140      	movs	r1, #64	; 0x40
 800166a:	f7ff ff0b 	bl	8001484 <_malloc_r>
 800166e:	6028      	str	r0, [r5, #0]
 8001670:	6128      	str	r0, [r5, #16]
 8001672:	b920      	cbnz	r0, 800167e <_svfiprintf_r+0x2e>
 8001674:	230c      	movs	r3, #12
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	e0d0      	b.n	8001820 <_svfiprintf_r+0x1d0>
 800167e:	2340      	movs	r3, #64	; 0x40
 8001680:	616b      	str	r3, [r5, #20]
 8001682:	2300      	movs	r3, #0
 8001684:	9309      	str	r3, [sp, #36]	; 0x24
 8001686:	2320      	movs	r3, #32
 8001688:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800168c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001690:	2330      	movs	r3, #48	; 0x30
 8001692:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001838 <_svfiprintf_r+0x1e8>
 8001696:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800169a:	f04f 0901 	mov.w	r9, #1
 800169e:	4623      	mov	r3, r4
 80016a0:	469a      	mov	sl, r3
 80016a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80016a6:	b10a      	cbz	r2, 80016ac <_svfiprintf_r+0x5c>
 80016a8:	2a25      	cmp	r2, #37	; 0x25
 80016aa:	d1f9      	bne.n	80016a0 <_svfiprintf_r+0x50>
 80016ac:	ebba 0b04 	subs.w	fp, sl, r4
 80016b0:	d00b      	beq.n	80016ca <_svfiprintf_r+0x7a>
 80016b2:	465b      	mov	r3, fp
 80016b4:	4622      	mov	r2, r4
 80016b6:	4629      	mov	r1, r5
 80016b8:	4638      	mov	r0, r7
 80016ba:	f7ff ff6f 	bl	800159c <__ssputs_r>
 80016be:	3001      	adds	r0, #1
 80016c0:	f000 80a9 	beq.w	8001816 <_svfiprintf_r+0x1c6>
 80016c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016c6:	445a      	add	r2, fp
 80016c8:	9209      	str	r2, [sp, #36]	; 0x24
 80016ca:	f89a 3000 	ldrb.w	r3, [sl]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 80a1 	beq.w	8001816 <_svfiprintf_r+0x1c6>
 80016d4:	2300      	movs	r3, #0
 80016d6:	f04f 32ff 	mov.w	r2, #4294967295
 80016da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80016de:	f10a 0a01 	add.w	sl, sl, #1
 80016e2:	9304      	str	r3, [sp, #16]
 80016e4:	9307      	str	r3, [sp, #28]
 80016e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80016ea:	931a      	str	r3, [sp, #104]	; 0x68
 80016ec:	4654      	mov	r4, sl
 80016ee:	2205      	movs	r2, #5
 80016f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016f4:	4850      	ldr	r0, [pc, #320]	; (8001838 <_svfiprintf_r+0x1e8>)
 80016f6:	f7fe fd6b 	bl	80001d0 <memchr>
 80016fa:	9a04      	ldr	r2, [sp, #16]
 80016fc:	b9d8      	cbnz	r0, 8001736 <_svfiprintf_r+0xe6>
 80016fe:	06d0      	lsls	r0, r2, #27
 8001700:	bf44      	itt	mi
 8001702:	2320      	movmi	r3, #32
 8001704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001708:	0711      	lsls	r1, r2, #28
 800170a:	bf44      	itt	mi
 800170c:	232b      	movmi	r3, #43	; 0x2b
 800170e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001712:	f89a 3000 	ldrb.w	r3, [sl]
 8001716:	2b2a      	cmp	r3, #42	; 0x2a
 8001718:	d015      	beq.n	8001746 <_svfiprintf_r+0xf6>
 800171a:	9a07      	ldr	r2, [sp, #28]
 800171c:	4654      	mov	r4, sl
 800171e:	2000      	movs	r0, #0
 8001720:	f04f 0c0a 	mov.w	ip, #10
 8001724:	4621      	mov	r1, r4
 8001726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800172a:	3b30      	subs	r3, #48	; 0x30
 800172c:	2b09      	cmp	r3, #9
 800172e:	d94d      	bls.n	80017cc <_svfiprintf_r+0x17c>
 8001730:	b1b0      	cbz	r0, 8001760 <_svfiprintf_r+0x110>
 8001732:	9207      	str	r2, [sp, #28]
 8001734:	e014      	b.n	8001760 <_svfiprintf_r+0x110>
 8001736:	eba0 0308 	sub.w	r3, r0, r8
 800173a:	fa09 f303 	lsl.w	r3, r9, r3
 800173e:	4313      	orrs	r3, r2
 8001740:	9304      	str	r3, [sp, #16]
 8001742:	46a2      	mov	sl, r4
 8001744:	e7d2      	b.n	80016ec <_svfiprintf_r+0x9c>
 8001746:	9b03      	ldr	r3, [sp, #12]
 8001748:	1d19      	adds	r1, r3, #4
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	9103      	str	r1, [sp, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	bfbb      	ittet	lt
 8001752:	425b      	neglt	r3, r3
 8001754:	f042 0202 	orrlt.w	r2, r2, #2
 8001758:	9307      	strge	r3, [sp, #28]
 800175a:	9307      	strlt	r3, [sp, #28]
 800175c:	bfb8      	it	lt
 800175e:	9204      	strlt	r2, [sp, #16]
 8001760:	7823      	ldrb	r3, [r4, #0]
 8001762:	2b2e      	cmp	r3, #46	; 0x2e
 8001764:	d10c      	bne.n	8001780 <_svfiprintf_r+0x130>
 8001766:	7863      	ldrb	r3, [r4, #1]
 8001768:	2b2a      	cmp	r3, #42	; 0x2a
 800176a:	d134      	bne.n	80017d6 <_svfiprintf_r+0x186>
 800176c:	9b03      	ldr	r3, [sp, #12]
 800176e:	1d1a      	adds	r2, r3, #4
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	9203      	str	r2, [sp, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	bfb8      	it	lt
 8001778:	f04f 33ff 	movlt.w	r3, #4294967295
 800177c:	3402      	adds	r4, #2
 800177e:	9305      	str	r3, [sp, #20]
 8001780:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001848 <_svfiprintf_r+0x1f8>
 8001784:	7821      	ldrb	r1, [r4, #0]
 8001786:	2203      	movs	r2, #3
 8001788:	4650      	mov	r0, sl
 800178a:	f7fe fd21 	bl	80001d0 <memchr>
 800178e:	b138      	cbz	r0, 80017a0 <_svfiprintf_r+0x150>
 8001790:	9b04      	ldr	r3, [sp, #16]
 8001792:	eba0 000a 	sub.w	r0, r0, sl
 8001796:	2240      	movs	r2, #64	; 0x40
 8001798:	4082      	lsls	r2, r0
 800179a:	4313      	orrs	r3, r2
 800179c:	3401      	adds	r4, #1
 800179e:	9304      	str	r3, [sp, #16]
 80017a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017a4:	4825      	ldr	r0, [pc, #148]	; (800183c <_svfiprintf_r+0x1ec>)
 80017a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80017aa:	2206      	movs	r2, #6
 80017ac:	f7fe fd10 	bl	80001d0 <memchr>
 80017b0:	2800      	cmp	r0, #0
 80017b2:	d038      	beq.n	8001826 <_svfiprintf_r+0x1d6>
 80017b4:	4b22      	ldr	r3, [pc, #136]	; (8001840 <_svfiprintf_r+0x1f0>)
 80017b6:	bb1b      	cbnz	r3, 8001800 <_svfiprintf_r+0x1b0>
 80017b8:	9b03      	ldr	r3, [sp, #12]
 80017ba:	3307      	adds	r3, #7
 80017bc:	f023 0307 	bic.w	r3, r3, #7
 80017c0:	3308      	adds	r3, #8
 80017c2:	9303      	str	r3, [sp, #12]
 80017c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017c6:	4433      	add	r3, r6
 80017c8:	9309      	str	r3, [sp, #36]	; 0x24
 80017ca:	e768      	b.n	800169e <_svfiprintf_r+0x4e>
 80017cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80017d0:	460c      	mov	r4, r1
 80017d2:	2001      	movs	r0, #1
 80017d4:	e7a6      	b.n	8001724 <_svfiprintf_r+0xd4>
 80017d6:	2300      	movs	r3, #0
 80017d8:	3401      	adds	r4, #1
 80017da:	9305      	str	r3, [sp, #20]
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 0c0a 	mov.w	ip, #10
 80017e2:	4620      	mov	r0, r4
 80017e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80017e8:	3a30      	subs	r2, #48	; 0x30
 80017ea:	2a09      	cmp	r2, #9
 80017ec:	d903      	bls.n	80017f6 <_svfiprintf_r+0x1a6>
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0c6      	beq.n	8001780 <_svfiprintf_r+0x130>
 80017f2:	9105      	str	r1, [sp, #20]
 80017f4:	e7c4      	b.n	8001780 <_svfiprintf_r+0x130>
 80017f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80017fa:	4604      	mov	r4, r0
 80017fc:	2301      	movs	r3, #1
 80017fe:	e7f0      	b.n	80017e2 <_svfiprintf_r+0x192>
 8001800:	ab03      	add	r3, sp, #12
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	462a      	mov	r2, r5
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <_svfiprintf_r+0x1f4>)
 8001808:	a904      	add	r1, sp, #16
 800180a:	4638      	mov	r0, r7
 800180c:	f3af 8000 	nop.w
 8001810:	1c42      	adds	r2, r0, #1
 8001812:	4606      	mov	r6, r0
 8001814:	d1d6      	bne.n	80017c4 <_svfiprintf_r+0x174>
 8001816:	89ab      	ldrh	r3, [r5, #12]
 8001818:	065b      	lsls	r3, r3, #25
 800181a:	f53f af2d 	bmi.w	8001678 <_svfiprintf_r+0x28>
 800181e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001820:	b01d      	add	sp, #116	; 0x74
 8001822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001826:	ab03      	add	r3, sp, #12
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	462a      	mov	r2, r5
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <_svfiprintf_r+0x1f4>)
 800182e:	a904      	add	r1, sp, #16
 8001830:	4638      	mov	r0, r7
 8001832:	f000 f879 	bl	8001928 <_printf_i>
 8001836:	e7eb      	b.n	8001810 <_svfiprintf_r+0x1c0>
 8001838:	08001df9 	.word	0x08001df9
 800183c:	08001e03 	.word	0x08001e03
 8001840:	00000000 	.word	0x00000000
 8001844:	0800159d 	.word	0x0800159d
 8001848:	08001dff 	.word	0x08001dff

0800184c <_printf_common>:
 800184c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001850:	4616      	mov	r6, r2
 8001852:	4699      	mov	r9, r3
 8001854:	688a      	ldr	r2, [r1, #8]
 8001856:	690b      	ldr	r3, [r1, #16]
 8001858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800185c:	4293      	cmp	r3, r2
 800185e:	bfb8      	it	lt
 8001860:	4613      	movlt	r3, r2
 8001862:	6033      	str	r3, [r6, #0]
 8001864:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001868:	4607      	mov	r7, r0
 800186a:	460c      	mov	r4, r1
 800186c:	b10a      	cbz	r2, 8001872 <_printf_common+0x26>
 800186e:	3301      	adds	r3, #1
 8001870:	6033      	str	r3, [r6, #0]
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	0699      	lsls	r1, r3, #26
 8001876:	bf42      	ittt	mi
 8001878:	6833      	ldrmi	r3, [r6, #0]
 800187a:	3302      	addmi	r3, #2
 800187c:	6033      	strmi	r3, [r6, #0]
 800187e:	6825      	ldr	r5, [r4, #0]
 8001880:	f015 0506 	ands.w	r5, r5, #6
 8001884:	d106      	bne.n	8001894 <_printf_common+0x48>
 8001886:	f104 0a19 	add.w	sl, r4, #25
 800188a:	68e3      	ldr	r3, [r4, #12]
 800188c:	6832      	ldr	r2, [r6, #0]
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	42ab      	cmp	r3, r5
 8001892:	dc26      	bgt.n	80018e2 <_printf_common+0x96>
 8001894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001898:	1e13      	subs	r3, r2, #0
 800189a:	6822      	ldr	r2, [r4, #0]
 800189c:	bf18      	it	ne
 800189e:	2301      	movne	r3, #1
 80018a0:	0692      	lsls	r2, r2, #26
 80018a2:	d42b      	bmi.n	80018fc <_printf_common+0xb0>
 80018a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80018a8:	4649      	mov	r1, r9
 80018aa:	4638      	mov	r0, r7
 80018ac:	47c0      	blx	r8
 80018ae:	3001      	adds	r0, #1
 80018b0:	d01e      	beq.n	80018f0 <_printf_common+0xa4>
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	6922      	ldr	r2, [r4, #16]
 80018b6:	f003 0306 	and.w	r3, r3, #6
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf02      	ittt	eq
 80018be:	68e5      	ldreq	r5, [r4, #12]
 80018c0:	6833      	ldreq	r3, [r6, #0]
 80018c2:	1aed      	subeq	r5, r5, r3
 80018c4:	68a3      	ldr	r3, [r4, #8]
 80018c6:	bf0c      	ite	eq
 80018c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80018cc:	2500      	movne	r5, #0
 80018ce:	4293      	cmp	r3, r2
 80018d0:	bfc4      	itt	gt
 80018d2:	1a9b      	subgt	r3, r3, r2
 80018d4:	18ed      	addgt	r5, r5, r3
 80018d6:	2600      	movs	r6, #0
 80018d8:	341a      	adds	r4, #26
 80018da:	42b5      	cmp	r5, r6
 80018dc:	d11a      	bne.n	8001914 <_printf_common+0xc8>
 80018de:	2000      	movs	r0, #0
 80018e0:	e008      	b.n	80018f4 <_printf_common+0xa8>
 80018e2:	2301      	movs	r3, #1
 80018e4:	4652      	mov	r2, sl
 80018e6:	4649      	mov	r1, r9
 80018e8:	4638      	mov	r0, r7
 80018ea:	47c0      	blx	r8
 80018ec:	3001      	adds	r0, #1
 80018ee:	d103      	bne.n	80018f8 <_printf_common+0xac>
 80018f0:	f04f 30ff 	mov.w	r0, #4294967295
 80018f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018f8:	3501      	adds	r5, #1
 80018fa:	e7c6      	b.n	800188a <_printf_common+0x3e>
 80018fc:	18e1      	adds	r1, r4, r3
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	2030      	movs	r0, #48	; 0x30
 8001902:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001906:	4422      	add	r2, r4
 8001908:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800190c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001910:	3302      	adds	r3, #2
 8001912:	e7c7      	b.n	80018a4 <_printf_common+0x58>
 8001914:	2301      	movs	r3, #1
 8001916:	4622      	mov	r2, r4
 8001918:	4649      	mov	r1, r9
 800191a:	4638      	mov	r0, r7
 800191c:	47c0      	blx	r8
 800191e:	3001      	adds	r0, #1
 8001920:	d0e6      	beq.n	80018f0 <_printf_common+0xa4>
 8001922:	3601      	adds	r6, #1
 8001924:	e7d9      	b.n	80018da <_printf_common+0x8e>
	...

08001928 <_printf_i>:
 8001928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800192c:	7e0f      	ldrb	r7, [r1, #24]
 800192e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001930:	2f78      	cmp	r7, #120	; 0x78
 8001932:	4691      	mov	r9, r2
 8001934:	4680      	mov	r8, r0
 8001936:	460c      	mov	r4, r1
 8001938:	469a      	mov	sl, r3
 800193a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800193e:	d807      	bhi.n	8001950 <_printf_i+0x28>
 8001940:	2f62      	cmp	r7, #98	; 0x62
 8001942:	d80a      	bhi.n	800195a <_printf_i+0x32>
 8001944:	2f00      	cmp	r7, #0
 8001946:	f000 80d4 	beq.w	8001af2 <_printf_i+0x1ca>
 800194a:	2f58      	cmp	r7, #88	; 0x58
 800194c:	f000 80c0 	beq.w	8001ad0 <_printf_i+0x1a8>
 8001950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001958:	e03a      	b.n	80019d0 <_printf_i+0xa8>
 800195a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800195e:	2b15      	cmp	r3, #21
 8001960:	d8f6      	bhi.n	8001950 <_printf_i+0x28>
 8001962:	a101      	add	r1, pc, #4	; (adr r1, 8001968 <_printf_i+0x40>)
 8001964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001968:	080019c1 	.word	0x080019c1
 800196c:	080019d5 	.word	0x080019d5
 8001970:	08001951 	.word	0x08001951
 8001974:	08001951 	.word	0x08001951
 8001978:	08001951 	.word	0x08001951
 800197c:	08001951 	.word	0x08001951
 8001980:	080019d5 	.word	0x080019d5
 8001984:	08001951 	.word	0x08001951
 8001988:	08001951 	.word	0x08001951
 800198c:	08001951 	.word	0x08001951
 8001990:	08001951 	.word	0x08001951
 8001994:	08001ad9 	.word	0x08001ad9
 8001998:	08001a01 	.word	0x08001a01
 800199c:	08001a93 	.word	0x08001a93
 80019a0:	08001951 	.word	0x08001951
 80019a4:	08001951 	.word	0x08001951
 80019a8:	08001afb 	.word	0x08001afb
 80019ac:	08001951 	.word	0x08001951
 80019b0:	08001a01 	.word	0x08001a01
 80019b4:	08001951 	.word	0x08001951
 80019b8:	08001951 	.word	0x08001951
 80019bc:	08001a9b 	.word	0x08001a9b
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	1d1a      	adds	r2, r3, #4
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	602a      	str	r2, [r5, #0]
 80019c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80019d0:	2301      	movs	r3, #1
 80019d2:	e09f      	b.n	8001b14 <_printf_i+0x1ec>
 80019d4:	6820      	ldr	r0, [r4, #0]
 80019d6:	682b      	ldr	r3, [r5, #0]
 80019d8:	0607      	lsls	r7, r0, #24
 80019da:	f103 0104 	add.w	r1, r3, #4
 80019de:	6029      	str	r1, [r5, #0]
 80019e0:	d501      	bpl.n	80019e6 <_printf_i+0xbe>
 80019e2:	681e      	ldr	r6, [r3, #0]
 80019e4:	e003      	b.n	80019ee <_printf_i+0xc6>
 80019e6:	0646      	lsls	r6, r0, #25
 80019e8:	d5fb      	bpl.n	80019e2 <_printf_i+0xba>
 80019ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80019ee:	2e00      	cmp	r6, #0
 80019f0:	da03      	bge.n	80019fa <_printf_i+0xd2>
 80019f2:	232d      	movs	r3, #45	; 0x2d
 80019f4:	4276      	negs	r6, r6
 80019f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019fa:	485a      	ldr	r0, [pc, #360]	; (8001b64 <_printf_i+0x23c>)
 80019fc:	230a      	movs	r3, #10
 80019fe:	e012      	b.n	8001a26 <_printf_i+0xfe>
 8001a00:	682b      	ldr	r3, [r5, #0]
 8001a02:	6820      	ldr	r0, [r4, #0]
 8001a04:	1d19      	adds	r1, r3, #4
 8001a06:	6029      	str	r1, [r5, #0]
 8001a08:	0605      	lsls	r5, r0, #24
 8001a0a:	d501      	bpl.n	8001a10 <_printf_i+0xe8>
 8001a0c:	681e      	ldr	r6, [r3, #0]
 8001a0e:	e002      	b.n	8001a16 <_printf_i+0xee>
 8001a10:	0641      	lsls	r1, r0, #25
 8001a12:	d5fb      	bpl.n	8001a0c <_printf_i+0xe4>
 8001a14:	881e      	ldrh	r6, [r3, #0]
 8001a16:	4853      	ldr	r0, [pc, #332]	; (8001b64 <_printf_i+0x23c>)
 8001a18:	2f6f      	cmp	r7, #111	; 0x6f
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2308      	moveq	r3, #8
 8001a1e:	230a      	movne	r3, #10
 8001a20:	2100      	movs	r1, #0
 8001a22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001a26:	6865      	ldr	r5, [r4, #4]
 8001a28:	60a5      	str	r5, [r4, #8]
 8001a2a:	2d00      	cmp	r5, #0
 8001a2c:	bfa2      	ittt	ge
 8001a2e:	6821      	ldrge	r1, [r4, #0]
 8001a30:	f021 0104 	bicge.w	r1, r1, #4
 8001a34:	6021      	strge	r1, [r4, #0]
 8001a36:	b90e      	cbnz	r6, 8001a3c <_printf_i+0x114>
 8001a38:	2d00      	cmp	r5, #0
 8001a3a:	d04b      	beq.n	8001ad4 <_printf_i+0x1ac>
 8001a3c:	4615      	mov	r5, r2
 8001a3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001a42:	fb03 6711 	mls	r7, r3, r1, r6
 8001a46:	5dc7      	ldrb	r7, [r0, r7]
 8001a48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001a4c:	4637      	mov	r7, r6
 8001a4e:	42bb      	cmp	r3, r7
 8001a50:	460e      	mov	r6, r1
 8001a52:	d9f4      	bls.n	8001a3e <_printf_i+0x116>
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d10b      	bne.n	8001a70 <_printf_i+0x148>
 8001a58:	6823      	ldr	r3, [r4, #0]
 8001a5a:	07de      	lsls	r6, r3, #31
 8001a5c:	d508      	bpl.n	8001a70 <_printf_i+0x148>
 8001a5e:	6923      	ldr	r3, [r4, #16]
 8001a60:	6861      	ldr	r1, [r4, #4]
 8001a62:	4299      	cmp	r1, r3
 8001a64:	bfde      	ittt	le
 8001a66:	2330      	movle	r3, #48	; 0x30
 8001a68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001a6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001a70:	1b52      	subs	r2, r2, r5
 8001a72:	6122      	str	r2, [r4, #16]
 8001a74:	f8cd a000 	str.w	sl, [sp]
 8001a78:	464b      	mov	r3, r9
 8001a7a:	aa03      	add	r2, sp, #12
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	4640      	mov	r0, r8
 8001a80:	f7ff fee4 	bl	800184c <_printf_common>
 8001a84:	3001      	adds	r0, #1
 8001a86:	d14a      	bne.n	8001b1e <_printf_i+0x1f6>
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	b004      	add	sp, #16
 8001a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	f043 0320 	orr.w	r3, r3, #32
 8001a98:	6023      	str	r3, [r4, #0]
 8001a9a:	4833      	ldr	r0, [pc, #204]	; (8001b68 <_printf_i+0x240>)
 8001a9c:	2778      	movs	r7, #120	; 0x78
 8001a9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	6829      	ldr	r1, [r5, #0]
 8001aa6:	061f      	lsls	r7, r3, #24
 8001aa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8001aac:	d402      	bmi.n	8001ab4 <_printf_i+0x18c>
 8001aae:	065f      	lsls	r7, r3, #25
 8001ab0:	bf48      	it	mi
 8001ab2:	b2b6      	uxthmi	r6, r6
 8001ab4:	07df      	lsls	r7, r3, #31
 8001ab6:	bf48      	it	mi
 8001ab8:	f043 0320 	orrmi.w	r3, r3, #32
 8001abc:	6029      	str	r1, [r5, #0]
 8001abe:	bf48      	it	mi
 8001ac0:	6023      	strmi	r3, [r4, #0]
 8001ac2:	b91e      	cbnz	r6, 8001acc <_printf_i+0x1a4>
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	f023 0320 	bic.w	r3, r3, #32
 8001aca:	6023      	str	r3, [r4, #0]
 8001acc:	2310      	movs	r3, #16
 8001ace:	e7a7      	b.n	8001a20 <_printf_i+0xf8>
 8001ad0:	4824      	ldr	r0, [pc, #144]	; (8001b64 <_printf_i+0x23c>)
 8001ad2:	e7e4      	b.n	8001a9e <_printf_i+0x176>
 8001ad4:	4615      	mov	r5, r2
 8001ad6:	e7bd      	b.n	8001a54 <_printf_i+0x12c>
 8001ad8:	682b      	ldr	r3, [r5, #0]
 8001ada:	6826      	ldr	r6, [r4, #0]
 8001adc:	6961      	ldr	r1, [r4, #20]
 8001ade:	1d18      	adds	r0, r3, #4
 8001ae0:	6028      	str	r0, [r5, #0]
 8001ae2:	0635      	lsls	r5, r6, #24
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	d501      	bpl.n	8001aec <_printf_i+0x1c4>
 8001ae8:	6019      	str	r1, [r3, #0]
 8001aea:	e002      	b.n	8001af2 <_printf_i+0x1ca>
 8001aec:	0670      	lsls	r0, r6, #25
 8001aee:	d5fb      	bpl.n	8001ae8 <_printf_i+0x1c0>
 8001af0:	8019      	strh	r1, [r3, #0]
 8001af2:	2300      	movs	r3, #0
 8001af4:	6123      	str	r3, [r4, #16]
 8001af6:	4615      	mov	r5, r2
 8001af8:	e7bc      	b.n	8001a74 <_printf_i+0x14c>
 8001afa:	682b      	ldr	r3, [r5, #0]
 8001afc:	1d1a      	adds	r2, r3, #4
 8001afe:	602a      	str	r2, [r5, #0]
 8001b00:	681d      	ldr	r5, [r3, #0]
 8001b02:	6862      	ldr	r2, [r4, #4]
 8001b04:	2100      	movs	r1, #0
 8001b06:	4628      	mov	r0, r5
 8001b08:	f7fe fb62 	bl	80001d0 <memchr>
 8001b0c:	b108      	cbz	r0, 8001b12 <_printf_i+0x1ea>
 8001b0e:	1b40      	subs	r0, r0, r5
 8001b10:	6060      	str	r0, [r4, #4]
 8001b12:	6863      	ldr	r3, [r4, #4]
 8001b14:	6123      	str	r3, [r4, #16]
 8001b16:	2300      	movs	r3, #0
 8001b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b1c:	e7aa      	b.n	8001a74 <_printf_i+0x14c>
 8001b1e:	6923      	ldr	r3, [r4, #16]
 8001b20:	462a      	mov	r2, r5
 8001b22:	4649      	mov	r1, r9
 8001b24:	4640      	mov	r0, r8
 8001b26:	47d0      	blx	sl
 8001b28:	3001      	adds	r0, #1
 8001b2a:	d0ad      	beq.n	8001a88 <_printf_i+0x160>
 8001b2c:	6823      	ldr	r3, [r4, #0]
 8001b2e:	079b      	lsls	r3, r3, #30
 8001b30:	d413      	bmi.n	8001b5a <_printf_i+0x232>
 8001b32:	68e0      	ldr	r0, [r4, #12]
 8001b34:	9b03      	ldr	r3, [sp, #12]
 8001b36:	4298      	cmp	r0, r3
 8001b38:	bfb8      	it	lt
 8001b3a:	4618      	movlt	r0, r3
 8001b3c:	e7a6      	b.n	8001a8c <_printf_i+0x164>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	4632      	mov	r2, r6
 8001b42:	4649      	mov	r1, r9
 8001b44:	4640      	mov	r0, r8
 8001b46:	47d0      	blx	sl
 8001b48:	3001      	adds	r0, #1
 8001b4a:	d09d      	beq.n	8001a88 <_printf_i+0x160>
 8001b4c:	3501      	adds	r5, #1
 8001b4e:	68e3      	ldr	r3, [r4, #12]
 8001b50:	9903      	ldr	r1, [sp, #12]
 8001b52:	1a5b      	subs	r3, r3, r1
 8001b54:	42ab      	cmp	r3, r5
 8001b56:	dcf2      	bgt.n	8001b3e <_printf_i+0x216>
 8001b58:	e7eb      	b.n	8001b32 <_printf_i+0x20a>
 8001b5a:	2500      	movs	r5, #0
 8001b5c:	f104 0619 	add.w	r6, r4, #25
 8001b60:	e7f5      	b.n	8001b4e <_printf_i+0x226>
 8001b62:	bf00      	nop
 8001b64:	08001e0a 	.word	0x08001e0a
 8001b68:	08001e1b 	.word	0x08001e1b

08001b6c <memmove>:
 8001b6c:	4288      	cmp	r0, r1
 8001b6e:	b510      	push	{r4, lr}
 8001b70:	eb01 0402 	add.w	r4, r1, r2
 8001b74:	d902      	bls.n	8001b7c <memmove+0x10>
 8001b76:	4284      	cmp	r4, r0
 8001b78:	4623      	mov	r3, r4
 8001b7a:	d807      	bhi.n	8001b8c <memmove+0x20>
 8001b7c:	1e43      	subs	r3, r0, #1
 8001b7e:	42a1      	cmp	r1, r4
 8001b80:	d008      	beq.n	8001b94 <memmove+0x28>
 8001b82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001b86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001b8a:	e7f8      	b.n	8001b7e <memmove+0x12>
 8001b8c:	4402      	add	r2, r0
 8001b8e:	4601      	mov	r1, r0
 8001b90:	428a      	cmp	r2, r1
 8001b92:	d100      	bne.n	8001b96 <memmove+0x2a>
 8001b94:	bd10      	pop	{r4, pc}
 8001b96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001b9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001b9e:	e7f7      	b.n	8001b90 <memmove+0x24>

08001ba0 <_sbrk_r>:
 8001ba0:	b538      	push	{r3, r4, r5, lr}
 8001ba2:	4d06      	ldr	r5, [pc, #24]	; (8001bbc <_sbrk_r+0x1c>)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	4604      	mov	r4, r0
 8001ba8:	4608      	mov	r0, r1
 8001baa:	602b      	str	r3, [r5, #0]
 8001bac:	f7fe ffee 	bl	8000b8c <_sbrk>
 8001bb0:	1c43      	adds	r3, r0, #1
 8001bb2:	d102      	bne.n	8001bba <_sbrk_r+0x1a>
 8001bb4:	682b      	ldr	r3, [r5, #0]
 8001bb6:	b103      	cbz	r3, 8001bba <_sbrk_r+0x1a>
 8001bb8:	6023      	str	r3, [r4, #0]
 8001bba:	bd38      	pop	{r3, r4, r5, pc}
 8001bbc:	200002c8 	.word	0x200002c8

08001bc0 <memcpy>:
 8001bc0:	440a      	add	r2, r1
 8001bc2:	4291      	cmp	r1, r2
 8001bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8001bc8:	d100      	bne.n	8001bcc <memcpy+0xc>
 8001bca:	4770      	bx	lr
 8001bcc:	b510      	push	{r4, lr}
 8001bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001bd6:	4291      	cmp	r1, r2
 8001bd8:	d1f9      	bne.n	8001bce <memcpy+0xe>
 8001bda:	bd10      	pop	{r4, pc}

08001bdc <_realloc_r>:
 8001bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001be0:	4680      	mov	r8, r0
 8001be2:	4614      	mov	r4, r2
 8001be4:	460e      	mov	r6, r1
 8001be6:	b921      	cbnz	r1, 8001bf2 <_realloc_r+0x16>
 8001be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001bec:	4611      	mov	r1, r2
 8001bee:	f7ff bc49 	b.w	8001484 <_malloc_r>
 8001bf2:	b92a      	cbnz	r2, 8001c00 <_realloc_r+0x24>
 8001bf4:	f7ff fbda 	bl	80013ac <_free_r>
 8001bf8:	4625      	mov	r5, r4
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c00:	f000 f81b 	bl	8001c3a <_malloc_usable_size_r>
 8001c04:	4284      	cmp	r4, r0
 8001c06:	4607      	mov	r7, r0
 8001c08:	d802      	bhi.n	8001c10 <_realloc_r+0x34>
 8001c0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001c0e:	d812      	bhi.n	8001c36 <_realloc_r+0x5a>
 8001c10:	4621      	mov	r1, r4
 8001c12:	4640      	mov	r0, r8
 8001c14:	f7ff fc36 	bl	8001484 <_malloc_r>
 8001c18:	4605      	mov	r5, r0
 8001c1a:	2800      	cmp	r0, #0
 8001c1c:	d0ed      	beq.n	8001bfa <_realloc_r+0x1e>
 8001c1e:	42bc      	cmp	r4, r7
 8001c20:	4622      	mov	r2, r4
 8001c22:	4631      	mov	r1, r6
 8001c24:	bf28      	it	cs
 8001c26:	463a      	movcs	r2, r7
 8001c28:	f7ff ffca 	bl	8001bc0 <memcpy>
 8001c2c:	4631      	mov	r1, r6
 8001c2e:	4640      	mov	r0, r8
 8001c30:	f7ff fbbc 	bl	80013ac <_free_r>
 8001c34:	e7e1      	b.n	8001bfa <_realloc_r+0x1e>
 8001c36:	4635      	mov	r5, r6
 8001c38:	e7df      	b.n	8001bfa <_realloc_r+0x1e>

08001c3a <_malloc_usable_size_r>:
 8001c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c3e:	1f18      	subs	r0, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bfbc      	itt	lt
 8001c44:	580b      	ldrlt	r3, [r1, r0]
 8001c46:	18c0      	addlt	r0, r0, r3
 8001c48:	4770      	bx	lr
	...

08001c4c <_init>:
 8001c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4e:	bf00      	nop
 8001c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c52:	bc08      	pop	{r3}
 8001c54:	469e      	mov	lr, r3
 8001c56:	4770      	bx	lr

08001c58 <_fini>:
 8001c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5a:	bf00      	nop
 8001c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c5e:	bc08      	pop	{r3}
 8001c60:	469e      	mov	lr, r3
 8001c62:	4770      	bx	lr
