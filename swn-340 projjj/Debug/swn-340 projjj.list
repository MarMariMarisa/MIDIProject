
swn-340 projjj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08002b78  08002b78  00012b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dac  08002dac  00027d34  2**0
                  CONTENTS
  4 .ARM          00000000  08002dac  08002dac  00027d34  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dac  08002dac  00027d34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dac  08002dac  00012dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002db0  08002db0  00012db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007d34  20000000  08002db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005224  20007d34  0800aae8  00027d34  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000cf58  0800aae8  0002cf58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027d34  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00027d64  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006b57  00000000  00000000  00027da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002067  00000000  00000000  0002e8fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  00030968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004dd  00000000  00000000  00031058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d41  00000000  00000000  00031535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa0c  00000000  00000000  00034276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6a56  00000000  00000000  0003ec82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c80  00000000  00000000  001356d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00137358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20007d34 	.word	0x20007d34
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002b60 	.word	0x08002b60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20007d38 	.word	0x20007d38
 80001cc:	08002b60 	.word	0x08002b60

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80002b6:	4b30      	ldr	r3, [pc, #192]	; (8000378 <GPIO_Init+0xd8>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	4a2f      	ldr	r2, [pc, #188]	; (8000378 <GPIO_Init+0xd8>)
 80002bc:	f043 0304 	orr.w	r3, r3, #4
 80002c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002c2:	4b2d      	ldr	r3, [pc, #180]	; (8000378 <GPIO_Init+0xd8>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	f003 0304 	and.w	r3, r3, #4
 80002ca:	613b      	str	r3, [r7, #16]
 80002cc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80002ce:	4b2a      	ldr	r3, [pc, #168]	; (8000378 <GPIO_Init+0xd8>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	4a29      	ldr	r2, [pc, #164]	; (8000378 <GPIO_Init+0xd8>)
 80002d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002da:	4b27      	ldr	r3, [pc, #156]	; (8000378 <GPIO_Init+0xd8>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <GPIO_Init+0xd8>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ea:	4a23      	ldr	r2, [pc, #140]	; (8000378 <GPIO_Init+0xd8>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002f2:	4b21      	ldr	r3, [pc, #132]	; (8000378 <GPIO_Init+0xd8>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	60bb      	str	r3, [r7, #8]
 80002fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80002fe:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <GPIO_Init+0xd8>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <GPIO_Init+0xd8>)
 8000304:	f043 0302 	orr.w	r3, r3, #2
 8000308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800030a:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <GPIO_Init+0xd8>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	f003 0302 	and.w	r3, r3, #2
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800031c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000320:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	4619      	mov	r1, r3
 800032c:	4813      	ldr	r0, [pc, #76]	; (800037c <GPIO_Init+0xdc>)
 800032e:	f001 fd85 	bl	8001e3c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = S1_Pin;
 8000332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000336:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000338:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800033c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800033e:	2302      	movs	r3, #2
 8000340:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	4619      	mov	r1, r3
 8000348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034c:	f001 fd76 	bl	8001e3c <HAL_GPIO_Init>

	/* EXTI15_10_IRQn interrupt init*/
	// Note you will ahave to add EXTI15_10_IRQn Interrupt handler function as well
	// This is the interrupt handler for the blue button
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000350:	2200      	movs	r2, #0
 8000352:	2100      	movs	r1, #0
 8000354:	2028      	movs	r0, #40	; 0x28
 8000356:	f001 fb98 	bl	8001a8a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800035a:	2028      	movs	r0, #40	; 0x28
 800035c:	f001 fbb1 	bl	8001ac2 <HAL_NVIC_EnableIRQ>


	/* EXTI9_5_IRQn interrupt init*/
	// Note you will have to add EXTI9_15_IRQn Interrupt handler function as well
	// This is the interrupt handler for the external buttons (S1)
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000360:	2200      	movs	r2, #0
 8000362:	2101      	movs	r1, #1
 8000364:	2017      	movs	r0, #23
 8000366:	f001 fb90 	bl	8001a8a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800036a:	2017      	movs	r0, #23
 800036c:	f001 fba9 	bl	8001ac2 <HAL_NVIC_EnableIRQ>

}
 8000370:	bf00      	nop
 8000372:	3728      	adds	r7, #40	; 0x28
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40021000 	.word	0x40021000
 800037c:	48000800 	.word	0x48000800

08000380 <LED_Init>:

//******************************************************************************************
// User pin = LD2 Green pin = PA.5
//******************************************************************************************

void LED_Init(uint8_t pin){
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 800038a:	4b2b      	ldr	r3, [pc, #172]	; (8000438 <LED_Init+0xb8>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038e:	4a2a      	ldr	r2, [pc, #168]	; (8000438 <LED_Init+0xb8>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));
 8000396:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	2103      	movs	r1, #3
 80003a2:	fa01 f303 	lsl.w	r3, r1, r3
 80003a6:	43db      	mvns	r3, r3
 80003a8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003ac:	4013      	ands	r3, r2
 80003ae:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 80003b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	2101      	movs	r1, #1
 80003bc:	fa01 f303 	lsl.w	r3, r1, r3
 80003c0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003c4:	4313      	orrs	r3, r2
 80003c6:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 80003c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003cc:	689a      	ldr	r2, [r3, #8]
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	2103      	movs	r1, #3
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	43db      	mvns	r3, r3
 80003da:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003de:	4013      	ands	r3, r2
 80003e0:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 80003e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e6:	689a      	ldr	r2, [r3, #8]
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	2103      	movs	r1, #3
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003f6:	4313      	orrs	r3, r2
 80003f8:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 80003fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003fe:	685a      	ldr	r2, [r3, #4]
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	2101      	movs	r1, #1
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	43db      	mvns	r3, r3
 800040a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800040e:	4013      	ands	r3, r2
 8000410:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 8000412:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000416:	68da      	ldr	r2, [r3, #12]
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	2103      	movs	r1, #3
 800041e:	fa01 f303 	lsl.w	r3, r1, r3
 8000422:	43db      	mvns	r3, r3
 8000424:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000428:	4013      	ands	r3, r2
 800042a:	60cb      	str	r3, [r1, #12]
	
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000

0800043c <LED_On>:

//******************************************************************************************
// Turn pin On
//******************************************************************************************
void LED_On(uint8_t pin){
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR |= (1UL<<pin);
 8000446:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	2101      	movs	r1, #1
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000458:	4313      	orrs	r3, r2
 800045a:	614b      	str	r3, [r1, #20]
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr

08000468 <LED_Off>:

//******************************************************************************************
// Turn pin Off
//******************************************************************************************
void LED_Off(uint8_t pin){
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR &= ~(1UL<<pin);
 8000472:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000476:	695a      	ldr	r2, [r3, #20]
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f303 	lsl.w	r3, r1, r3
 8000480:	43db      	mvns	r3, r3
 8000482:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000486:	4013      	ands	r3, r2
 8000488:	614b      	str	r3, [r1, #20]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <LED_Toggle>:

//******************************************************************************************
// Toggle pin
//******************************************************************************************
void LED_Toggle(uint8_t pin){
 8000496:	b480      	push	{r7}
 8000498:	b083      	sub	sp, #12
 800049a:	af00      	add	r7, sp, #0
 800049c:	4603      	mov	r3, r0
 800049e:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR ^= (1UL<<pin);
 80004a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004a4:	695a      	ldr	r2, [r3, #20]
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	2101      	movs	r1, #1
 80004aa:	fa01 f303 	lsl.w	r3, r1, r3
 80004ae:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80004b2:	4053      	eors	r3, r2
 80004b4:	614b      	str	r3, [r1, #20]
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
	...

080004c4 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80004ca:	4b6b      	ldr	r3, [pc, #428]	; (8000678 <System_Clock_Init+0x1b4>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a6a      	ldr	r2, [pc, #424]	; (8000678 <System_Clock_Init+0x1b4>)
 80004d0:	f023 0307 	bic.w	r3, r3, #7
 80004d4:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80004d6:	4b68      	ldr	r3, [pc, #416]	; (8000678 <System_Clock_Init+0x1b4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a67      	ldr	r2, [pc, #412]	; (8000678 <System_Clock_Init+0x1b4>)
 80004dc:	f043 0302 	orr.w	r3, r3, #2
 80004e0:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 80004e2:	4b66      	ldr	r3, [pc, #408]	; (800067c <System_Clock_Init+0x1b8>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a65      	ldr	r2, [pc, #404]	; (800067c <System_Clock_Init+0x1b8>)
 80004e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ec:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 80004ee:	bf00      	nop
 80004f0:	4b62      	ldr	r3, [pc, #392]	; (800067c <System_Clock_Init+0x1b8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0f9      	beq.n	80004f0 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 80004fc:	2310      	movs	r3, #16
 80004fe:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 8000500:	4b5e      	ldr	r3, [pc, #376]	; (800067c <System_Clock_Init+0x1b8>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	4a5d      	ldr	r2, [pc, #372]	; (800067c <System_Clock_Init+0x1b8>)
 8000506:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800050a:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 800050c:	4b5b      	ldr	r3, [pc, #364]	; (800067c <System_Clock_Init+0x1b8>)
 800050e:	685a      	ldr	r2, [r3, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	061b      	lsls	r3, r3, #24
 8000514:	4959      	ldr	r1, [pc, #356]	; (800067c <System_Clock_Init+0x1b8>)
 8000516:	4313      	orrs	r3, r2
 8000518:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 800051a:	4b58      	ldr	r3, [pc, #352]	; (800067c <System_Clock_Init+0x1b8>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a57      	ldr	r2, [pc, #348]	; (800067c <System_Clock_Init+0x1b8>)
 8000520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000524:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 8000526:	bf00      	nop
 8000528:	4b54      	ldr	r3, [pc, #336]	; (800067c <System_Clock_Init+0x1b8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000530:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000534:	d0f8      	beq.n	8000528 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8000536:	4b51      	ldr	r3, [pc, #324]	; (800067c <System_Clock_Init+0x1b8>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	4a50      	ldr	r2, [pc, #320]	; (800067c <System_Clock_Init+0x1b8>)
 800053c:	f023 0303 	bic.w	r3, r3, #3
 8000540:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 8000542:	4b4e      	ldr	r3, [pc, #312]	; (800067c <System_Clock_Init+0x1b8>)
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	4a4d      	ldr	r2, [pc, #308]	; (800067c <System_Clock_Init+0x1b8>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 800054e:	4b4b      	ldr	r3, [pc, #300]	; (800067c <System_Clock_Init+0x1b8>)
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000556:	4a49      	ldr	r2, [pc, #292]	; (800067c <System_Clock_Init+0x1b8>)
 8000558:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800055c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 800055e:	4b47      	ldr	r3, [pc, #284]	; (800067c <System_Clock_Init+0x1b8>)
 8000560:	68db      	ldr	r3, [r3, #12]
 8000562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000566:	4a45      	ldr	r2, [pc, #276]	; (800067c <System_Clock_Init+0x1b8>)
 8000568:	f043 0310 	orr.w	r3, r3, #16
 800056c:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 800056e:	4b43      	ldr	r3, [pc, #268]	; (800067c <System_Clock_Init+0x1b8>)
 8000570:	68db      	ldr	r3, [r3, #12]
 8000572:	4a42      	ldr	r2, [pc, #264]	; (800067c <System_Clock_Init+0x1b8>)
 8000574:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8000578:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 800057a:	4b40      	ldr	r3, [pc, #256]	; (800067c <System_Clock_Init+0x1b8>)
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	4a3f      	ldr	r2, [pc, #252]	; (800067c <System_Clock_Init+0x1b8>)
 8000580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000584:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 8000586:	4b3d      	ldr	r3, [pc, #244]	; (800067c <System_Clock_Init+0x1b8>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a3c      	ldr	r2, [pc, #240]	; (800067c <System_Clock_Init+0x1b8>)
 800058c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000590:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000592:	bf00      	nop
 8000594:	4b39      	ldr	r3, [pc, #228]	; (800067c <System_Clock_Init+0x1b8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800059c:	2b00      	cmp	r3, #0
 800059e:	d0f9      	beq.n	8000594 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 80005a0:	4b36      	ldr	r3, [pc, #216]	; (800067c <System_Clock_Init+0x1b8>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	4a35      	ldr	r2, [pc, #212]	; (800067c <System_Clock_Init+0x1b8>)
 80005a6:	f023 0303 	bic.w	r3, r3, #3
 80005aa:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 80005ac:	4b33      	ldr	r3, [pc, #204]	; (800067c <System_Clock_Init+0x1b8>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	4a32      	ldr	r2, [pc, #200]	; (800067c <System_Clock_Init+0x1b8>)
 80005b2:	f043 0303 	orr.w	r3, r3, #3
 80005b6:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80005b8:	bf00      	nop
 80005ba:	4b30      	ldr	r3, [pc, #192]	; (800067c <System_Clock_Init+0x1b8>)
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	f003 030c 	and.w	r3, r3, #12
 80005c2:	2b0c      	cmp	r3, #12
 80005c4:	d1f9      	bne.n	80005ba <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <System_Clock_Init+0x1b8>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	4a2c      	ldr	r2, [pc, #176]	; (800067c <System_Clock_Init+0x1b8>)
 80005cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005d0:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 80005d2:	4b2a      	ldr	r3, [pc, #168]	; (800067c <System_Clock_Init+0x1b8>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	4a29      	ldr	r2, [pc, #164]	; (800067c <System_Clock_Init+0x1b8>)
 80005d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005dc:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 80005de:	4b27      	ldr	r3, [pc, #156]	; (800067c <System_Clock_Init+0x1b8>)
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	4a26      	ldr	r2, [pc, #152]	; (800067c <System_Clock_Init+0x1b8>)
 80005e4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80005e8:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80005ea:	4b24      	ldr	r3, [pc, #144]	; (800067c <System_Clock_Init+0x1b8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a23      	ldr	r2, [pc, #140]	; (800067c <System_Clock_Init+0x1b8>)
 80005f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80005f4:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 80005f6:	bf00      	nop
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <System_Clock_Init+0x1b8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000604:	d0f8      	beq.n	80005f8 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <System_Clock_Init+0x1b8>)
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	4a1c      	ldr	r2, [pc, #112]	; (800067c <System_Clock_Init+0x1b8>)
 800060c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000610:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <System_Clock_Init+0x1b8>)
 8000614:	691b      	ldr	r3, [r3, #16]
 8000616:	4a19      	ldr	r2, [pc, #100]	; (800067c <System_Clock_Init+0x1b8>)
 8000618:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 800061c:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <System_Clock_Init+0x1b8>)
 8000620:	691b      	ldr	r3, [r3, #16]
 8000622:	4a16      	ldr	r2, [pc, #88]	; (800067c <System_Clock_Init+0x1b8>)
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <System_Clock_Init+0x1b8>)
 800062c:	691b      	ldr	r3, [r3, #16]
 800062e:	4a13      	ldr	r2, [pc, #76]	; (800067c <System_Clock_Init+0x1b8>)
 8000630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000634:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <System_Clock_Init+0x1b8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a10      	ldr	r2, [pc, #64]	; (800067c <System_Clock_Init+0x1b8>)
 800063c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000640:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 8000642:	bf00      	nop
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <System_Clock_Init+0x1b8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f9      	beq.n	8000644 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <System_Clock_Init+0x1b8>)
 8000652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000656:	4a09      	ldr	r2, [pc, #36]	; (800067c <System_Clock_Init+0x1b8>)
 8000658:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800065c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <System_Clock_Init+0x1b8>)
 8000662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <System_Clock_Init+0x1b8>)
 8000666:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800066a:	6613      	str	r3, [r2, #96]	; 0x60
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40022000 	.word	0x40022000
 800067c:	40021000 	.word	0x40021000

08000680 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <UART2_Init+0x40>)
 8000686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000688:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <UART2_Init+0x40>)
 800068a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068e:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <UART2_Init+0x40>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <UART2_Init+0x40>)
 8000698:	f023 030c 	bic.w	r3, r3, #12
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <UART2_Init+0x40>)
 80006a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006a6:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <UART2_Init+0x40>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 80006b0:	f000 f80a 	bl	80006c8 <UART2_GPIO_Init>
	USART_Init(USART2);
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <UART2_Init+0x44>)
 80006b6:	f000 f84f 	bl	8000758 <USART_Init>
	
//	NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
//	NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40004400 	.word	0x40004400

080006c8 <UART2_GPIO_Init>:
void UART2_GPIO_Init(void) {
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 80006cc:	4b21      	ldr	r3, [pc, #132]	; (8000754 <UART2_GPIO_Init+0x8c>)
 80006ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d0:	4a20      	ldr	r2, [pc, #128]	; (8000754 <UART2_GPIO_Init+0x8c>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 80006d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 80006e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006f2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80006f6:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 80006f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006fc:	6a1b      	ldr	r3, [r3, #32]
 80006fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000706:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 8000708:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800070c:	6a1b      	ldr	r3, [r3, #32]
 800070e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000712:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000716:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 8000718:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000722:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000726:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000728:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000736:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 8000738:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000742:	f023 030c 	bic.w	r3, r3, #12
 8000746:	6053      	str	r3, [r2, #4]
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f023 0201 	bic.w	r2, r3, #1
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f242 028d 	movw	r2, #8333	; 0x208d
 8000796:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f043 020c 	orr.w	r2, r3, #12
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a2f      	ldr	r2, [pc, #188]	; (8000864 <USART_Init+0x10c>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d129      	bne.n	8000800 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f043 0220 	orr.w	r2, r3, #32
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f023 0210 	bic.w	r2, r3, #16
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f023 0201 	bic.w	r2, r3, #1
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a19      	ldr	r2, [pc, #100]	; (8000868 <USART_Init+0x110>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d111      	bne.n	800082c <USART_Init+0xd4>
		USARTx->ICR |= USART_ICR_TCCF;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6a1b      	ldr	r3, [r3, #32]
 800080c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <USART_Init+0x114>)
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	4a14      	ldr	r2, [pc, #80]	; (800086c <USART_Init+0x114>)
 800081a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800081e:	6093      	str	r3, [r2, #8]
		USARTx-> CR1 |= USART_CR1_RXNEIE;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f043 0220 	orr.w	r2, r3, #32
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	601a      	str	r2, [r3, #0]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f043 0201 	orr.w	r2, r3, #1
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000838:	bf00      	nop
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000842:	2b00      	cmp	r3, #0
 8000844:	d0f9      	beq.n	800083a <USART_Init+0xe2>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000846:	bf00      	nop
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0f9      	beq.n	8000848 <USART_Init+0xf0>
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40004c00 	.word	0x40004c00
 8000868:	40004400 	.word	0x40004400
 800086c:	40013800 	.word	0x40013800

08000870 <USART_Read>:


uint8_t USART_Read (USART_TypeDef * USARTx) {
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 8000878:	bf00      	nop
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 0320 	and.w	r3, r3, #32
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0f9      	beq.n	800087a <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800088a:	b29b      	uxth	r3, r3
 800088c:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <USART_Read_Nonblocking>:
uint8_t USART_Read_Nonblocking (USART_TypeDef * USARTx) {
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
	if(!(USARTx->ISR & USART_ISR_RXNE)){
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f003 0320 	and.w	r3, r3, #32
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d101      	bne.n	80008b2 <USART_Read_Nonblocking+0x18>
			return 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	e003      	b.n	80008ba <USART_Read_Nonblocking+0x20>
	}else{
		return ((uint8_t)(USARTx->RDR & 0xFF));
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	b2db      	uxtb	r3, r3
	}
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	e014      	b.n	8000902 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 80008d8:	bf00      	nop
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0f9      	beq.n	80008da <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	68ba      	ldr	r2, [r7, #8]
 80008ea:	4413      	add	r3, r2
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 80008f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008f8:	f000 f818 	bl	800092c <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	3301      	adds	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	429a      	cmp	r2, r3
 8000908:	d8e6      	bhi.n	80008d8 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 800090a:	bf00      	nop
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	69db      	ldr	r3, [r3, #28]
 8000910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000914:	2b00      	cmp	r3, #0
 8000916:	d0f9      	beq.n	800090c <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	69db      	ldr	r3, [r3, #28]
 800091c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	61da      	str	r2, [r3, #28]
}   
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2264      	movs	r2, #100	; 0x64
 8000938:	fb03 f202 	mul.w	r2, r3, r2
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <USART_Delay+0x3c>)
 800093e:	fba3 1302 	umull	r1, r3, r3, r2
 8000942:	1ad2      	subs	r2, r2, r3
 8000944:	0852      	lsrs	r2, r2, #1
 8000946:	4413      	add	r3, r2
 8000948:	089b      	lsrs	r3, r3, #2
 800094a:	60fb      	str	r3, [r7, #12]
	while(--time);   
 800094c:	bf00      	nop
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	3b01      	subs	r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1f9      	bne.n	800094e <USART_Delay+0x22>
}
 800095a:	bf00      	nop
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	24924925 	.word	0x24924925

0800096c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <HAL_DAC_MspInit+0x74>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d124      	bne.n	80009d8 <HAL_DAC_MspInit+0x6c>
  {
    __HAL_RCC_DAC1_CLK_ENABLE();
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <HAL_DAC_MspInit+0x78>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000992:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <HAL_DAC_MspInit+0x78>)
 8000994:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000998:	6593      	str	r3, [r2, #88]	; 0x58
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_DAC_MspInit+0x78>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_DAC_MspInit+0x78>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <HAL_DAC_MspInit+0x78>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_DAC_MspInit+0x78>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009be:	2310      	movs	r3, #16
 80009c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c2:	2303      	movs	r3, #3
 80009c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f001 fa32 	bl	8001e3c <HAL_GPIO_Init>
  }

}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40007400 	.word	0x40007400
 80009e4:	40021000 	.word	0x40021000

080009e8 <DAC_Init>:
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
  }

}

void DAC_Init () {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
	DAC_ChannelConfTypeDef sConfig = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2224      	movs	r2, #36	; 0x24
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 fc27 	bl	8002248 <memset>

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <DAC_Init+0x5c>)
 80009fc:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <DAC_Init+0x60>)
 80009fe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a00:	4810      	ldr	r0, [pc, #64]	; (8000a44 <DAC_Init+0x5c>)
 8000a02:	f001 f86c 	bl	8001ade <HAL_DAC_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <DAC_Init+0x28>
  {
    Error_Handler();
 8000a0c:	f000 f86e 	bl	8000aec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]

  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4806      	ldr	r0, [pc, #24]	; (8000a44 <DAC_Init+0x5c>)
 8000a2c:	f001 f8eb 	bl	8001c06 <HAL_DAC_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <DAC_Init+0x52>
  {
    Error_Handler();
 8000a36:	f000 f859 	bl	8000aec <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3728      	adds	r7, #40	; 0x28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20007d50 	.word	0x20007d50
 8000a48:	40007400 	.word	0x40007400

08000a4c <DAC_Start>:

void DAC_Start () {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	HAL_DAC_Start (&hdac1, DAC_CHANNEL_1);
 8000a50:	2100      	movs	r1, #0
 8000a52:	4802      	ldr	r0, [pc, #8]	; (8000a5c <DAC_Start+0x10>)
 8000a54:	f001 f865 	bl	8001b22 <HAL_DAC_Start>
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20007d50 	.word	0x20007d50

08000a60 <DAC_Set_Value>:

void DAC_Set_Value (uint32_t value) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	HAL_DAC_SetValue (&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4803      	ldr	r0, [pc, #12]	; (8000a7c <DAC_Set_Value+0x1c>)
 8000a70:	f001 f8a4 	bl	8001bbc <HAL_DAC_SetValue>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20007d50 	.word	0x20007d50

08000a80 <init_syst>:
    uint32_t CSR;
    uint32_t RVR;
    uint32_t CVR;
    uint32_t CALIB;
};
void init_syst (){
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
    // Create an instance of systick
    // Set timer to 10 ms
    SYST_TICK->RVR = 799; //1 ms timer
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <init_syst+0x38>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f240 321f 	movw	r2, #799	; 0x31f
 8000a8c:	605a      	str	r2, [r3, #4]
    // Turn on timer -
    SYST_TICK->CSR |= (1<<2); // Use pc source
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <init_syst+0x38>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <init_syst+0x38>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f042 0204 	orr.w	r2, r2, #4
 8000a9c:	601a      	str	r2, [r3, #0]
    SYST_TICK->CSR |= (1<<0); // Enable
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <init_syst+0x38>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <init_syst+0x38>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f042 0201 	orr.w	r2, r2, #1
 8000aac:	601a      	str	r2, [r3, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	20007cd8 	.word	0x20007cd8

08000abc <get_song>:

// Convenience list of all the songs in one array.
song songs[] = {{song0, sizeof (song0)}, {song1, sizeof (song1)}, {song2, sizeof (song2)}, {song3, sizeof (song3)},
				{song4, sizeof (song4)}};

song get_song (uint8_t song_number){
 8000abc:	b490      	push	{r4, r7}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	70fb      	strb	r3, [r7, #3]
	return songs[song_number];
 8000ac8:	78fb      	ldrb	r3, [r7, #3]
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <get_song+0x2c>)
 8000ace:	460c      	mov	r4, r1
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	4413      	add	r3, r2
 8000ad4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ad8:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc90      	pop	{r4, r7}
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20007aa4 	.word	0x20007aa4

08000aec <Error_Handler>:

/* You will want to integrate this with your existing one
   but it is here for standalone testing                 
*/

void Error_Handler(){
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	//erro
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <hertz_to_duration>:
uint32_t get_tick_speed ();


// Convert from hertz to ticks
uint32_t hertz_to_duration (float hertz) {
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t tick_speed = TICK_SPEED; // This is a hack, you'll fix it later
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <hertz_to_duration+0x58>)
 8000b08:	60fb      	str	r3, [r7, #12]
	if (hertz == 0)
 8000b0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b16:	d101      	bne.n	8000b1c <hertz_to_duration+0x20>
		return 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e014      	b.n	8000b46 <hertz_to_duration+0x4a>
	float duration = 1 / hertz;
 8000b1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000b20:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b28:	edc7 7a02 	vstr	s15, [r7, #8]
	return (uint32_t) (duration * tick_speed);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	ee07 3a90 	vmov	s15, r3
 8000b32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b36:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b42:	ee17 3a90 	vmov	r3, s15
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	000f4240 	.word	0x000f4240

08000b58 <parseDelay>:
// Accessor for the counter
uint32_t get_counter () {
	return counter;
}

uint32_t parseDelay(uint8_t* delay) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
    uint32_t result = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
    uint8_t currentByte;

    do {
        currentByte = *delay++;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	72fb      	strb	r3, [r7, #11]
        result = (result << 7) | (currentByte & 0x7F);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	01da      	lsls	r2, r3, #7
 8000b72:	7afb      	ldrb	r3, [r7, #11]
 8000b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
    } while (currentByte & 0x80);
 8000b7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	dbef      	blt.n	8000b64 <parseDelay+0xc>

    return result;
 8000b84:	68fb      	ldr	r3, [r7, #12]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
	...

08000b94 <setCurrentSong>:

void reset_counter () {
	counter = 0;
}

void setCurrentSong(song song){
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b08f      	sub	sp, #60	; 0x3c
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	e883 0003 	stmia.w	r3, {r0, r1}
	int i = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
	int mtrkCnt = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
	int numNotes = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
	while(mtrkCnt < 2){
 8000bac:	e001      	b.n	8000bb2 <setCurrentSong+0x1e>
		mtrkCnt = 12;
 8000bae:	230c      	movs	r3, #12
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
	while(mtrkCnt < 2){
 8000bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	ddfa      	ble.n	8000bae <setCurrentSong+0x1a>
	}
	while(0 == 0){
		if(song.p_song[i] == 77 && song.p_song[i+1] == 47 && song.p_song[i+2] == 0){
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b4d      	cmp	r3, #77	; 0x4d
 8000bc2:	d111      	bne.n	8000be8 <setCurrentSong+0x54>
 8000bc4:	683a      	ldr	r2, [r7, #0]
 8000bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b2f      	cmp	r3, #47	; 0x2f
 8000bd0:	d10a      	bne.n	8000be8 <setCurrentSong+0x54>
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	4413      	add	r3, r2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d103      	bne.n	8000be8 <setCurrentSong+0x54>
			printf("end");
 8000be0:	4843      	ldr	r0, [pc, #268]	; (8000cf0 <setCurrentSong+0x15c>)
 8000be2:	f000 fd4d 	bl	8001680 <printf>
			break;
 8000be6:	e07f      	b.n	8000ce8 <setCurrentSong+0x154>
		}
		if(song.p_song[i] == 128 || song.p_song[i] == 144){
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bec:	4413      	add	r3, r2
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b80      	cmp	r3, #128	; 0x80
 8000bf2:	d005      	beq.n	8000c00 <setCurrentSong+0x6c>
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf8:	4413      	add	r3, r2
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b90      	cmp	r3, #144	; 0x90
 8000bfe:	d16f      	bne.n	8000ce0 <setCurrentSong+0x14c>
			printf("\r\n%s","new message");
 8000c00:	493c      	ldr	r1, [pc, #240]	; (8000cf4 <setCurrentSong+0x160>)
 8000c02:	483d      	ldr	r0, [pc, #244]	; (8000cf8 <setCurrentSong+0x164>)
 8000c04:	f000 fd3c 	bl	8001680 <printf>
			printf("\r\n%s%d","i location: ",i);
 8000c08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c0a:	493c      	ldr	r1, [pc, #240]	; (8000cfc <setCurrentSong+0x168>)
 8000c0c:	483c      	ldr	r0, [pc, #240]	; (8000d00 <setCurrentSong+0x16c>)
 8000c0e:	f000 fd37 	bl	8001680 <printf>
			printf("\r\n%s%x","message type",song.p_song[i]);
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c16:	4413      	add	r3, r2
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4939      	ldr	r1, [pc, #228]	; (8000d04 <setCurrentSong+0x170>)
 8000c1e:	483a      	ldr	r0, [pc, #232]	; (8000d08 <setCurrentSong+0x174>)
 8000c20:	f000 fd2e 	bl	8001680 <printf>
			tone_info currentTone;
			uint8_t currentMessage[16];
			currentMessage[0] = song.p_song[i];
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c28:	4413      	add	r3, r2
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	723b      	strb	r3, [r7, #8]
			int x = 1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
			i++;
 8000c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c34:	3301      	adds	r3, #1
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
			while(song.p_song[i] != 128 && song.p_song[i] !=144){
 8000c38:	e022      	b.n	8000c80 <setCurrentSong+0xec>
				currentMessage[x] = song.p_song[i];
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c3e:	4413      	add	r3, r2
 8000c40:	7819      	ldrb	r1, [r3, #0]
 8000c42:	f107 0208 	add.w	r2, r7, #8
 8000c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c48:	4413      	add	r3, r2
 8000c4a:	460a      	mov	r2, r1
 8000c4c:	701a      	strb	r2, [r3, #0]
				printf("\r\n%x",currentMessage[x]);
 8000c4e:	f107 0208 	add.w	r2, r7, #8
 8000c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c54:	4413      	add	r3, r2
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	482c      	ldr	r0, [pc, #176]	; (8000d0c <setCurrentSong+0x178>)
 8000c5c:	f000 fd10 	bl	8001680 <printf>
				x++;
 8000c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c62:	3301      	adds	r3, #1
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
				i++;
 8000c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c68:	3301      	adds	r3, #1
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
				if(song.p_song[i] == 77){
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c70:	4413      	add	r3, r2
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b4d      	cmp	r3, #77	; 0x4d
 8000c76:	d103      	bne.n	8000c80 <setCurrentSong+0xec>
					printf("herer");
 8000c78:	4825      	ldr	r0, [pc, #148]	; (8000d10 <setCurrentSong+0x17c>)
 8000c7a:	f000 fd01 	bl	8001680 <printf>
					break;
 8000c7e:	e00b      	b.n	8000c98 <setCurrentSong+0x104>
			while(song.p_song[i] != 128 && song.p_song[i] !=144){
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c84:	4413      	add	r3, r2
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b80      	cmp	r3, #128	; 0x80
 8000c8a:	d005      	beq.n	8000c98 <setCurrentSong+0x104>
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c90:	4413      	add	r3, r2
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b90      	cmp	r3, #144	; 0x90
 8000c96:	d1d0      	bne.n	8000c3a <setCurrentSong+0xa6>
				}
			}
			currentTone.duration = parseDelay(currentMessage);
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff5b 	bl	8000b58 <parseDelay>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	61bb      	str	r3, [r7, #24]
			currentTone.power = notes[(int)currentMessage[2]];
 8000ca6:	7abb      	ldrb	r3, [r7, #10]
 8000ca8:	4a1a      	ldr	r2, [pc, #104]	; (8000d14 <setCurrentSong+0x180>)
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	edd3 7a00 	vldr	s15, [r3]
 8000cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cb6:	ee17 3a90 	vmov	r3, s15
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	84bb      	strh	r3, [r7, #36]	; 0x24
			printf("\r\n%s%d","velocity: ", currentMessage[2]);
 8000cbe:	7abb      	ldrb	r3, [r7, #10]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4915      	ldr	r1, [pc, #84]	; (8000d18 <setCurrentSong+0x184>)
 8000cc4:	480e      	ldr	r0, [pc, #56]	; (8000d00 <setCurrentSong+0x16c>)
 8000cc6:	f000 fcdb 	bl	8001680 <printf>
			current_song[numNotes] = currentTone;
 8000cca:	4a14      	ldr	r2, [pc, #80]	; (8000d1c <setCurrentSong+0x188>)
 8000ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	4413      	add	r3, r2
 8000cd2:	461c      	mov	r4, r3
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		if(song.p_song[i] == 128 || song.p_song[i] == 144){
 8000cde:	e002      	b.n	8000ce6 <setCurrentSong+0x152>
			}else{
			i++;
 8000ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
		if(song.p_song[i] == 77 && song.p_song[i+1] == 47 && song.p_song[i+2] == 0){
 8000ce6:	e767      	b.n	8000bb8 <setCurrentSong+0x24>
		}
	}
}
 8000ce8:	bf00      	nop
 8000cea:	373c      	adds	r7, #60	; 0x3c
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd90      	pop	{r4, r7, pc}
 8000cf0:	08002b78 	.word	0x08002b78
 8000cf4:	08002b7c 	.word	0x08002b7c
 8000cf8:	08002b88 	.word	0x08002b88
 8000cfc:	08002b90 	.word	0x08002b90
 8000d00:	08002ba0 	.word	0x08002ba0
 8000d04:	08002ba8 	.word	0x08002ba8
 8000d08:	08002bb8 	.word	0x08002bb8
 8000d0c:	08002bc0 	.word	0x08002bc0
 8000d10:	08002bc8 	.word	0x08002bc8
 8000d14:	20007acc 	.word	0x20007acc
 8000d18:	08002bd0 	.word	0x08002bd0
 8000d1c:	20007d64 	.word	0x20007d64

08000d20 <add_tone>:


// Add a tone to the tones array
uint8_t add_tone (uint8_t note, uint8_t velocity) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	71bb      	strb	r3, [r7, #6]
	tones [0] = (tone_info){hertz_to_duration (notes [note]), velocity};
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	4a0d      	ldr	r2, [pc, #52]	; (8000d68 <add_tone+0x48>)
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	edd3 7a00 	vldr	s15, [r3]
 8000d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d40:	f7ff fedc 	bl	8000afc <hertz_to_duration>
 8000d44:	79b9      	ldrb	r1, [r7, #6]
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <add_tone+0x4c>)
 8000d48:	461a      	mov	r2, r3
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	6053      	str	r3, [r2, #4]
 8000d50:	6093      	str	r3, [r2, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <add_tone+0x4c>)
 8000d56:	6018      	str	r0, [r3, #0]
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <add_tone+0x4c>)
 8000d5a:	6059      	str	r1, [r3, #4]
	return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20007acc 	.word	0x20007acc
 8000d6c:	2000cb64 	.word	0x2000cb64

08000d70 <play_tones>:
	tones [0].power = 0;
	return 0;
}

// Play any tones in the array
void play_tones () {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
    init_systick();
 8000d74:	f000 fd42 	bl	80017fc <init_systick>
    DAC_Init ();
 8000d78:	f7ff fe36 	bl	80009e8 <DAC_Init>
    DAC_Start ();
 8000d7c:	f7ff fe66 	bl	8000a4c <DAC_Start>
    if (ticks % tones[0].duration < tones[0].duration >> 1) {
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <play_tones+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <play_tones+0x44>)
 8000d86:	6812      	ldr	r2, [r2, #0]
 8000d88:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d8c:	fb01 f202 	mul.w	r2, r1, r2
 8000d90:	1a9a      	subs	r2, r3, r2
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <play_tones+0x44>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	085b      	lsrs	r3, r3, #1
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d204      	bcs.n	8000da6 <play_tones+0x36>
        	DAC_Set_Value (4000);
 8000d9c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000da0:	f7ff fe5e 	bl	8000a60 <DAC_Set_Value>
        }
        else {
            DAC_Set_Value(0);
        }
}
 8000da4:	e002      	b.n	8000dac <play_tones+0x3c>
            DAC_Set_Value(0);
 8000da6:	2000      	movs	r0, #0
 8000da8:	f7ff fe5a 	bl	8000a60 <DAC_Set_Value>
}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2000cd00 	.word	0x2000cd00
 8000db4:	2000cb64 	.word	0x2000cb64

08000db8 <next_song>:
volatile int lightState = 0;
char currSongTitle[128] = {};
char currSongCopyright[128] = {};


void next_song(){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
	//display next songs title and queue it
	strcpy(currSongTitle,'\0');
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	483c      	ldr	r0, [pc, #240]	; (8000eb4 <next_song+0xfc>)
 8000dc2:	f001 fa75 	bl	80022b0 <strcpy>
	strcpy(currSongCopyright,'\0');
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	483b      	ldr	r0, [pc, #236]	; (8000eb8 <next_song+0x100>)
 8000dca:	f001 fa71 	bl	80022b0 <strcpy>
	currentSongNum++;
 8000dce:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <next_song+0x104>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	4a39      	ldr	r2, [pc, #228]	; (8000ebc <next_song+0x104>)
 8000dd6:	6013      	str	r3, [r2, #0]
	if(currentSongNum == 5){
 8000dd8:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <next_song+0x104>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b05      	cmp	r3, #5
 8000dde:	d102      	bne.n	8000de6 <next_song+0x2e>
		currentSongNum = 0;
 8000de0:	4b36      	ldr	r3, [pc, #216]	; (8000ebc <next_song+0x104>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
	}
	int mtrkCnt = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
	song song = get_song(currentSongNum);
 8000dea:	4b34      	ldr	r3, [pc, #208]	; (8000ebc <next_song+0x104>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	463b      	mov	r3, r7
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe61 	bl	8000abc <get_song>
	int i = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
	while(0==0){
		if(song.p_song[i] == 255 && song.p_song[i+1] == 3){ //ff,03
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	4413      	add	r3, r2
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2bff      	cmp	r3, #255	; 0xff
 8000e08:	d106      	bne.n	8000e18 <next_song+0x60>
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d021      	beq.n	8000e5c <next_song+0xa4>
			break;
		}
		i++;
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	60bb      	str	r3, [r7, #8]
		if(song.p_song[i] == 77 && song.p_song[i+1] == 84 && song.p_song[i+2] == 114 && song.p_song[i+3] == 107 ){//ff,03
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4413      	add	r3, r2
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b4d      	cmp	r3, #77	; 0x4d
 8000e28:	d1e9      	bne.n	8000dfe <next_song+0x46>
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b54      	cmp	r3, #84	; 0x54
 8000e36:	d1e2      	bne.n	8000dfe <next_song+0x46>
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	3302      	adds	r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b72      	cmp	r3, #114	; 0x72
 8000e44:	d1db      	bne.n	8000dfe <next_song+0x46>
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	3303      	adds	r3, #3
 8000e4c:	4413      	add	r3, r2
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b6b      	cmp	r3, #107	; 0x6b
 8000e52:	d1d4      	bne.n	8000dfe <next_song+0x46>
			mtrkCnt++;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	3301      	adds	r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
		if(song.p_song[i] == 255 && song.p_song[i+1] == 3){ //ff,03
 8000e5a:	e7d0      	b.n	8000dfe <next_song+0x46>
			break;
 8000e5c:	bf00      	nop
		}
	}
	//if mtrk second was not found title exists
	if(mtrkCnt != 2){
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d005      	beq.n	8000e70 <next_song+0xb8>
		getSongTitle(song,i);
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	463b      	mov	r3, r7
 8000e68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e6c:	f000 fa36 	bl	80012dc <getSongTitle>
	}
	//copyright find
	getCopyright(song);
 8000e70:	463b      	mov	r3, r7
 8000e72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e76:	f000 fa7f 	bl	8001378 <getCopyright>
	printf("\r\n%s","Current Song:");
 8000e7a:	4911      	ldr	r1, [pc, #68]	; (8000ec0 <next_song+0x108>)
 8000e7c:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <next_song+0x10c>)
 8000e7e:	f000 fbff 	bl	8001680 <printf>
	printf("\r\n%s%s","Song Title: ",currSongTitle);
 8000e82:	4a0c      	ldr	r2, [pc, #48]	; (8000eb4 <next_song+0xfc>)
 8000e84:	4910      	ldr	r1, [pc, #64]	; (8000ec8 <next_song+0x110>)
 8000e86:	4811      	ldr	r0, [pc, #68]	; (8000ecc <next_song+0x114>)
 8000e88:	f000 fbfa 	bl	8001680 <printf>
	printf("\r\n%s%s\r","Song Copyright: ",currSongCopyright);
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <next_song+0x100>)
 8000e8e:	4910      	ldr	r1, [pc, #64]	; (8000ed0 <next_song+0x118>)
 8000e90:	4810      	ldr	r0, [pc, #64]	; (8000ed4 <next_song+0x11c>)
 8000e92:	f000 fbf5 	bl	8001680 <printf>
	printf("\r\n%s%d\r","Song Tempo:", getTempo(song));
 8000e96:	463b      	mov	r3, r7
 8000e98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e9c:	f000 f9e4 	bl	8001268 <getTempo>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <next_song+0x120>)
 8000ea6:	480d      	ldr	r0, [pc, #52]	; (8000edc <next_song+0x124>)
 8000ea8:	f000 fbea 	bl	8001680 <printf>

}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	2000cbfc 	.word	0x2000cbfc
 8000eb8:	2000cc7c 	.word	0x2000cc7c
 8000ebc:	20007cd4 	.word	0x20007cd4
 8000ec0:	08002bdc 	.word	0x08002bdc
 8000ec4:	08002bec 	.word	0x08002bec
 8000ec8:	08002bf4 	.word	0x08002bf4
 8000ecc:	08002c04 	.word	0x08002c04
 8000ed0:	08002c0c 	.word	0x08002c0c
 8000ed4:	08002c20 	.word	0x08002c20
 8000ed8:	08002c28 	.word	0x08002c28
 8000edc:	08002c34 	.word	0x08002c34

08000ee0 <play_song>:
//play song
void play_song(){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
	PLAY_PAUSE_TOG = 1;
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <play_song+0x88>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
	lightState = 1;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <play_song+0x8c>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]
	LED_On(EXTERN_LED);
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <play_song+0x90>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fa9f 	bl	800043c <LED_On>
	setCurrentSong(get_song(currentSongNum));
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <play_song+0x94>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fdd7 	bl	8000abc <get_song>
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f14:	f7ff fe3e 	bl	8000b94 <setCurrentSong>
	while(0==0){
		play_tones();
 8000f18:	f7ff ff2a 	bl	8000d70 <play_tones>

		for(int i = 0; i < 1248; i++){
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	e01c      	b.n	8000f5c <play_song+0x7c>
		  if(current_song[i].duration < ticks){
 8000f22:	4a15      	ldr	r2, [pc, #84]	; (8000f78 <play_song+0x98>)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	4413      	add	r3, r2
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <play_song+0x9c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d210      	bcs.n	8000f56 <play_song+0x76>

			  add_tone(current_song[i].duration,current_song[i].power);
 8000f34:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <play_song+0x98>)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	011b      	lsls	r3, r3, #4
 8000f3a:	4413      	add	r3, r2
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490d      	ldr	r1, [pc, #52]	; (8000f78 <play_song+0x98>)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	440b      	add	r3, r1
 8000f48:	330c      	adds	r3, #12
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4610      	mov	r0, r2
 8000f52:	f7ff fee5 	bl	8000d20 <add_tone>
		for(int i = 0; i < 1248; i++){
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f5b3 6f9c 	cmp.w	r3, #1248	; 0x4e0
 8000f62:	dbde      	blt.n	8000f22 <play_song+0x42>
		play_tones();
 8000f64:	e7d8      	b.n	8000f18 <play_song+0x38>
 8000f66:	bf00      	nop
 8000f68:	2000cb74 	.word	0x2000cb74
 8000f6c:	2000cbf8 	.word	0x2000cbf8
 8000f70:	20007cdc 	.word	0x20007cdc
 8000f74:	20007cd4 	.word	0x20007cd4
 8000f78:	20007d64 	.word	0x20007d64
 8000f7c:	2000cd00 	.word	0x2000cd00

08000f80 <stop_song>:
		  }
		}
	}
}
//stop song
void stop_song(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	lightState = 0;
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <stop_song+0x1c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
	LED_Off(EXTERN_LED);
 8000f8a:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <stop_song+0x20>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fa69 	bl	8000468 <LED_Off>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000cbf8 	.word	0x2000cbf8
 8000fa0:	20007cdc 	.word	0x20007cdc

08000fa4 <pause_song>:
char* pause_song() {
 8000fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa8:	b088      	sub	sp, #32
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	466b      	mov	r3, sp
 8000fae:	4698      	mov	r8, r3
	lightState = 2;
 8000fb0:	4b3c      	ldr	r3, [pc, #240]	; (80010a4 <pause_song+0x100>)
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	601a      	str	r2, [r3, #0]
    char BUFFER[MAX_STRING_SIZE];  // Declare BUFFER as static
 8000fb6:	4b3c      	ldr	r3, [pc, #240]	; (80010a8 <pause_song+0x104>)
 8000fb8:	681e      	ldr	r6, [r3, #0]
 8000fba:	1e73      	subs	r3, r6, #1
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4632      	mov	r2, r6
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	4614      	mov	r4, r2
 8000fc4:	461d      	mov	r5, r3
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	00eb      	lsls	r3, r5, #3
 8000fd0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000fd4:	00e2      	lsls	r2, r4, #3
 8000fd6:	4632      	mov	r2, r6
 8000fd8:	2300      	movs	r3, #0
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	00cb      	lsls	r3, r1, #3
 8000fe8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fec:	00c2      	lsls	r2, r0, #3
 8000fee:	4633      	mov	r3, r6
 8000ff0:	3307      	adds	r3, #7
 8000ff2:	08db      	lsrs	r3, r3, #3
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	ebad 0d03 	sub.w	sp, sp, r3
 8000ffa:	466b      	mov	r3, sp
 8000ffc:	3300      	adds	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
    PLAY_PAUSE_TOG = 0;
 8001000:	4b2a      	ldr	r3, [pc, #168]	; (80010ac <pause_song+0x108>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
    init_systick();
 8001006:	f000 fbf9 	bl	80017fc <init_systick>
    int cnt = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    int index = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
    char ch = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	72fb      	strb	r3, [r7, #11]
    int going = 1;
 8001016:	2301      	movs	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
    while (going == 1 && lightState == 2) {
 800101a:	e02a      	b.n	8001072 <pause_song+0xce>
        cnt++;
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	3301      	adds	r3, #1
 8001020:	61fb      	str	r3, [r7, #28]
			ch = USART_Read_Nonblocking(USART2);
 8001022:	4823      	ldr	r0, [pc, #140]	; (80010b0 <pause_song+0x10c>)
 8001024:	f7ff fc39 	bl	800089a <USART_Read_Nonblocking>
 8001028:	4603      	mov	r3, r0
 800102a:	72fb      	strb	r3, [r7, #11]
			if (ch == '\r') {
 800102c:	7afb      	ldrb	r3, [r7, #11]
 800102e:	2b0d      	cmp	r3, #13
 8001030:	d102      	bne.n	8001038 <pause_song+0x94>
				going = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e01c      	b.n	8001072 <pause_song+0xce>
			} else {
				if (ch != 0) {
 8001038:	7afb      	ldrb	r3, [r7, #11]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <pause_song+0xb2>
					printf("%c", ch);
 800103e:	7afb      	ldrb	r3, [r7, #11]
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fb0f 	bl	8001664 <putchar>
					BUFFER[index] = ch;
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	4413      	add	r3, r2
 800104c:	7afa      	ldrb	r2, [r7, #11]
 800104e:	701a      	strb	r2, [r3, #0]
					index++;
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	3301      	adds	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
				}
       delay_systick();
 8001056:	f000 fc01 	bl	800185c <delay_systick>
       if (cnt == 100000) {
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <pause_song+0x110>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d107      	bne.n	8001072 <pause_song+0xce>
    	   LED_Toggle(EXTERN_LED);
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <pause_song+0x114>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa14 	bl	8000496 <LED_Toggle>
    	   cnt = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    while (going == 1 && lightState == 2) {
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d103      	bne.n	8001080 <pause_song+0xdc>
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <pause_song+0x100>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d0cd      	beq.n	800101c <pause_song+0x78>
        }
        }
    }
    printf("\r\n");
 8001080:	480e      	ldr	r0, [pc, #56]	; (80010bc <pause_song+0x118>)
 8001082:	f000 fad7 	bl	8001634 <puts>
    BUFFER[index] = 0;
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	4413      	add	r3, r2
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
    char* toReturn = BUFFER;  // Return a pointer to BUFFER
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	607b      	str	r3, [r7, #4]
    return toReturn;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	46c5      	mov	sp, r8
}
 8001098:	4618      	mov	r0, r3
 800109a:	3720      	adds	r7, #32
 800109c:	46bd      	mov	sp, r7
 800109e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010a2:	bf00      	nop
 80010a4:	2000cbf8 	.word	0x2000cbf8
 80010a8:	20007ccc 	.word	0x20007ccc
 80010ac:	2000cb74 	.word	0x2000cb74
 80010b0:	40004400 	.word	0x40004400
 80010b4:	000186a0 	.word	0x000186a0
 80010b8:	20007cdc 	.word	0x20007cdc
 80010bc:	08002c3c 	.word	0x08002c3c

080010c0 <take_input_remote>:
	     }
	}
	init_player();
}

void take_input_remote(char initialInput){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
	char* input = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
	//if inital input exists set input equal to
		if(initialInput == 0){
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d105      	bne.n	80010e0 <take_input_remote+0x20>
			input = read_line();
 80010d4:	f000 faf0 	bl	80016b8 <read_line>
 80010d8:	60f8      	str	r0, [r7, #12]
			initialInput = *input;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
		}
		*input = initialInput;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	79fa      	ldrb	r2, [r7, #7]
 80010e4:	701a      	strb	r2, [r3, #0]
		//check input vs commands
		if(strcmp(input,"NEXT") == 0){
 80010e6:	492b      	ldr	r1, [pc, #172]	; (8001194 <take_input_remote+0xd4>)
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f7ff f871 	bl	80001d0 <strcmp>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d105      	bne.n	8001100 <take_input_remote+0x40>
			next_song();
 80010f4:	f7ff fe60 	bl	8000db8 <next_song>
			printf("\r\n");
 80010f8:	4827      	ldr	r0, [pc, #156]	; (8001198 <take_input_remote+0xd8>)
 80010fa:	f000 fa9b 	bl	8001634 <puts>
			printf("\r\nInvalid Input");
			printf("\r\n");
			}
		}

}
 80010fe:	e045      	b.n	800118c <take_input_remote+0xcc>
		else if(strcmp(input,"PLAY") == 0){
 8001100:	4926      	ldr	r1, [pc, #152]	; (800119c <take_input_remote+0xdc>)
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff f864 	bl	80001d0 <strcmp>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d105      	bne.n	800111a <take_input_remote+0x5a>
			play_song();
 800110e:	f7ff fee7 	bl	8000ee0 <play_song>
			printf("\r\n");
 8001112:	4821      	ldr	r0, [pc, #132]	; (8001198 <take_input_remote+0xd8>)
 8001114:	f000 fa8e 	bl	8001634 <puts>
}
 8001118:	e038      	b.n	800118c <take_input_remote+0xcc>
		else if(strcmp(input,"STOP") == 0){
 800111a:	4921      	ldr	r1, [pc, #132]	; (80011a0 <take_input_remote+0xe0>)
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f7ff f857 	bl	80001d0 <strcmp>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d105      	bne.n	8001134 <take_input_remote+0x74>
			stop_song();
 8001128:	f7ff ff2a 	bl	8000f80 <stop_song>
			printf("\r\n");
 800112c:	481a      	ldr	r0, [pc, #104]	; (8001198 <take_input_remote+0xd8>)
 800112e:	f000 fa81 	bl	8001634 <puts>
}
 8001132:	e02b      	b.n	800118c <take_input_remote+0xcc>
		else if(strcmp(input,"HELP") == 0){
 8001134:	491b      	ldr	r1, [pc, #108]	; (80011a4 <take_input_remote+0xe4>)
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f7ff f84a 	bl	80001d0 <strcmp>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d103      	bne.n	800114a <take_input_remote+0x8a>
			printf("\n\rAvailable User Commands\n\rNEXT - Show next song info\n\rPLAY - Play the song (LED on)\n\rPAUSE - Pause the song (LED flash)\n\rSTOP - Stop the song (LED off)\n\r");
 8001142:	4819      	ldr	r0, [pc, #100]	; (80011a8 <take_input_remote+0xe8>)
 8001144:	f000 fa9c 	bl	8001680 <printf>
}
 8001148:	e020      	b.n	800118c <take_input_remote+0xcc>
		else if(strcmp(input,"PAUSE") == 0){
 800114a:	4918      	ldr	r1, [pc, #96]	; (80011ac <take_input_remote+0xec>)
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f7ff f83f 	bl	80001d0 <strcmp>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10b      	bne.n	8001170 <take_input_remote+0xb0>
			printf("\r\n");
 8001158:	480f      	ldr	r0, [pc, #60]	; (8001198 <take_input_remote+0xd8>)
 800115a:	f000 fa6b 	bl	8001634 <puts>
			char* pausedI = pause_song();
 800115e:	f7ff ff21 	bl	8000fa4 <pause_song>
 8001162:	60b8      	str	r0, [r7, #8]
			take_input_remote(*pausedI);
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ffa9 	bl	80010c0 <take_input_remote>
}
 800116e:	e00d      	b.n	800118c <take_input_remote+0xcc>
			if(isRemote == 0){
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <take_input_remote+0xf0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d103      	bne.n	8001180 <take_input_remote+0xc0>
				printf("\r");
 8001178:	200d      	movs	r0, #13
 800117a:	f000 fa73 	bl	8001664 <putchar>
}
 800117e:	e005      	b.n	800118c <take_input_remote+0xcc>
			printf("\r\nInvalid Input");
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <take_input_remote+0xf4>)
 8001182:	f000 fa7d 	bl	8001680 <printf>
			printf("\r\n");
 8001186:	4804      	ldr	r0, [pc, #16]	; (8001198 <take_input_remote+0xd8>)
 8001188:	f000 fa54 	bl	8001634 <puts>
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	08002c60 	.word	0x08002c60
 8001198:	08002c3c 	.word	0x08002c3c
 800119c:	08002c68 	.word	0x08002c68
 80011a0:	08002c70 	.word	0x08002c70
 80011a4:	08002c78 	.word	0x08002c78
 80011a8:	08002c80 	.word	0x08002c80
 80011ac:	08002d1c 	.word	0x08002d1c
 80011b0:	20007cd0 	.word	0x20007cd0
 80011b4:	08002d24 	.word	0x08002d24

080011b8 <mode_print>:

void mode_print(){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	if(isRemote == 1){
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <mode_print+0x28>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d107      	bne.n	80011d4 <mode_print+0x1c>
			printf("\r\n%s","***REMOTE MODE ACTIVE***");
 80011c4:	4907      	ldr	r1, [pc, #28]	; (80011e4 <mode_print+0x2c>)
 80011c6:	4808      	ldr	r0, [pc, #32]	; (80011e8 <mode_print+0x30>)
 80011c8:	f000 fa5a 	bl	8001680 <printf>
			printf("\n\rAvailable User Commands\n\rNEXT - Show next song info\n\rPLAY - Play the song (LED on)\n\rPAUSE - Pause the song (LED flash)\n\rSTOP - Stop the song (LED off)\n\r");
 80011cc:	4807      	ldr	r0, [pc, #28]	; (80011ec <mode_print+0x34>)
 80011ce:	f000 fa57 	bl	8001680 <printf>
		}else{
			 printf("\r\n%s\r\n","***MANUAL OVERRIDE MODE ACTIVE***");
	}
}
 80011d2:	e003      	b.n	80011dc <mode_print+0x24>
			 printf("\r\n%s\r\n","***MANUAL OVERRIDE MODE ACTIVE***");
 80011d4:	4906      	ldr	r1, [pc, #24]	; (80011f0 <mode_print+0x38>)
 80011d6:	4807      	ldr	r0, [pc, #28]	; (80011f4 <mode_print+0x3c>)
 80011d8:	f000 fa52 	bl	8001680 <printf>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20007cd0 	.word	0x20007cd0
 80011e4:	08002d34 	.word	0x08002d34
 80011e8:	08002bec 	.word	0x08002bec
 80011ec:	08002c80 	.word	0x08002c80
 80011f0:	08002d50 	.word	0x08002d50
 80011f4:	08002c58 	.word	0x08002c58

080011f8 <init_player>:

void init_player(){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	init_systick();
 80011fe:	f000 fafd 	bl	80017fc <init_systick>
	//initialize the player
	while(0 == 0){
		if(isRemote == 1){
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <init_player+0x58>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d103      	bne.n	8001212 <init_player+0x1a>
			take_input_remote(0);
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff ff58 	bl	80010c0 <take_input_remote>
 8001210:	e7f7      	b.n	8001202 <init_player+0xa>
		}else{
			if(lightState == 2){
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <init_player+0x5c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b02      	cmp	r3, #2
 8001218:	d1f3      	bne.n	8001202 <init_player+0xa>
				int cnt = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
					while (cnt < 100000) {
 800121e:	e011      	b.n	8001244 <init_player+0x4c>
						cnt++;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3301      	adds	r3, #1
 8001224:	607b      	str	r3, [r7, #4]
						delay_systick();
 8001226:	f000 fb19 	bl	800185c <delay_systick>
						if (cnt == 100000) {
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <init_player+0x60>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d108      	bne.n	8001244 <init_player+0x4c>
							LED_Toggle(EXTERN_LED);
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <init_player+0x64>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f92c 	bl	8000496 <LED_Toggle>
							PLAY_PAUSE_TOG = 0;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <init_player+0x68>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
					while (cnt < 100000) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a07      	ldr	r2, [pc, #28]	; (8001264 <init_player+0x6c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	dde9      	ble.n	8001220 <init_player+0x28>
		if(isRemote == 1){
 800124c:	e7d9      	b.n	8001202 <init_player+0xa>
 800124e:	bf00      	nop
 8001250:	20007cd0 	.word	0x20007cd0
 8001254:	2000cbf8 	.word	0x2000cbf8
 8001258:	000186a0 	.word	0x000186a0
 800125c:	20007cdc 	.word	0x20007cdc
 8001260:	2000cb74 	.word	0x2000cb74
 8001264:	0001869f 	.word	0x0001869f

08001268 <getTempo>:
#include "string.h"
#include "stdio.h"

char songCopyright[128] = {};
char songTitle[128] = {};
int getTempo(song song){
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	463b      	mov	r3, r7
 8001270:	e883 0003 	stmia.w	r3, {r0, r1}
	int i = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
	while(0==0){
		if(song.p_song[i] == 255 && song.p_song[i+1] == 81 && song.p_song[i+2] == 3 ){
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4413      	add	r3, r2
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2bff      	cmp	r3, #255	; 0xff
 8001282:	d121      	bne.n	80012c8 <getTempo+0x60>
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3301      	adds	r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b51      	cmp	r3, #81	; 0x51
 8001290:	d11a      	bne.n	80012c8 <getTempo+0x60>
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3302      	adds	r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d113      	bne.n	80012c8 <getTempo+0x60>
			return ((song.p_song[i + 3]) << 16) | ((song.p_song[i + 4]) << 8) | (song.p_song[i + 5]);
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3303      	adds	r3, #3
 80012a6:	4413      	add	r3, r2
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	041a      	lsls	r2, r3, #16
 80012ac:	6839      	ldr	r1, [r7, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3304      	adds	r3, #4
 80012b2:	440b      	add	r3, r1
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	4313      	orrs	r3, r2
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	3205      	adds	r2, #5
 80012c0:	440a      	add	r2, r1
 80012c2:	7812      	ldrb	r2, [r2, #0]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	e003      	b.n	80012d0 <getTempo+0x68>
		}
		i++;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
		if(song.p_song[i] == 255 && song.p_song[i+1] == 81 && song.p_song[i+2] == 3 ){
 80012ce:	e7d3      	b.n	8001278 <getTempo+0x10>
	}
	return 0;
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <getSongTitle>:

void getSongTitle(song song, int i){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0a8      	sub	sp, #160	; 0xa0
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80012ea:	607a      	str	r2, [r7, #4]

	char songTitle[128] = {};
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	f107 0318 	add.w	r3, r7, #24
 80012f4:	227c      	movs	r2, #124	; 0x7c
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 ffa5 	bl	8002248 <memset>
	int titleIndex = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	int numToCount = song.p_song[i+2];
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3302      	adds	r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	i++;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3301      	adds	r3, #1
 8001316:	607b      	str	r3, [r7, #4]
	for(int p = i; p<=numToCount+i+1;p++){
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800131e:	e015      	b.n	800134c <getSongTitle+0x70>
		songTitle[titleIndex] = (char)(song.p_song[p]);
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001326:	4413      	add	r3, r2
 8001328:	7819      	ldrb	r1, [r3, #0]
 800132a:	f107 0214 	add.w	r2, r7, #20
 800132e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001332:	4413      	add	r3, r2
 8001334:	460a      	mov	r2, r1
 8001336:	701a      	strb	r2, [r3, #0]
		titleIndex++;
 8001338:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800133c:	3301      	adds	r3, #1
 800133e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	for(int p = i; p<=numToCount+i+1;p++){
 8001342:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001346:	3301      	adds	r3, #1
 8001348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800134c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	3301      	adds	r3, #1
 8001356:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800135a:	429a      	cmp	r2, r3
 800135c:	dde0      	ble.n	8001320 <getSongTitle+0x44>
	}
	strcpy(currSongTitle,songTitle);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <getSongTitle+0x98>)
 8001366:	f000 ffa3 	bl	80022b0 <strcpy>
}
 800136a:	bf00      	nop
 800136c:	37a0      	adds	r7, #160	; 0xa0
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000cbfc 	.word	0x2000cbfc

08001378 <getCopyright>:

void getCopyright(song song){
 8001378:	b580      	push	{r7, lr}
 800137a:	b0a6      	sub	sp, #152	; 0x98
 800137c:	af00      	add	r7, sp, #0
 800137e:	463b      	mov	r3, r7
 8001380:	e883 0003 	stmia.w	r3, {r0, r1}
	char songCopyright[128] = {};
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	227c      	movs	r2, #124	; 0x7c
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f000 ff59 	bl	8002248 <memset>
	int copyrightIndex = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	int i = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	int mtrkCnt = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	while(0==0){
		if(song.p_song[i] == 255 && song.p_song[i+1] == 2 ){
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2bff      	cmp	r3, #255	; 0xff
 80013b4:	d107      	bne.n	80013c6 <getCopyright+0x4e>
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013bc:	3301      	adds	r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d02d      	beq.n	8001422 <getCopyright+0xaa>
			break;
		}
		if(song.p_song[i] == 77 && song.p_song[i+1] == 84 && song.p_song[i+2] == 114 && song.p_song[i+3] == 107 ){
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b4d      	cmp	r3, #77	; 0x4d
 80013d2:	d11c      	bne.n	800140e <getCopyright+0x96>
 80013d4:	683a      	ldr	r2, [r7, #0]
 80013d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013da:	3301      	adds	r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b54      	cmp	r3, #84	; 0x54
 80013e2:	d114      	bne.n	800140e <getCopyright+0x96>
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013ea:	3302      	adds	r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b72      	cmp	r3, #114	; 0x72
 80013f2:	d10c      	bne.n	800140e <getCopyright+0x96>
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013fa:	3303      	adds	r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b6b      	cmp	r3, #107	; 0x6b
 8001402:	d104      	bne.n	800140e <getCopyright+0x96>
					mtrkCnt++;
 8001404:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001408:	3301      	adds	r3, #1
 800140a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		}
		i++;
 800140e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001412:	3301      	adds	r3, #1
 8001414:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		if(mtrkCnt == 2){
 8001418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800141c:	2b02      	cmp	r3, #2
 800141e:	d002      	beq.n	8001426 <getCopyright+0xae>
		if(song.p_song[i] == 255 && song.p_song[i+1] == 2 ){
 8001420:	e7c2      	b.n	80013a8 <getCopyright+0x30>
			break;
 8001422:	bf00      	nop
 8001424:	e000      	b.n	8001428 <getCopyright+0xb0>
			break;
 8001426:	bf00      	nop
		}
	}
	//if mtrk second was not found copyright exists
	if(mtrkCnt != 2){
 8001428:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800142c:	2b02      	cmp	r3, #2
 800142e:	d02f      	beq.n	8001490 <getCopyright+0x118>
		i++;
 8001430:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001434:	3301      	adds	r3, #1
 8001436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		for(int p = i+2; p<=song.p_song[i+2]+i+1;p++){
 800143a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800143e:	3302      	adds	r3, #2
 8001440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001444:	e015      	b.n	8001472 <getCopyright+0xfa>
			songCopyright[copyrightIndex] = (char)(song.p_song[p]);
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800144c:	4413      	add	r3, r2
 800144e:	7819      	ldrb	r1, [r3, #0]
 8001450:	f107 0208 	add.w	r2, r7, #8
 8001454:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001458:	4413      	add	r3, r2
 800145a:	460a      	mov	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
			copyrightIndex++;
 800145e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001462:	3301      	adds	r3, #1
 8001464:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		for(int p = i+2; p<=song.p_song[i+2]+i+1;p++){
 8001468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800146c:	3301      	adds	r3, #1
 800146e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001478:	3302      	adds	r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001484:	4413      	add	r3, r2
 8001486:	3301      	adds	r3, #1
 8001488:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800148c:	429a      	cmp	r2, r3
 800148e:	ddda      	ble.n	8001446 <getCopyright+0xce>
		}
	}
	strcpy(currSongCopyright,songCopyright);
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	4619      	mov	r1, r3
 8001496:	4803      	ldr	r0, [pc, #12]	; (80014a4 <getCopyright+0x12c>)
 8001498:	f000 ff0a 	bl	80022b0 <strcpy>
}
 800149c:	bf00      	nop
 800149e:	3798      	adds	r7, #152	; 0x98
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000cc7c 	.word	0x2000cc7c

080014a8 <USART2_IRQHandler>:
uint32_t buttonPressCount = 0;
uint32_t ticks = 0;
uint32_t lastButtonPressTime;

// Interrupt handler for USART2
void USART2_IRQHandler(void){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
    uint8_t ch = USART_Read(USART2);
 80014ae:	4808      	ldr	r0, [pc, #32]	; (80014d0 <USART2_IRQHandler+0x28>)
 80014b0:	f7ff f9de 	bl	8000870 <USART_Read>
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
    BUFFER[0] = ch;
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <USART2_IRQHandler+0x2c>)
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	7013      	strb	r3, [r2, #0]
    printf("%c",ch);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f8cf 	bl	8001664 <putchar>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40004400 	.word	0x40004400
 80014d4:	2000cb78 	.word	0x2000cb78

080014d8 <SysTick_Handler>:

// SysTick interrupt handler
void SysTick_Handler(void) {
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
    ticks++;  // Increment the counter on each SysTick interrupt
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SysTick_Handler+0x18>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	3301      	adds	r3, #1
 80014e2:	4a03      	ldr	r2, [pc, #12]	; (80014f0 <SysTick_Handler+0x18>)
 80014e4:	6013      	str	r3, [r2, #0]
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	2000cd00 	.word	0x2000cd00

080014f4 <EXTI15_10_IRQHandler>:

// EXTI15_10 interrupt handler
void EXTI15_10_IRQHandler(void){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
    // Toggle the isRemote variable and reset lightState
    isRemote = !isRemote;
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <EXTI15_10_IRQHandler+0x3c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	bf0c      	ite	eq
 8001500:	2301      	moveq	r3, #1
 8001502:	2300      	movne	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	461a      	mov	r2, r3
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <EXTI15_10_IRQHandler+0x3c>)
 800150a:	601a      	str	r2, [r3, #0]
    lightState = 0;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <EXTI15_10_IRQHandler+0x40>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
    LED_Off(EXTERN_LED);
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <EXTI15_10_IRQHandler+0x44>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe ffa5 	bl	8000468 <LED_Off>
    mode_print();
 800151e:	f7ff fe4b 	bl	80011b8 <mode_print>

    // Handle EXTI interrupt for GPIO_PIN_13
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001522:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001526:	f000 fe4b 	bl	80021c0 <HAL_GPIO_EXTI_IRQHandler>
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20007cd0 	.word	0x20007cd0
 8001534:	2000cbf8 	.word	0x2000cbf8
 8001538:	20007cdc 	.word	0x20007cdc

0800153c <EXTI9_5_IRQHandler>:

// EXTI9_5 interrupt handler
void EXTI9_5_IRQHandler(void) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
    // Initialize SysTick timer
    init_systick();
 8001542:	f000 f95b 	bl	80017fc <init_systick>

    // Increment buttonPressCount
    buttonPressCount++;
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <EXTI9_5_IRQHandler+0xb4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	4a28      	ldr	r2, [pc, #160]	; (80015f0 <EXTI9_5_IRQHandler+0xb4>)
 800154e:	6013      	str	r3, [r2, #0]

    // Record the start time of the button press
    uint32_t startTime = ticks;
 8001550:	4b28      	ldr	r3, [pc, #160]	; (80015f4 <EXTI9_5_IRQHandler+0xb8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60bb      	str	r3, [r7, #8]

    // Calculate time since the last button press
    uint32_t timeSinceLastPress = startTime - lastButtonPressTime;
 8001556:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <EXTI9_5_IRQHandler+0xbc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	607b      	str	r3, [r7, #4]

    // Update buttonPressCount based on time since last press
    if (timeSinceLastPress <= 100000) {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a26      	ldr	r2, [pc, #152]	; (80015fc <EXTI9_5_IRQHandler+0xc0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d805      	bhi.n	8001574 <EXTI9_5_IRQHandler+0x38>
        buttonPressCount++;
 8001568:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <EXTI9_5_IRQHandler+0xb4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	4a20      	ldr	r2, [pc, #128]	; (80015f0 <EXTI9_5_IRQHandler+0xb4>)
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e002      	b.n	800157a <EXTI9_5_IRQHandler+0x3e>
    } else {
        buttonPressCount = 1;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <EXTI9_5_IRQHandler+0xb4>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]
    }

    // Update the last button press time
    lastButtonPressTime = startTime;
 800157a:	4a1f      	ldr	r2, [pc, #124]	; (80015f8 <EXTI9_5_IRQHandler+0xbc>)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	6013      	str	r3, [r2, #0]

    // Wait for the button to be released
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
 8001580:	bf00      	nop
 8001582:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158a:	f000 fe01 	bl	8002190 <HAL_GPIO_ReadPin>
 800158e:	4603      	mov	r3, r0
 8001590:	2b01      	cmp	r3, #1
 8001592:	d0f6      	beq.n	8001582 <EXTI9_5_IRQHandler+0x46>
    }

    // Calculate elapsed time since the button press started
    uint32_t elapsed = ticks - startTime;
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <EXTI9_5_IRQHandler+0xb8>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	603b      	str	r3, [r7, #0]

    // Delay for a short period
    for(int i = 0; i < 100000; i++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	e004      	b.n	80015ae <EXTI9_5_IRQHandler+0x72>
        delay_systick();
 80015a4:	f000 f95a 	bl	800185c <delay_systick>
    for(int i = 0; i < 100000; i++) {
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3301      	adds	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4a13      	ldr	r2, [pc, #76]	; (8001600 <EXTI9_5_IRQHandler+0xc4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	ddf6      	ble.n	80015a4 <EXTI9_5_IRQHandler+0x68>
    }

    // Handle different cases based on isRemote and elapsed time
    if (isRemote == 0) {
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <EXTI9_5_IRQHandler+0xc8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d110      	bne.n	80015e0 <EXTI9_5_IRQHandler+0xa4>
        if (elapsed > 100000) {
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <EXTI9_5_IRQHandler+0xc0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d902      	bls.n	80015cc <EXTI9_5_IRQHandler+0x90>
            stop_song();
 80015c6:	f7ff fcdb 	bl	8000f80 <stop_song>
 80015ca:	e009      	b.n	80015e0 <EXTI9_5_IRQHandler+0xa4>
        } else {
            if (PLAY_PAUSE_TOG == 0) {
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <EXTI9_5_IRQHandler+0xcc>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <EXTI9_5_IRQHandler+0x9e>
                play_song();
 80015d4:	f7ff fc84 	bl	8000ee0 <play_song>
 80015d8:	e002      	b.n	80015e0 <EXTI9_5_IRQHandler+0xa4>
            } else {
                lightState = 2;
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <EXTI9_5_IRQHandler+0xd0>)
 80015dc:	2202      	movs	r2, #2
 80015de:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Handle EXTI interrupt for S1_Pin
    HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 80015e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015e4:	f000 fdec 	bl	80021c0 <HAL_GPIO_EXTI_IRQHandler>
}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	2000ccfc 	.word	0x2000ccfc
 80015f4:	2000cd00 	.word	0x2000cd00
 80015f8:	2000cd04 	.word	0x2000cd04
 80015fc:	000186a0 	.word	0x000186a0
 8001600:	0001869f 	.word	0x0001869f
 8001604:	20007cd0 	.word	0x20007cd0
 8001608:	2000cb74 	.word	0x2000cb74
 800160c:	2000cbf8 	.word	0x2000cbf8

08001610 <print_string>:
#include <stdio.h>
#include <stdarg.h>

static char buffer[128];

static void print_string (const char* string, int len) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
    USART_Write (USART2, (unsigned char*) string, len);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4803      	ldr	r0, [pc, #12]	; (8001630 <print_string+0x20>)
 8001622:	f7ff f950 	bl	80008c6 <USART_Write>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40004400 	.word	0x40004400

08001634 <puts>:

int puts (const char* string){
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
    int len = strlen (string);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7fe fdd1 	bl	80001e4 <strlen>
 8001642:	4603      	mov	r3, r0
 8001644:	60fb      	str	r3, [r7, #12]
    print_string (string, len);
 8001646:	68f9      	ldr	r1, [r7, #12]
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ffe1 	bl	8001610 <print_string>
    print_string ("\n", 1);
 800164e:	2101      	movs	r1, #1
 8001650:	4803      	ldr	r0, [pc, #12]	; (8001660 <puts+0x2c>)
 8001652:	f7ff ffdd 	bl	8001610 <print_string>
    return len;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	08002d74 	.word	0x08002d74

08001664 <putchar>:

int putchar (int chr){
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
    print_string ((char*)&chr, 1);
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2101      	movs	r1, #1
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ffcd 	bl	8001610 <print_string>
    return chr;
 8001676:	687b      	ldr	r3, [r7, #4]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <printf>:

int printf (const char* format, ...) {
 8001680:	b40f      	push	{r0, r1, r2, r3}
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
    va_list aptr;
    int ret;

    va_start(aptr, format);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	603b      	str	r3, [r7, #0]
    ret = vsprintf(buffer, format, aptr);
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	6939      	ldr	r1, [r7, #16]
 8001692:	4808      	ldr	r0, [pc, #32]	; (80016b4 <printf+0x34>)
 8001694:	f000 fdce 	bl	8002234 <vsiprintf>
 8001698:	6078      	str	r0, [r7, #4]
    va_end(aptr);
    print_string (buffer, ret);
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <printf+0x34>)
 800169e:	f7ff ffb7 	bl	8001610 <print_string>

    return(ret);
 80016a2:	687b      	ldr	r3, [r7, #4]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016ae:	b004      	add	sp, #16
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	2000cd08 	.word	0x2000cd08

080016b8 <read_line>:
#include "LED.h"
#include "project.h"
static char BUER[128];


char* read_line(){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
	//read one characterA
	//print that character on it's own line
	int index = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
	char ch = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	70fb      	strb	r3, [r7, #3]
	while(ch != '\r'){
 80016c6:	e017      	b.n	80016f8 <read_line+0x40>
		if(isRemote == 0){
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <read_line+0x60>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d017      	beq.n	8001700 <read_line+0x48>
			break;
		}
		ch = (char)USART_Read_Nonblocking(USART2);
 80016d0:	4812      	ldr	r0, [pc, #72]	; (800171c <read_line+0x64>)
 80016d2:	f7ff f8e2 	bl	800089a <USART_Read_Nonblocking>
 80016d6:	4603      	mov	r3, r0
 80016d8:	70fb      	strb	r3, [r7, #3]
		if(ch != '\0'){
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00b      	beq.n	80016f8 <read_line+0x40>
			printf("%c",ch);
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ffbe 	bl	8001664 <putchar>
			BUER[index] = ch;
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <read_line+0x68>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	78fa      	ldrb	r2, [r7, #3]
 80016f0:	701a      	strb	r2, [r3, #0]
			index++;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3301      	adds	r3, #1
 80016f6:	607b      	str	r3, [r7, #4]
	while(ch != '\r'){
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	2b0d      	cmp	r3, #13
 80016fc:	d1e4      	bne.n	80016c8 <read_line+0x10>
 80016fe:	e000      	b.n	8001702 <read_line+0x4a>
			break;
 8001700:	bf00      	nop
		}
	}
	BUER[index - 1] = 0;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3b01      	subs	r3, #1
 8001706:	4a06      	ldr	r2, [pc, #24]	; (8001720 <read_line+0x68>)
 8001708:	2100      	movs	r1, #0
 800170a:	54d1      	strb	r1, [r2, r3]
	return BUER;
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <read_line+0x68>)

}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20007cd0 	.word	0x20007cd0
 800171c:	40004400 	.word	0x40004400
 8001720:	2000cd88 	.word	0x2000cd88

08001724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <_sbrk+0x5c>)
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <_sbrk+0x60>)
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <_sbrk+0x64>)
 8001742:	4a12      	ldr	r2, [pc, #72]	; (800178c <_sbrk+0x68>)
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	429a      	cmp	r2, r3
 8001752:	d207      	bcs.n	8001764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001754:	f000 fd80 	bl	8002258 <__errno>
 8001758:	4603      	mov	r3, r0
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	e009      	b.n	8001778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <_sbrk+0x64>)
 8001774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20018000 	.word	0x20018000
 8001784:	00000400 	.word	0x00000400
 8001788:	2000ce08 	.word	0x2000ce08
 800178c:	2000cf58 	.word	0x2000cf58

08001790 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <SystemInit+0x64>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179a:	4a16      	ldr	r2, [pc, #88]	; (80017f4 <SystemInit+0x64>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <SystemInit+0x68>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a13      	ldr	r2, [pc, #76]	; (80017f8 <SystemInit+0x68>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <SystemInit+0x68>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80017b6:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <SystemInit+0x68>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <SystemInit+0x68>)
 80017bc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80017c0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80017c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <SystemInit+0x68>)
 80017c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <SystemInit+0x68>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <SystemInit+0x68>)
 80017d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80017da:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <SystemInit+0x68>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <SystemInit+0x64>)
 80017e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017e6:	609a      	str	r2, [r3, #8]
#endif
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00
 80017f8:	40021000 	.word	0x40021000

080017fc <init_systick>:
	uint32_t CVR;
	uint32_t CALIB;
};
struct SYST* SYST_TICK = (struct SYST*) 0xE000E010;
// This function is to Initialize SysTick registers
struct SYST* init_systick(){
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
		//clear csr register
		SYST_TICK->CSR &= ~(1 << 0);;
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <init_systick+0x58>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <init_systick+0x58>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0201 	bic.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]
	    // Set timer to 10 ms
	    SYST_TICK->RVR = 799;
 8001810:	4b10      	ldr	r3, [pc, #64]	; (8001854 <init_systick+0x58>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f240 321f 	movw	r2, #799	; 0x31f
 8001818:	605a      	str	r2, [r3, #4]
	    //Set to internal clock
	    SYST_TICK->CSR |= (1<<2); // Use pc source
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <init_systick+0x58>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <init_systick+0x58>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0204 	orr.w	r2, r2, #4
 8001828:	601a      	str	r2, [r3, #0]
	    //Enable timer
	    SYST_TICK->CSR |= (1<<0); // Enable
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <init_systick+0x58>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <init_systick+0x58>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0201 	orr.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]
	    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <init_systick+0x5c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a06      	ldr	r2, [pc, #24]	; (8001858 <init_systick+0x5c>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6013      	str	r3, [r2, #0]
	    return SYST_TICK;
 8001846:	4b03      	ldr	r3, [pc, #12]	; (8001854 <init_systick+0x58>)
 8001848:	681b      	ldr	r3, [r3, #0]
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	20007cd8 	.word	0x20007cd8
 8001858:	e000e010 	.word	0xe000e010

0800185c <delay_systick>:

// This function is to create delay using SysTick timer counter
void delay_systick(){
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
		int x = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
		while(x == 0){
 8001866:	e007      	b.n	8001878 <delay_systick+0x1c>
			if ((SYST_TICK->CSR >> 16) == 1) {
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <delay_systick+0x30>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	0c1b      	lsrs	r3, r3, #16
 8001870:	2b01      	cmp	r3, #1
 8001872:	d101      	bne.n	8001878 <delay_systick+0x1c>
		         x = 1;
 8001874:	2301      	movs	r3, #1
 8001876:	607b      	str	r3, [r7, #4]
		while(x == 0){
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f4      	beq.n	8001868 <delay_systick+0xc>
			}
		}
}
 800187e:	bf00      	nop
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	20007cd8 	.word	0x20007cd8

08001890 <main>:
#include "sqr_wave.h"
#include "hw8.h"

int EXTERN_LED = 6;

int main(void){
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 8001894:	f7fe fe16 	bl	80004c4 <System_Clock_Init>
	UART2_Init ();
 8001898:	f7fe fef2 	bl	8000680 <UART2_Init>
	LED_Init(EXTERN_LED);
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <main+0x30>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fd6c 	bl	8000380 <LED_Init>
	init_syst();
 80018a8:	f7ff f8ea 	bl	8000a80 <init_syst>
	GPIO_Init();
 80018ac:	f7fe fcf8 	bl	80002a0 <GPIO_Init>
//
//	run_wave(2000);
	mode_print();
 80018b0:	f7ff fc82 	bl	80011b8 <mode_print>
	init_player();
 80018b4:	f7ff fca0 	bl	80011f8 <init_player>
 80018b8:	2300      	movs	r3, #0

}
 80018ba:	4618      	mov	r0, r3
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20007cdc 	.word	0x20007cdc

080018c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c8:	f7ff ff62 	bl	8001790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018cc:	480c      	ldr	r0, [pc, #48]	; (8001900 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ce:	490d      	ldr	r1, [pc, #52]	; (8001904 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <LoopForever+0xe>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e4:	4c0a      	ldr	r4, [pc, #40]	; (8001910 <LoopForever+0x16>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f2:	f000 fcb7 	bl	8002264 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018f6:	f7ff ffcb 	bl	8001890 <main>

080018fa <LoopForever>:

LoopForever:
    b LoopForever
 80018fa:	e7fe      	b.n	80018fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001904:	20007d34 	.word	0x20007d34
  ldr r2, =_sidata
 8001908:	08002db4 	.word	0x08002db4
  ldr r2, =_sbss
 800190c:	20007d34 	.word	0x20007d34
  ldr r4, =_ebss
 8001910:	2000cf58 	.word	0x2000cf58

08001914 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC1_2_IRQHandler>
	...

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_GetTick+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	2000ce0c 	.word	0x2000ce0c

08001930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001938:	f7ff ffee 	bl	8001918 <HAL_GetTick>
 800193c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d005      	beq.n	8001956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_Delay+0x44>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001956:	bf00      	nop
 8001958:	f7ff ffde 	bl	8001918 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	429a      	cmp	r2, r3
 8001966:	d8f7      	bhi.n	8001958 <HAL_Delay+0x28>
  {
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20007ce0 	.word	0x20007ce0

08001978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <__NVIC_GetPriorityGrouping+0x18>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	0a1b      	lsrs	r3, r3, #8
 8001982:	f003 0307 	and.w	r3, r3, #7
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	db0b      	blt.n	80019be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	f003 021f 	and.w	r2, r3, #31
 80019ac:	4907      	ldr	r1, [pc, #28]	; (80019cc <__NVIC_EnableIRQ+0x38>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	095b      	lsrs	r3, r3, #5
 80019b4:	2001      	movs	r0, #1
 80019b6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000e100 	.word	0xe000e100

080019d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	6039      	str	r1, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	db0a      	blt.n	80019fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	490c      	ldr	r1, [pc, #48]	; (8001a1c <__NVIC_SetPriority+0x4c>)
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	0112      	lsls	r2, r2, #4
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	440b      	add	r3, r1
 80019f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f8:	e00a      	b.n	8001a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4908      	ldr	r1, [pc, #32]	; (8001a20 <__NVIC_SetPriority+0x50>)
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	3b04      	subs	r3, #4
 8001a08:	0112      	lsls	r2, r2, #4
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	761a      	strb	r2, [r3, #24]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f1c3 0307 	rsb	r3, r3, #7
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	bf28      	it	cs
 8001a42:	2304      	movcs	r3, #4
 8001a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d902      	bls.n	8001a54 <NVIC_EncodePriority+0x30>
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3b03      	subs	r3, #3
 8001a52:	e000      	b.n	8001a56 <NVIC_EncodePriority+0x32>
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43da      	mvns	r2, r3
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	401a      	ands	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	43d9      	mvns	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	4313      	orrs	r3, r2
         );
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3724      	adds	r7, #36	; 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9c:	f7ff ff6c 	bl	8001978 <__NVIC_GetPriorityGrouping>
 8001aa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	6978      	ldr	r0, [r7, #20]
 8001aa8:	f7ff ffbc 	bl	8001a24 <NVIC_EncodePriority>
 8001aac:	4602      	mov	r2, r0
 8001aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff8b 	bl	80019d0 <__NVIC_SetPriority>
}
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff5f 	bl	8001994 <__NVIC_EnableIRQ>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e014      	b.n	8001b1a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	791b      	ldrb	r3, [r3, #4]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d105      	bne.n	8001b06 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7fe ff33 	bl	800096c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	795b      	ldrb	r3, [r3, #5]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_DAC_Start+0x16>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e03b      	b.n	8001bb0 <HAL_DAC_Start+0x8e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2202      	movs	r2, #2
 8001b42:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6819      	ldr	r1, [r3, #0]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2201      	movs	r2, #1
 8001b52:	409a      	lsls	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10f      	bne.n	8001b82 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d118      	bne.n	8001ba2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	e00f      	b.n	8001ba2 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001b8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b90:	d107      	bne.n	8001ba2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0202 	orr.w	r2, r2, #2
 8001ba0:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
 8001bc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d105      	bne.n	8001be6 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	3308      	adds	r3, #8
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e004      	b.n	8001bf0 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4413      	add	r3, r2
 8001bec:	3314      	adds	r3, #20
 8001bee:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	371c      	adds	r7, #28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b088      	sub	sp, #32
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	795b      	ldrb	r3, [r3, #5]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_DAC_ConfigChannel+0x1c>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e107      	b.n	8001e32 <HAL_DAC_ConfigChannel+0x22c>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d174      	bne.n	8001d20 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001c36:	f7ff fe6f 	bl	8001918 <HAL_GetTick>
 8001c3a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d134      	bne.n	8001cac <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c42:	e011      	b.n	8001c68 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001c44:	f7ff fe68 	bl	8001918 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d90a      	bls.n	8001c68 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	f043 0208 	orr.w	r2, r3, #8
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2203      	movs	r2, #3
 8001c62:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e0e4      	b.n	8001e32 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1e6      	bne.n	8001c44 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f7ff fe5a 	bl	8001930 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	6992      	ldr	r2, [r2, #24]
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40
 8001c86:	e01e      	b.n	8001cc6 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001c88:	f7ff fe46 	bl	8001918 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d90a      	bls.n	8001cac <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f043 0208 	orr.w	r2, r3, #8
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e0c2      	b.n	8001e32 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	dbe8      	blt.n	8001c88 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	f7ff fe3a 	bl	8001930 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	6992      	ldr	r2, [r2, #24]
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	ea02 0103 	and.w	r1, r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	69da      	ldr	r2, [r3, #28]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	409a      	lsls	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	21ff      	movs	r1, #255	; 0xff
 8001d02:	fa01 f303 	lsl.w	r3, r1, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	ea02 0103 	and.w	r1, r2, r3
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	6a1a      	ldr	r2, [r3, #32]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	409a      	lsls	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d11d      	bne.n	8001d64 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	221f      	movs	r2, #31
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2207      	movs	r2, #7
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43da      	mvns	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6819      	ldr	r1, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	22c0      	movs	r2, #192	; 0xc0
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	400a      	ands	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4a:	e17f      	b.n	800214c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2101      	movs	r1, #1
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8171 	beq.w	8002146 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d005      	beq.n	8001e7c <HAL_GPIO_Init+0x40>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d130      	bne.n	8001ede <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	f003 0201 	and.w	r2, r3, #1
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d118      	bne.n	8001f1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	f003 0201 	and.w	r2, r3, #1
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d017      	beq.n	8001f58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	2203      	movs	r2, #3
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d123      	bne.n	8001fac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	08da      	lsrs	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3208      	adds	r2, #8
 8001f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	220f      	movs	r2, #15
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	4013      	ands	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	08da      	lsrs	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3208      	adds	r2, #8
 8001fa6:	6939      	ldr	r1, [r7, #16]
 8001fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0203 	and.w	r2, r3, #3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80ac 	beq.w	8002146 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fee:	4b5f      	ldr	r3, [pc, #380]	; (800216c <HAL_GPIO_Init+0x330>)
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff2:	4a5e      	ldr	r2, [pc, #376]	; (800216c <HAL_GPIO_Init+0x330>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6613      	str	r3, [r2, #96]	; 0x60
 8001ffa:	4b5c      	ldr	r3, [pc, #368]	; (800216c <HAL_GPIO_Init+0x330>)
 8001ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002006:	4a5a      	ldr	r2, [pc, #360]	; (8002170 <HAL_GPIO_Init+0x334>)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	220f      	movs	r2, #15
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002030:	d025      	beq.n	800207e <HAL_GPIO_Init+0x242>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4f      	ldr	r2, [pc, #316]	; (8002174 <HAL_GPIO_Init+0x338>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01f      	beq.n	800207a <HAL_GPIO_Init+0x23e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4e      	ldr	r2, [pc, #312]	; (8002178 <HAL_GPIO_Init+0x33c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d019      	beq.n	8002076 <HAL_GPIO_Init+0x23a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4d      	ldr	r2, [pc, #308]	; (800217c <HAL_GPIO_Init+0x340>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_GPIO_Init+0x236>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4c      	ldr	r2, [pc, #304]	; (8002180 <HAL_GPIO_Init+0x344>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00d      	beq.n	800206e <HAL_GPIO_Init+0x232>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4b      	ldr	r2, [pc, #300]	; (8002184 <HAL_GPIO_Init+0x348>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <HAL_GPIO_Init+0x22e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4a      	ldr	r2, [pc, #296]	; (8002188 <HAL_GPIO_Init+0x34c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_GPIO_Init+0x22a>
 8002062:	2306      	movs	r3, #6
 8002064:	e00c      	b.n	8002080 <HAL_GPIO_Init+0x244>
 8002066:	2307      	movs	r3, #7
 8002068:	e00a      	b.n	8002080 <HAL_GPIO_Init+0x244>
 800206a:	2305      	movs	r3, #5
 800206c:	e008      	b.n	8002080 <HAL_GPIO_Init+0x244>
 800206e:	2304      	movs	r3, #4
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x244>
 8002072:	2303      	movs	r3, #3
 8002074:	e004      	b.n	8002080 <HAL_GPIO_Init+0x244>
 8002076:	2302      	movs	r3, #2
 8002078:	e002      	b.n	8002080 <HAL_GPIO_Init+0x244>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_GPIO_Init+0x244>
 800207e:	2300      	movs	r3, #0
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	f002 0203 	and.w	r2, r2, #3
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	4093      	lsls	r3, r2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002090:	4937      	ldr	r1, [pc, #220]	; (8002170 <HAL_GPIO_Init+0x334>)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800209e:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_GPIO_Init+0x350>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4313      	orrs	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020c2:	4a32      	ldr	r2, [pc, #200]	; (800218c <HAL_GPIO_Init+0x350>)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020c8:	4b30      	ldr	r3, [pc, #192]	; (800218c <HAL_GPIO_Init+0x350>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ec:	4a27      	ldr	r2, [pc, #156]	; (800218c <HAL_GPIO_Init+0x350>)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_GPIO_Init+0x350>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002116:	4a1d      	ldr	r2, [pc, #116]	; (800218c <HAL_GPIO_Init+0x350>)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_GPIO_Init+0x350>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	43db      	mvns	r3, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002140:	4a12      	ldr	r2, [pc, #72]	; (800218c <HAL_GPIO_Init+0x350>)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	3301      	adds	r3, #1
 800214a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa22 f303 	lsr.w	r3, r2, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	f47f ae78 	bne.w	8001e4c <HAL_GPIO_Init+0x10>
  }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	40010000 	.word	0x40010000
 8002174:	48000400 	.word	0x48000400
 8002178:	48000800 	.word	0x48000800
 800217c:	48000c00 	.word	0x48000c00
 8002180:	48001000 	.word	0x48001000
 8002184:	48001400 	.word	0x48001400
 8002188:	48001800 	.word	0x48001800
 800218c:	40010400 	.word	0x40010400

08002190 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	887b      	ldrh	r3, [r7, #2]
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	e001      	b.n	80021b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]

  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d006      	beq.n	80021e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f806 	bl	80021f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40010400 	.word	0x40010400

080021f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <_vsiprintf_r>:
 8002208:	b500      	push	{lr}
 800220a:	b09b      	sub	sp, #108	; 0x6c
 800220c:	9100      	str	r1, [sp, #0]
 800220e:	9104      	str	r1, [sp, #16]
 8002210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002214:	9105      	str	r1, [sp, #20]
 8002216:	9102      	str	r1, [sp, #8]
 8002218:	4905      	ldr	r1, [pc, #20]	; (8002230 <_vsiprintf_r+0x28>)
 800221a:	9103      	str	r1, [sp, #12]
 800221c:	4669      	mov	r1, sp
 800221e:	f000 f9a1 	bl	8002564 <_svfiprintf_r>
 8002222:	9b00      	ldr	r3, [sp, #0]
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
 8002228:	b01b      	add	sp, #108	; 0x6c
 800222a:	f85d fb04 	ldr.w	pc, [sp], #4
 800222e:	bf00      	nop
 8002230:	ffff0208 	.word	0xffff0208

08002234 <vsiprintf>:
 8002234:	4613      	mov	r3, r2
 8002236:	460a      	mov	r2, r1
 8002238:	4601      	mov	r1, r0
 800223a:	4802      	ldr	r0, [pc, #8]	; (8002244 <vsiprintf+0x10>)
 800223c:	6800      	ldr	r0, [r0, #0]
 800223e:	f7ff bfe3 	b.w	8002208 <_vsiprintf_r>
 8002242:	bf00      	nop
 8002244:	20007d30 	.word	0x20007d30

08002248 <memset>:
 8002248:	4402      	add	r2, r0
 800224a:	4603      	mov	r3, r0
 800224c:	4293      	cmp	r3, r2
 800224e:	d100      	bne.n	8002252 <memset+0xa>
 8002250:	4770      	bx	lr
 8002252:	f803 1b01 	strb.w	r1, [r3], #1
 8002256:	e7f9      	b.n	800224c <memset+0x4>

08002258 <__errno>:
 8002258:	4b01      	ldr	r3, [pc, #4]	; (8002260 <__errno+0x8>)
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20007d30 	.word	0x20007d30

08002264 <__libc_init_array>:
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	4d0d      	ldr	r5, [pc, #52]	; (800229c <__libc_init_array+0x38>)
 8002268:	4c0d      	ldr	r4, [pc, #52]	; (80022a0 <__libc_init_array+0x3c>)
 800226a:	1b64      	subs	r4, r4, r5
 800226c:	10a4      	asrs	r4, r4, #2
 800226e:	2600      	movs	r6, #0
 8002270:	42a6      	cmp	r6, r4
 8002272:	d109      	bne.n	8002288 <__libc_init_array+0x24>
 8002274:	4d0b      	ldr	r5, [pc, #44]	; (80022a4 <__libc_init_array+0x40>)
 8002276:	4c0c      	ldr	r4, [pc, #48]	; (80022a8 <__libc_init_array+0x44>)
 8002278:	f000 fc72 	bl	8002b60 <_init>
 800227c:	1b64      	subs	r4, r4, r5
 800227e:	10a4      	asrs	r4, r4, #2
 8002280:	2600      	movs	r6, #0
 8002282:	42a6      	cmp	r6, r4
 8002284:	d105      	bne.n	8002292 <__libc_init_array+0x2e>
 8002286:	bd70      	pop	{r4, r5, r6, pc}
 8002288:	f855 3b04 	ldr.w	r3, [r5], #4
 800228c:	4798      	blx	r3
 800228e:	3601      	adds	r6, #1
 8002290:	e7ee      	b.n	8002270 <__libc_init_array+0xc>
 8002292:	f855 3b04 	ldr.w	r3, [r5], #4
 8002296:	4798      	blx	r3
 8002298:	3601      	adds	r6, #1
 800229a:	e7f2      	b.n	8002282 <__libc_init_array+0x1e>
 800229c:	08002dac 	.word	0x08002dac
 80022a0:	08002dac 	.word	0x08002dac
 80022a4:	08002dac 	.word	0x08002dac
 80022a8:	08002db0 	.word	0x08002db0

080022ac <__retarget_lock_acquire_recursive>:
 80022ac:	4770      	bx	lr

080022ae <__retarget_lock_release_recursive>:
 80022ae:	4770      	bx	lr

080022b0 <strcpy>:
 80022b0:	4603      	mov	r3, r0
 80022b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80022b6:	f803 2b01 	strb.w	r2, [r3], #1
 80022ba:	2a00      	cmp	r2, #0
 80022bc:	d1f9      	bne.n	80022b2 <strcpy+0x2>
 80022be:	4770      	bx	lr

080022c0 <_free_r>:
 80022c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022c2:	2900      	cmp	r1, #0
 80022c4:	d044      	beq.n	8002350 <_free_r+0x90>
 80022c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022ca:	9001      	str	r0, [sp, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f1a1 0404 	sub.w	r4, r1, #4
 80022d2:	bfb8      	it	lt
 80022d4:	18e4      	addlt	r4, r4, r3
 80022d6:	f000 f8df 	bl	8002498 <__malloc_lock>
 80022da:	4a1e      	ldr	r2, [pc, #120]	; (8002354 <_free_r+0x94>)
 80022dc:	9801      	ldr	r0, [sp, #4]
 80022de:	6813      	ldr	r3, [r2, #0]
 80022e0:	b933      	cbnz	r3, 80022f0 <_free_r+0x30>
 80022e2:	6063      	str	r3, [r4, #4]
 80022e4:	6014      	str	r4, [r2, #0]
 80022e6:	b003      	add	sp, #12
 80022e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80022ec:	f000 b8da 	b.w	80024a4 <__malloc_unlock>
 80022f0:	42a3      	cmp	r3, r4
 80022f2:	d908      	bls.n	8002306 <_free_r+0x46>
 80022f4:	6825      	ldr	r5, [r4, #0]
 80022f6:	1961      	adds	r1, r4, r5
 80022f8:	428b      	cmp	r3, r1
 80022fa:	bf01      	itttt	eq
 80022fc:	6819      	ldreq	r1, [r3, #0]
 80022fe:	685b      	ldreq	r3, [r3, #4]
 8002300:	1949      	addeq	r1, r1, r5
 8002302:	6021      	streq	r1, [r4, #0]
 8002304:	e7ed      	b.n	80022e2 <_free_r+0x22>
 8002306:	461a      	mov	r2, r3
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	b10b      	cbz	r3, 8002310 <_free_r+0x50>
 800230c:	42a3      	cmp	r3, r4
 800230e:	d9fa      	bls.n	8002306 <_free_r+0x46>
 8002310:	6811      	ldr	r1, [r2, #0]
 8002312:	1855      	adds	r5, r2, r1
 8002314:	42a5      	cmp	r5, r4
 8002316:	d10b      	bne.n	8002330 <_free_r+0x70>
 8002318:	6824      	ldr	r4, [r4, #0]
 800231a:	4421      	add	r1, r4
 800231c:	1854      	adds	r4, r2, r1
 800231e:	42a3      	cmp	r3, r4
 8002320:	6011      	str	r1, [r2, #0]
 8002322:	d1e0      	bne.n	80022e6 <_free_r+0x26>
 8002324:	681c      	ldr	r4, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	6053      	str	r3, [r2, #4]
 800232a:	440c      	add	r4, r1
 800232c:	6014      	str	r4, [r2, #0]
 800232e:	e7da      	b.n	80022e6 <_free_r+0x26>
 8002330:	d902      	bls.n	8002338 <_free_r+0x78>
 8002332:	230c      	movs	r3, #12
 8002334:	6003      	str	r3, [r0, #0]
 8002336:	e7d6      	b.n	80022e6 <_free_r+0x26>
 8002338:	6825      	ldr	r5, [r4, #0]
 800233a:	1961      	adds	r1, r4, r5
 800233c:	428b      	cmp	r3, r1
 800233e:	bf04      	itt	eq
 8002340:	6819      	ldreq	r1, [r3, #0]
 8002342:	685b      	ldreq	r3, [r3, #4]
 8002344:	6063      	str	r3, [r4, #4]
 8002346:	bf04      	itt	eq
 8002348:	1949      	addeq	r1, r1, r5
 800234a:	6021      	streq	r1, [r4, #0]
 800234c:	6054      	str	r4, [r2, #4]
 800234e:	e7ca      	b.n	80022e6 <_free_r+0x26>
 8002350:	b003      	add	sp, #12
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2000cf50 	.word	0x2000cf50

08002358 <sbrk_aligned>:
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	4e0e      	ldr	r6, [pc, #56]	; (8002394 <sbrk_aligned+0x3c>)
 800235c:	460c      	mov	r4, r1
 800235e:	6831      	ldr	r1, [r6, #0]
 8002360:	4605      	mov	r5, r0
 8002362:	b911      	cbnz	r1, 800236a <sbrk_aligned+0x12>
 8002364:	f000 fba6 	bl	8002ab4 <_sbrk_r>
 8002368:	6030      	str	r0, [r6, #0]
 800236a:	4621      	mov	r1, r4
 800236c:	4628      	mov	r0, r5
 800236e:	f000 fba1 	bl	8002ab4 <_sbrk_r>
 8002372:	1c43      	adds	r3, r0, #1
 8002374:	d00a      	beq.n	800238c <sbrk_aligned+0x34>
 8002376:	1cc4      	adds	r4, r0, #3
 8002378:	f024 0403 	bic.w	r4, r4, #3
 800237c:	42a0      	cmp	r0, r4
 800237e:	d007      	beq.n	8002390 <sbrk_aligned+0x38>
 8002380:	1a21      	subs	r1, r4, r0
 8002382:	4628      	mov	r0, r5
 8002384:	f000 fb96 	bl	8002ab4 <_sbrk_r>
 8002388:	3001      	adds	r0, #1
 800238a:	d101      	bne.n	8002390 <sbrk_aligned+0x38>
 800238c:	f04f 34ff 	mov.w	r4, #4294967295
 8002390:	4620      	mov	r0, r4
 8002392:	bd70      	pop	{r4, r5, r6, pc}
 8002394:	2000cf54 	.word	0x2000cf54

08002398 <_malloc_r>:
 8002398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800239c:	1ccd      	adds	r5, r1, #3
 800239e:	f025 0503 	bic.w	r5, r5, #3
 80023a2:	3508      	adds	r5, #8
 80023a4:	2d0c      	cmp	r5, #12
 80023a6:	bf38      	it	cc
 80023a8:	250c      	movcc	r5, #12
 80023aa:	2d00      	cmp	r5, #0
 80023ac:	4607      	mov	r7, r0
 80023ae:	db01      	blt.n	80023b4 <_malloc_r+0x1c>
 80023b0:	42a9      	cmp	r1, r5
 80023b2:	d905      	bls.n	80023c0 <_malloc_r+0x28>
 80023b4:	230c      	movs	r3, #12
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	2600      	movs	r6, #0
 80023ba:	4630      	mov	r0, r6
 80023bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002494 <_malloc_r+0xfc>
 80023c4:	f000 f868 	bl	8002498 <__malloc_lock>
 80023c8:	f8d8 3000 	ldr.w	r3, [r8]
 80023cc:	461c      	mov	r4, r3
 80023ce:	bb5c      	cbnz	r4, 8002428 <_malloc_r+0x90>
 80023d0:	4629      	mov	r1, r5
 80023d2:	4638      	mov	r0, r7
 80023d4:	f7ff ffc0 	bl	8002358 <sbrk_aligned>
 80023d8:	1c43      	adds	r3, r0, #1
 80023da:	4604      	mov	r4, r0
 80023dc:	d155      	bne.n	800248a <_malloc_r+0xf2>
 80023de:	f8d8 4000 	ldr.w	r4, [r8]
 80023e2:	4626      	mov	r6, r4
 80023e4:	2e00      	cmp	r6, #0
 80023e6:	d145      	bne.n	8002474 <_malloc_r+0xdc>
 80023e8:	2c00      	cmp	r4, #0
 80023ea:	d048      	beq.n	800247e <_malloc_r+0xe6>
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	4631      	mov	r1, r6
 80023f0:	4638      	mov	r0, r7
 80023f2:	eb04 0903 	add.w	r9, r4, r3
 80023f6:	f000 fb5d 	bl	8002ab4 <_sbrk_r>
 80023fa:	4581      	cmp	r9, r0
 80023fc:	d13f      	bne.n	800247e <_malloc_r+0xe6>
 80023fe:	6821      	ldr	r1, [r4, #0]
 8002400:	1a6d      	subs	r5, r5, r1
 8002402:	4629      	mov	r1, r5
 8002404:	4638      	mov	r0, r7
 8002406:	f7ff ffa7 	bl	8002358 <sbrk_aligned>
 800240a:	3001      	adds	r0, #1
 800240c:	d037      	beq.n	800247e <_malloc_r+0xe6>
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	442b      	add	r3, r5
 8002412:	6023      	str	r3, [r4, #0]
 8002414:	f8d8 3000 	ldr.w	r3, [r8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d038      	beq.n	800248e <_malloc_r+0xf6>
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	42a2      	cmp	r2, r4
 8002420:	d12b      	bne.n	800247a <_malloc_r+0xe2>
 8002422:	2200      	movs	r2, #0
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	e00f      	b.n	8002448 <_malloc_r+0xb0>
 8002428:	6822      	ldr	r2, [r4, #0]
 800242a:	1b52      	subs	r2, r2, r5
 800242c:	d41f      	bmi.n	800246e <_malloc_r+0xd6>
 800242e:	2a0b      	cmp	r2, #11
 8002430:	d917      	bls.n	8002462 <_malloc_r+0xca>
 8002432:	1961      	adds	r1, r4, r5
 8002434:	42a3      	cmp	r3, r4
 8002436:	6025      	str	r5, [r4, #0]
 8002438:	bf18      	it	ne
 800243a:	6059      	strne	r1, [r3, #4]
 800243c:	6863      	ldr	r3, [r4, #4]
 800243e:	bf08      	it	eq
 8002440:	f8c8 1000 	streq.w	r1, [r8]
 8002444:	5162      	str	r2, [r4, r5]
 8002446:	604b      	str	r3, [r1, #4]
 8002448:	4638      	mov	r0, r7
 800244a:	f104 060b 	add.w	r6, r4, #11
 800244e:	f000 f829 	bl	80024a4 <__malloc_unlock>
 8002452:	f026 0607 	bic.w	r6, r6, #7
 8002456:	1d23      	adds	r3, r4, #4
 8002458:	1af2      	subs	r2, r6, r3
 800245a:	d0ae      	beq.n	80023ba <_malloc_r+0x22>
 800245c:	1b9b      	subs	r3, r3, r6
 800245e:	50a3      	str	r3, [r4, r2]
 8002460:	e7ab      	b.n	80023ba <_malloc_r+0x22>
 8002462:	42a3      	cmp	r3, r4
 8002464:	6862      	ldr	r2, [r4, #4]
 8002466:	d1dd      	bne.n	8002424 <_malloc_r+0x8c>
 8002468:	f8c8 2000 	str.w	r2, [r8]
 800246c:	e7ec      	b.n	8002448 <_malloc_r+0xb0>
 800246e:	4623      	mov	r3, r4
 8002470:	6864      	ldr	r4, [r4, #4]
 8002472:	e7ac      	b.n	80023ce <_malloc_r+0x36>
 8002474:	4634      	mov	r4, r6
 8002476:	6876      	ldr	r6, [r6, #4]
 8002478:	e7b4      	b.n	80023e4 <_malloc_r+0x4c>
 800247a:	4613      	mov	r3, r2
 800247c:	e7cc      	b.n	8002418 <_malloc_r+0x80>
 800247e:	230c      	movs	r3, #12
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	4638      	mov	r0, r7
 8002484:	f000 f80e 	bl	80024a4 <__malloc_unlock>
 8002488:	e797      	b.n	80023ba <_malloc_r+0x22>
 800248a:	6025      	str	r5, [r4, #0]
 800248c:	e7dc      	b.n	8002448 <_malloc_r+0xb0>
 800248e:	605b      	str	r3, [r3, #4]
 8002490:	deff      	udf	#255	; 0xff
 8002492:	bf00      	nop
 8002494:	2000cf50 	.word	0x2000cf50

08002498 <__malloc_lock>:
 8002498:	4801      	ldr	r0, [pc, #4]	; (80024a0 <__malloc_lock+0x8>)
 800249a:	f7ff bf07 	b.w	80022ac <__retarget_lock_acquire_recursive>
 800249e:	bf00      	nop
 80024a0:	2000cf4c 	.word	0x2000cf4c

080024a4 <__malloc_unlock>:
 80024a4:	4801      	ldr	r0, [pc, #4]	; (80024ac <__malloc_unlock+0x8>)
 80024a6:	f7ff bf02 	b.w	80022ae <__retarget_lock_release_recursive>
 80024aa:	bf00      	nop
 80024ac:	2000cf4c 	.word	0x2000cf4c

080024b0 <__ssputs_r>:
 80024b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024b4:	688e      	ldr	r6, [r1, #8]
 80024b6:	461f      	mov	r7, r3
 80024b8:	42be      	cmp	r6, r7
 80024ba:	680b      	ldr	r3, [r1, #0]
 80024bc:	4682      	mov	sl, r0
 80024be:	460c      	mov	r4, r1
 80024c0:	4690      	mov	r8, r2
 80024c2:	d82c      	bhi.n	800251e <__ssputs_r+0x6e>
 80024c4:	898a      	ldrh	r2, [r1, #12]
 80024c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80024ca:	d026      	beq.n	800251a <__ssputs_r+0x6a>
 80024cc:	6965      	ldr	r5, [r4, #20]
 80024ce:	6909      	ldr	r1, [r1, #16]
 80024d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80024d4:	eba3 0901 	sub.w	r9, r3, r1
 80024d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80024dc:	1c7b      	adds	r3, r7, #1
 80024de:	444b      	add	r3, r9
 80024e0:	106d      	asrs	r5, r5, #1
 80024e2:	429d      	cmp	r5, r3
 80024e4:	bf38      	it	cc
 80024e6:	461d      	movcc	r5, r3
 80024e8:	0553      	lsls	r3, r2, #21
 80024ea:	d527      	bpl.n	800253c <__ssputs_r+0x8c>
 80024ec:	4629      	mov	r1, r5
 80024ee:	f7ff ff53 	bl	8002398 <_malloc_r>
 80024f2:	4606      	mov	r6, r0
 80024f4:	b360      	cbz	r0, 8002550 <__ssputs_r+0xa0>
 80024f6:	6921      	ldr	r1, [r4, #16]
 80024f8:	464a      	mov	r2, r9
 80024fa:	f000 faeb 	bl	8002ad4 <memcpy>
 80024fe:	89a3      	ldrh	r3, [r4, #12]
 8002500:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002508:	81a3      	strh	r3, [r4, #12]
 800250a:	6126      	str	r6, [r4, #16]
 800250c:	6165      	str	r5, [r4, #20]
 800250e:	444e      	add	r6, r9
 8002510:	eba5 0509 	sub.w	r5, r5, r9
 8002514:	6026      	str	r6, [r4, #0]
 8002516:	60a5      	str	r5, [r4, #8]
 8002518:	463e      	mov	r6, r7
 800251a:	42be      	cmp	r6, r7
 800251c:	d900      	bls.n	8002520 <__ssputs_r+0x70>
 800251e:	463e      	mov	r6, r7
 8002520:	6820      	ldr	r0, [r4, #0]
 8002522:	4632      	mov	r2, r6
 8002524:	4641      	mov	r1, r8
 8002526:	f000 faab 	bl	8002a80 <memmove>
 800252a:	68a3      	ldr	r3, [r4, #8]
 800252c:	1b9b      	subs	r3, r3, r6
 800252e:	60a3      	str	r3, [r4, #8]
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	4433      	add	r3, r6
 8002534:	6023      	str	r3, [r4, #0]
 8002536:	2000      	movs	r0, #0
 8002538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800253c:	462a      	mov	r2, r5
 800253e:	f000 fad7 	bl	8002af0 <_realloc_r>
 8002542:	4606      	mov	r6, r0
 8002544:	2800      	cmp	r0, #0
 8002546:	d1e0      	bne.n	800250a <__ssputs_r+0x5a>
 8002548:	6921      	ldr	r1, [r4, #16]
 800254a:	4650      	mov	r0, sl
 800254c:	f7ff feb8 	bl	80022c0 <_free_r>
 8002550:	230c      	movs	r3, #12
 8002552:	f8ca 3000 	str.w	r3, [sl]
 8002556:	89a3      	ldrh	r3, [r4, #12]
 8002558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800255c:	81a3      	strh	r3, [r4, #12]
 800255e:	f04f 30ff 	mov.w	r0, #4294967295
 8002562:	e7e9      	b.n	8002538 <__ssputs_r+0x88>

08002564 <_svfiprintf_r>:
 8002564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002568:	4698      	mov	r8, r3
 800256a:	898b      	ldrh	r3, [r1, #12]
 800256c:	061b      	lsls	r3, r3, #24
 800256e:	b09d      	sub	sp, #116	; 0x74
 8002570:	4607      	mov	r7, r0
 8002572:	460d      	mov	r5, r1
 8002574:	4614      	mov	r4, r2
 8002576:	d50e      	bpl.n	8002596 <_svfiprintf_r+0x32>
 8002578:	690b      	ldr	r3, [r1, #16]
 800257a:	b963      	cbnz	r3, 8002596 <_svfiprintf_r+0x32>
 800257c:	2140      	movs	r1, #64	; 0x40
 800257e:	f7ff ff0b 	bl	8002398 <_malloc_r>
 8002582:	6028      	str	r0, [r5, #0]
 8002584:	6128      	str	r0, [r5, #16]
 8002586:	b920      	cbnz	r0, 8002592 <_svfiprintf_r+0x2e>
 8002588:	230c      	movs	r3, #12
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	f04f 30ff 	mov.w	r0, #4294967295
 8002590:	e0d0      	b.n	8002734 <_svfiprintf_r+0x1d0>
 8002592:	2340      	movs	r3, #64	; 0x40
 8002594:	616b      	str	r3, [r5, #20]
 8002596:	2300      	movs	r3, #0
 8002598:	9309      	str	r3, [sp, #36]	; 0x24
 800259a:	2320      	movs	r3, #32
 800259c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80025a4:	2330      	movs	r3, #48	; 0x30
 80025a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800274c <_svfiprintf_r+0x1e8>
 80025aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025ae:	f04f 0901 	mov.w	r9, #1
 80025b2:	4623      	mov	r3, r4
 80025b4:	469a      	mov	sl, r3
 80025b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025ba:	b10a      	cbz	r2, 80025c0 <_svfiprintf_r+0x5c>
 80025bc:	2a25      	cmp	r2, #37	; 0x25
 80025be:	d1f9      	bne.n	80025b4 <_svfiprintf_r+0x50>
 80025c0:	ebba 0b04 	subs.w	fp, sl, r4
 80025c4:	d00b      	beq.n	80025de <_svfiprintf_r+0x7a>
 80025c6:	465b      	mov	r3, fp
 80025c8:	4622      	mov	r2, r4
 80025ca:	4629      	mov	r1, r5
 80025cc:	4638      	mov	r0, r7
 80025ce:	f7ff ff6f 	bl	80024b0 <__ssputs_r>
 80025d2:	3001      	adds	r0, #1
 80025d4:	f000 80a9 	beq.w	800272a <_svfiprintf_r+0x1c6>
 80025d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025da:	445a      	add	r2, fp
 80025dc:	9209      	str	r2, [sp, #36]	; 0x24
 80025de:	f89a 3000 	ldrb.w	r3, [sl]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 80a1 	beq.w	800272a <_svfiprintf_r+0x1c6>
 80025e8:	2300      	movs	r3, #0
 80025ea:	f04f 32ff 	mov.w	r2, #4294967295
 80025ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025f2:	f10a 0a01 	add.w	sl, sl, #1
 80025f6:	9304      	str	r3, [sp, #16]
 80025f8:	9307      	str	r3, [sp, #28]
 80025fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025fe:	931a      	str	r3, [sp, #104]	; 0x68
 8002600:	4654      	mov	r4, sl
 8002602:	2205      	movs	r2, #5
 8002604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002608:	4850      	ldr	r0, [pc, #320]	; (800274c <_svfiprintf_r+0x1e8>)
 800260a:	f7fd fdf9 	bl	8000200 <memchr>
 800260e:	9a04      	ldr	r2, [sp, #16]
 8002610:	b9d8      	cbnz	r0, 800264a <_svfiprintf_r+0xe6>
 8002612:	06d0      	lsls	r0, r2, #27
 8002614:	bf44      	itt	mi
 8002616:	2320      	movmi	r3, #32
 8002618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800261c:	0711      	lsls	r1, r2, #28
 800261e:	bf44      	itt	mi
 8002620:	232b      	movmi	r3, #43	; 0x2b
 8002622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002626:	f89a 3000 	ldrb.w	r3, [sl]
 800262a:	2b2a      	cmp	r3, #42	; 0x2a
 800262c:	d015      	beq.n	800265a <_svfiprintf_r+0xf6>
 800262e:	9a07      	ldr	r2, [sp, #28]
 8002630:	4654      	mov	r4, sl
 8002632:	2000      	movs	r0, #0
 8002634:	f04f 0c0a 	mov.w	ip, #10
 8002638:	4621      	mov	r1, r4
 800263a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800263e:	3b30      	subs	r3, #48	; 0x30
 8002640:	2b09      	cmp	r3, #9
 8002642:	d94d      	bls.n	80026e0 <_svfiprintf_r+0x17c>
 8002644:	b1b0      	cbz	r0, 8002674 <_svfiprintf_r+0x110>
 8002646:	9207      	str	r2, [sp, #28]
 8002648:	e014      	b.n	8002674 <_svfiprintf_r+0x110>
 800264a:	eba0 0308 	sub.w	r3, r0, r8
 800264e:	fa09 f303 	lsl.w	r3, r9, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	9304      	str	r3, [sp, #16]
 8002656:	46a2      	mov	sl, r4
 8002658:	e7d2      	b.n	8002600 <_svfiprintf_r+0x9c>
 800265a:	9b03      	ldr	r3, [sp, #12]
 800265c:	1d19      	adds	r1, r3, #4
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	9103      	str	r1, [sp, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	bfbb      	ittet	lt
 8002666:	425b      	neglt	r3, r3
 8002668:	f042 0202 	orrlt.w	r2, r2, #2
 800266c:	9307      	strge	r3, [sp, #28]
 800266e:	9307      	strlt	r3, [sp, #28]
 8002670:	bfb8      	it	lt
 8002672:	9204      	strlt	r2, [sp, #16]
 8002674:	7823      	ldrb	r3, [r4, #0]
 8002676:	2b2e      	cmp	r3, #46	; 0x2e
 8002678:	d10c      	bne.n	8002694 <_svfiprintf_r+0x130>
 800267a:	7863      	ldrb	r3, [r4, #1]
 800267c:	2b2a      	cmp	r3, #42	; 0x2a
 800267e:	d134      	bne.n	80026ea <_svfiprintf_r+0x186>
 8002680:	9b03      	ldr	r3, [sp, #12]
 8002682:	1d1a      	adds	r2, r3, #4
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	9203      	str	r2, [sp, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	bfb8      	it	lt
 800268c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002690:	3402      	adds	r4, #2
 8002692:	9305      	str	r3, [sp, #20]
 8002694:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800275c <_svfiprintf_r+0x1f8>
 8002698:	7821      	ldrb	r1, [r4, #0]
 800269a:	2203      	movs	r2, #3
 800269c:	4650      	mov	r0, sl
 800269e:	f7fd fdaf 	bl	8000200 <memchr>
 80026a2:	b138      	cbz	r0, 80026b4 <_svfiprintf_r+0x150>
 80026a4:	9b04      	ldr	r3, [sp, #16]
 80026a6:	eba0 000a 	sub.w	r0, r0, sl
 80026aa:	2240      	movs	r2, #64	; 0x40
 80026ac:	4082      	lsls	r2, r0
 80026ae:	4313      	orrs	r3, r2
 80026b0:	3401      	adds	r4, #1
 80026b2:	9304      	str	r3, [sp, #16]
 80026b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026b8:	4825      	ldr	r0, [pc, #148]	; (8002750 <_svfiprintf_r+0x1ec>)
 80026ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026be:	2206      	movs	r2, #6
 80026c0:	f7fd fd9e 	bl	8000200 <memchr>
 80026c4:	2800      	cmp	r0, #0
 80026c6:	d038      	beq.n	800273a <_svfiprintf_r+0x1d6>
 80026c8:	4b22      	ldr	r3, [pc, #136]	; (8002754 <_svfiprintf_r+0x1f0>)
 80026ca:	bb1b      	cbnz	r3, 8002714 <_svfiprintf_r+0x1b0>
 80026cc:	9b03      	ldr	r3, [sp, #12]
 80026ce:	3307      	adds	r3, #7
 80026d0:	f023 0307 	bic.w	r3, r3, #7
 80026d4:	3308      	adds	r3, #8
 80026d6:	9303      	str	r3, [sp, #12]
 80026d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026da:	4433      	add	r3, r6
 80026dc:	9309      	str	r3, [sp, #36]	; 0x24
 80026de:	e768      	b.n	80025b2 <_svfiprintf_r+0x4e>
 80026e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80026e4:	460c      	mov	r4, r1
 80026e6:	2001      	movs	r0, #1
 80026e8:	e7a6      	b.n	8002638 <_svfiprintf_r+0xd4>
 80026ea:	2300      	movs	r3, #0
 80026ec:	3401      	adds	r4, #1
 80026ee:	9305      	str	r3, [sp, #20]
 80026f0:	4619      	mov	r1, r3
 80026f2:	f04f 0c0a 	mov.w	ip, #10
 80026f6:	4620      	mov	r0, r4
 80026f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026fc:	3a30      	subs	r2, #48	; 0x30
 80026fe:	2a09      	cmp	r2, #9
 8002700:	d903      	bls.n	800270a <_svfiprintf_r+0x1a6>
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0c6      	beq.n	8002694 <_svfiprintf_r+0x130>
 8002706:	9105      	str	r1, [sp, #20]
 8002708:	e7c4      	b.n	8002694 <_svfiprintf_r+0x130>
 800270a:	fb0c 2101 	mla	r1, ip, r1, r2
 800270e:	4604      	mov	r4, r0
 8002710:	2301      	movs	r3, #1
 8002712:	e7f0      	b.n	80026f6 <_svfiprintf_r+0x192>
 8002714:	ab03      	add	r3, sp, #12
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	462a      	mov	r2, r5
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <_svfiprintf_r+0x1f4>)
 800271c:	a904      	add	r1, sp, #16
 800271e:	4638      	mov	r0, r7
 8002720:	f3af 8000 	nop.w
 8002724:	1c42      	adds	r2, r0, #1
 8002726:	4606      	mov	r6, r0
 8002728:	d1d6      	bne.n	80026d8 <_svfiprintf_r+0x174>
 800272a:	89ab      	ldrh	r3, [r5, #12]
 800272c:	065b      	lsls	r3, r3, #25
 800272e:	f53f af2d 	bmi.w	800258c <_svfiprintf_r+0x28>
 8002732:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002734:	b01d      	add	sp, #116	; 0x74
 8002736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800273a:	ab03      	add	r3, sp, #12
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	462a      	mov	r2, r5
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <_svfiprintf_r+0x1f4>)
 8002742:	a904      	add	r1, sp, #16
 8002744:	4638      	mov	r0, r7
 8002746:	f000 f879 	bl	800283c <_printf_i>
 800274a:	e7eb      	b.n	8002724 <_svfiprintf_r+0x1c0>
 800274c:	08002d76 	.word	0x08002d76
 8002750:	08002d80 	.word	0x08002d80
 8002754:	00000000 	.word	0x00000000
 8002758:	080024b1 	.word	0x080024b1
 800275c:	08002d7c 	.word	0x08002d7c

08002760 <_printf_common>:
 8002760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002764:	4616      	mov	r6, r2
 8002766:	4699      	mov	r9, r3
 8002768:	688a      	ldr	r2, [r1, #8]
 800276a:	690b      	ldr	r3, [r1, #16]
 800276c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002770:	4293      	cmp	r3, r2
 8002772:	bfb8      	it	lt
 8002774:	4613      	movlt	r3, r2
 8002776:	6033      	str	r3, [r6, #0]
 8002778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800277c:	4607      	mov	r7, r0
 800277e:	460c      	mov	r4, r1
 8002780:	b10a      	cbz	r2, 8002786 <_printf_common+0x26>
 8002782:	3301      	adds	r3, #1
 8002784:	6033      	str	r3, [r6, #0]
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	0699      	lsls	r1, r3, #26
 800278a:	bf42      	ittt	mi
 800278c:	6833      	ldrmi	r3, [r6, #0]
 800278e:	3302      	addmi	r3, #2
 8002790:	6033      	strmi	r3, [r6, #0]
 8002792:	6825      	ldr	r5, [r4, #0]
 8002794:	f015 0506 	ands.w	r5, r5, #6
 8002798:	d106      	bne.n	80027a8 <_printf_common+0x48>
 800279a:	f104 0a19 	add.w	sl, r4, #25
 800279e:	68e3      	ldr	r3, [r4, #12]
 80027a0:	6832      	ldr	r2, [r6, #0]
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	42ab      	cmp	r3, r5
 80027a6:	dc26      	bgt.n	80027f6 <_printf_common+0x96>
 80027a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80027ac:	1e13      	subs	r3, r2, #0
 80027ae:	6822      	ldr	r2, [r4, #0]
 80027b0:	bf18      	it	ne
 80027b2:	2301      	movne	r3, #1
 80027b4:	0692      	lsls	r2, r2, #26
 80027b6:	d42b      	bmi.n	8002810 <_printf_common+0xb0>
 80027b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027bc:	4649      	mov	r1, r9
 80027be:	4638      	mov	r0, r7
 80027c0:	47c0      	blx	r8
 80027c2:	3001      	adds	r0, #1
 80027c4:	d01e      	beq.n	8002804 <_printf_common+0xa4>
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	6922      	ldr	r2, [r4, #16]
 80027ca:	f003 0306 	and.w	r3, r3, #6
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	bf02      	ittt	eq
 80027d2:	68e5      	ldreq	r5, [r4, #12]
 80027d4:	6833      	ldreq	r3, [r6, #0]
 80027d6:	1aed      	subeq	r5, r5, r3
 80027d8:	68a3      	ldr	r3, [r4, #8]
 80027da:	bf0c      	ite	eq
 80027dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027e0:	2500      	movne	r5, #0
 80027e2:	4293      	cmp	r3, r2
 80027e4:	bfc4      	itt	gt
 80027e6:	1a9b      	subgt	r3, r3, r2
 80027e8:	18ed      	addgt	r5, r5, r3
 80027ea:	2600      	movs	r6, #0
 80027ec:	341a      	adds	r4, #26
 80027ee:	42b5      	cmp	r5, r6
 80027f0:	d11a      	bne.n	8002828 <_printf_common+0xc8>
 80027f2:	2000      	movs	r0, #0
 80027f4:	e008      	b.n	8002808 <_printf_common+0xa8>
 80027f6:	2301      	movs	r3, #1
 80027f8:	4652      	mov	r2, sl
 80027fa:	4649      	mov	r1, r9
 80027fc:	4638      	mov	r0, r7
 80027fe:	47c0      	blx	r8
 8002800:	3001      	adds	r0, #1
 8002802:	d103      	bne.n	800280c <_printf_common+0xac>
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800280c:	3501      	adds	r5, #1
 800280e:	e7c6      	b.n	800279e <_printf_common+0x3e>
 8002810:	18e1      	adds	r1, r4, r3
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	2030      	movs	r0, #48	; 0x30
 8002816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800281a:	4422      	add	r2, r4
 800281c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002824:	3302      	adds	r3, #2
 8002826:	e7c7      	b.n	80027b8 <_printf_common+0x58>
 8002828:	2301      	movs	r3, #1
 800282a:	4622      	mov	r2, r4
 800282c:	4649      	mov	r1, r9
 800282e:	4638      	mov	r0, r7
 8002830:	47c0      	blx	r8
 8002832:	3001      	adds	r0, #1
 8002834:	d0e6      	beq.n	8002804 <_printf_common+0xa4>
 8002836:	3601      	adds	r6, #1
 8002838:	e7d9      	b.n	80027ee <_printf_common+0x8e>
	...

0800283c <_printf_i>:
 800283c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002840:	7e0f      	ldrb	r7, [r1, #24]
 8002842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002844:	2f78      	cmp	r7, #120	; 0x78
 8002846:	4691      	mov	r9, r2
 8002848:	4680      	mov	r8, r0
 800284a:	460c      	mov	r4, r1
 800284c:	469a      	mov	sl, r3
 800284e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002852:	d807      	bhi.n	8002864 <_printf_i+0x28>
 8002854:	2f62      	cmp	r7, #98	; 0x62
 8002856:	d80a      	bhi.n	800286e <_printf_i+0x32>
 8002858:	2f00      	cmp	r7, #0
 800285a:	f000 80d4 	beq.w	8002a06 <_printf_i+0x1ca>
 800285e:	2f58      	cmp	r7, #88	; 0x58
 8002860:	f000 80c0 	beq.w	80029e4 <_printf_i+0x1a8>
 8002864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800286c:	e03a      	b.n	80028e4 <_printf_i+0xa8>
 800286e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002872:	2b15      	cmp	r3, #21
 8002874:	d8f6      	bhi.n	8002864 <_printf_i+0x28>
 8002876:	a101      	add	r1, pc, #4	; (adr r1, 800287c <_printf_i+0x40>)
 8002878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800287c:	080028d5 	.word	0x080028d5
 8002880:	080028e9 	.word	0x080028e9
 8002884:	08002865 	.word	0x08002865
 8002888:	08002865 	.word	0x08002865
 800288c:	08002865 	.word	0x08002865
 8002890:	08002865 	.word	0x08002865
 8002894:	080028e9 	.word	0x080028e9
 8002898:	08002865 	.word	0x08002865
 800289c:	08002865 	.word	0x08002865
 80028a0:	08002865 	.word	0x08002865
 80028a4:	08002865 	.word	0x08002865
 80028a8:	080029ed 	.word	0x080029ed
 80028ac:	08002915 	.word	0x08002915
 80028b0:	080029a7 	.word	0x080029a7
 80028b4:	08002865 	.word	0x08002865
 80028b8:	08002865 	.word	0x08002865
 80028bc:	08002a0f 	.word	0x08002a0f
 80028c0:	08002865 	.word	0x08002865
 80028c4:	08002915 	.word	0x08002915
 80028c8:	08002865 	.word	0x08002865
 80028cc:	08002865 	.word	0x08002865
 80028d0:	080029af 	.word	0x080029af
 80028d4:	682b      	ldr	r3, [r5, #0]
 80028d6:	1d1a      	adds	r2, r3, #4
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	602a      	str	r2, [r5, #0]
 80028dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028e4:	2301      	movs	r3, #1
 80028e6:	e09f      	b.n	8002a28 <_printf_i+0x1ec>
 80028e8:	6820      	ldr	r0, [r4, #0]
 80028ea:	682b      	ldr	r3, [r5, #0]
 80028ec:	0607      	lsls	r7, r0, #24
 80028ee:	f103 0104 	add.w	r1, r3, #4
 80028f2:	6029      	str	r1, [r5, #0]
 80028f4:	d501      	bpl.n	80028fa <_printf_i+0xbe>
 80028f6:	681e      	ldr	r6, [r3, #0]
 80028f8:	e003      	b.n	8002902 <_printf_i+0xc6>
 80028fa:	0646      	lsls	r6, r0, #25
 80028fc:	d5fb      	bpl.n	80028f6 <_printf_i+0xba>
 80028fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002902:	2e00      	cmp	r6, #0
 8002904:	da03      	bge.n	800290e <_printf_i+0xd2>
 8002906:	232d      	movs	r3, #45	; 0x2d
 8002908:	4276      	negs	r6, r6
 800290a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800290e:	485a      	ldr	r0, [pc, #360]	; (8002a78 <_printf_i+0x23c>)
 8002910:	230a      	movs	r3, #10
 8002912:	e012      	b.n	800293a <_printf_i+0xfe>
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	6820      	ldr	r0, [r4, #0]
 8002918:	1d19      	adds	r1, r3, #4
 800291a:	6029      	str	r1, [r5, #0]
 800291c:	0605      	lsls	r5, r0, #24
 800291e:	d501      	bpl.n	8002924 <_printf_i+0xe8>
 8002920:	681e      	ldr	r6, [r3, #0]
 8002922:	e002      	b.n	800292a <_printf_i+0xee>
 8002924:	0641      	lsls	r1, r0, #25
 8002926:	d5fb      	bpl.n	8002920 <_printf_i+0xe4>
 8002928:	881e      	ldrh	r6, [r3, #0]
 800292a:	4853      	ldr	r0, [pc, #332]	; (8002a78 <_printf_i+0x23c>)
 800292c:	2f6f      	cmp	r7, #111	; 0x6f
 800292e:	bf0c      	ite	eq
 8002930:	2308      	moveq	r3, #8
 8002932:	230a      	movne	r3, #10
 8002934:	2100      	movs	r1, #0
 8002936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800293a:	6865      	ldr	r5, [r4, #4]
 800293c:	60a5      	str	r5, [r4, #8]
 800293e:	2d00      	cmp	r5, #0
 8002940:	bfa2      	ittt	ge
 8002942:	6821      	ldrge	r1, [r4, #0]
 8002944:	f021 0104 	bicge.w	r1, r1, #4
 8002948:	6021      	strge	r1, [r4, #0]
 800294a:	b90e      	cbnz	r6, 8002950 <_printf_i+0x114>
 800294c:	2d00      	cmp	r5, #0
 800294e:	d04b      	beq.n	80029e8 <_printf_i+0x1ac>
 8002950:	4615      	mov	r5, r2
 8002952:	fbb6 f1f3 	udiv	r1, r6, r3
 8002956:	fb03 6711 	mls	r7, r3, r1, r6
 800295a:	5dc7      	ldrb	r7, [r0, r7]
 800295c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002960:	4637      	mov	r7, r6
 8002962:	42bb      	cmp	r3, r7
 8002964:	460e      	mov	r6, r1
 8002966:	d9f4      	bls.n	8002952 <_printf_i+0x116>
 8002968:	2b08      	cmp	r3, #8
 800296a:	d10b      	bne.n	8002984 <_printf_i+0x148>
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	07de      	lsls	r6, r3, #31
 8002970:	d508      	bpl.n	8002984 <_printf_i+0x148>
 8002972:	6923      	ldr	r3, [r4, #16]
 8002974:	6861      	ldr	r1, [r4, #4]
 8002976:	4299      	cmp	r1, r3
 8002978:	bfde      	ittt	le
 800297a:	2330      	movle	r3, #48	; 0x30
 800297c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002980:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002984:	1b52      	subs	r2, r2, r5
 8002986:	6122      	str	r2, [r4, #16]
 8002988:	f8cd a000 	str.w	sl, [sp]
 800298c:	464b      	mov	r3, r9
 800298e:	aa03      	add	r2, sp, #12
 8002990:	4621      	mov	r1, r4
 8002992:	4640      	mov	r0, r8
 8002994:	f7ff fee4 	bl	8002760 <_printf_common>
 8002998:	3001      	adds	r0, #1
 800299a:	d14a      	bne.n	8002a32 <_printf_i+0x1f6>
 800299c:	f04f 30ff 	mov.w	r0, #4294967295
 80029a0:	b004      	add	sp, #16
 80029a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	f043 0320 	orr.w	r3, r3, #32
 80029ac:	6023      	str	r3, [r4, #0]
 80029ae:	4833      	ldr	r0, [pc, #204]	; (8002a7c <_printf_i+0x240>)
 80029b0:	2778      	movs	r7, #120	; 0x78
 80029b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	6829      	ldr	r1, [r5, #0]
 80029ba:	061f      	lsls	r7, r3, #24
 80029bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80029c0:	d402      	bmi.n	80029c8 <_printf_i+0x18c>
 80029c2:	065f      	lsls	r7, r3, #25
 80029c4:	bf48      	it	mi
 80029c6:	b2b6      	uxthmi	r6, r6
 80029c8:	07df      	lsls	r7, r3, #31
 80029ca:	bf48      	it	mi
 80029cc:	f043 0320 	orrmi.w	r3, r3, #32
 80029d0:	6029      	str	r1, [r5, #0]
 80029d2:	bf48      	it	mi
 80029d4:	6023      	strmi	r3, [r4, #0]
 80029d6:	b91e      	cbnz	r6, 80029e0 <_printf_i+0x1a4>
 80029d8:	6823      	ldr	r3, [r4, #0]
 80029da:	f023 0320 	bic.w	r3, r3, #32
 80029de:	6023      	str	r3, [r4, #0]
 80029e0:	2310      	movs	r3, #16
 80029e2:	e7a7      	b.n	8002934 <_printf_i+0xf8>
 80029e4:	4824      	ldr	r0, [pc, #144]	; (8002a78 <_printf_i+0x23c>)
 80029e6:	e7e4      	b.n	80029b2 <_printf_i+0x176>
 80029e8:	4615      	mov	r5, r2
 80029ea:	e7bd      	b.n	8002968 <_printf_i+0x12c>
 80029ec:	682b      	ldr	r3, [r5, #0]
 80029ee:	6826      	ldr	r6, [r4, #0]
 80029f0:	6961      	ldr	r1, [r4, #20]
 80029f2:	1d18      	adds	r0, r3, #4
 80029f4:	6028      	str	r0, [r5, #0]
 80029f6:	0635      	lsls	r5, r6, #24
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	d501      	bpl.n	8002a00 <_printf_i+0x1c4>
 80029fc:	6019      	str	r1, [r3, #0]
 80029fe:	e002      	b.n	8002a06 <_printf_i+0x1ca>
 8002a00:	0670      	lsls	r0, r6, #25
 8002a02:	d5fb      	bpl.n	80029fc <_printf_i+0x1c0>
 8002a04:	8019      	strh	r1, [r3, #0]
 8002a06:	2300      	movs	r3, #0
 8002a08:	6123      	str	r3, [r4, #16]
 8002a0a:	4615      	mov	r5, r2
 8002a0c:	e7bc      	b.n	8002988 <_printf_i+0x14c>
 8002a0e:	682b      	ldr	r3, [r5, #0]
 8002a10:	1d1a      	adds	r2, r3, #4
 8002a12:	602a      	str	r2, [r5, #0]
 8002a14:	681d      	ldr	r5, [r3, #0]
 8002a16:	6862      	ldr	r2, [r4, #4]
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	f7fd fbf0 	bl	8000200 <memchr>
 8002a20:	b108      	cbz	r0, 8002a26 <_printf_i+0x1ea>
 8002a22:	1b40      	subs	r0, r0, r5
 8002a24:	6060      	str	r0, [r4, #4]
 8002a26:	6863      	ldr	r3, [r4, #4]
 8002a28:	6123      	str	r3, [r4, #16]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a30:	e7aa      	b.n	8002988 <_printf_i+0x14c>
 8002a32:	6923      	ldr	r3, [r4, #16]
 8002a34:	462a      	mov	r2, r5
 8002a36:	4649      	mov	r1, r9
 8002a38:	4640      	mov	r0, r8
 8002a3a:	47d0      	blx	sl
 8002a3c:	3001      	adds	r0, #1
 8002a3e:	d0ad      	beq.n	800299c <_printf_i+0x160>
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	079b      	lsls	r3, r3, #30
 8002a44:	d413      	bmi.n	8002a6e <_printf_i+0x232>
 8002a46:	68e0      	ldr	r0, [r4, #12]
 8002a48:	9b03      	ldr	r3, [sp, #12]
 8002a4a:	4298      	cmp	r0, r3
 8002a4c:	bfb8      	it	lt
 8002a4e:	4618      	movlt	r0, r3
 8002a50:	e7a6      	b.n	80029a0 <_printf_i+0x164>
 8002a52:	2301      	movs	r3, #1
 8002a54:	4632      	mov	r2, r6
 8002a56:	4649      	mov	r1, r9
 8002a58:	4640      	mov	r0, r8
 8002a5a:	47d0      	blx	sl
 8002a5c:	3001      	adds	r0, #1
 8002a5e:	d09d      	beq.n	800299c <_printf_i+0x160>
 8002a60:	3501      	adds	r5, #1
 8002a62:	68e3      	ldr	r3, [r4, #12]
 8002a64:	9903      	ldr	r1, [sp, #12]
 8002a66:	1a5b      	subs	r3, r3, r1
 8002a68:	42ab      	cmp	r3, r5
 8002a6a:	dcf2      	bgt.n	8002a52 <_printf_i+0x216>
 8002a6c:	e7eb      	b.n	8002a46 <_printf_i+0x20a>
 8002a6e:	2500      	movs	r5, #0
 8002a70:	f104 0619 	add.w	r6, r4, #25
 8002a74:	e7f5      	b.n	8002a62 <_printf_i+0x226>
 8002a76:	bf00      	nop
 8002a78:	08002d87 	.word	0x08002d87
 8002a7c:	08002d98 	.word	0x08002d98

08002a80 <memmove>:
 8002a80:	4288      	cmp	r0, r1
 8002a82:	b510      	push	{r4, lr}
 8002a84:	eb01 0402 	add.w	r4, r1, r2
 8002a88:	d902      	bls.n	8002a90 <memmove+0x10>
 8002a8a:	4284      	cmp	r4, r0
 8002a8c:	4623      	mov	r3, r4
 8002a8e:	d807      	bhi.n	8002aa0 <memmove+0x20>
 8002a90:	1e43      	subs	r3, r0, #1
 8002a92:	42a1      	cmp	r1, r4
 8002a94:	d008      	beq.n	8002aa8 <memmove+0x28>
 8002a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a9e:	e7f8      	b.n	8002a92 <memmove+0x12>
 8002aa0:	4402      	add	r2, r0
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	428a      	cmp	r2, r1
 8002aa6:	d100      	bne.n	8002aaa <memmove+0x2a>
 8002aa8:	bd10      	pop	{r4, pc}
 8002aaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002aae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ab2:	e7f7      	b.n	8002aa4 <memmove+0x24>

08002ab4 <_sbrk_r>:
 8002ab4:	b538      	push	{r3, r4, r5, lr}
 8002ab6:	4d06      	ldr	r5, [pc, #24]	; (8002ad0 <_sbrk_r+0x1c>)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	4604      	mov	r4, r0
 8002abc:	4608      	mov	r0, r1
 8002abe:	602b      	str	r3, [r5, #0]
 8002ac0:	f7fe fe30 	bl	8001724 <_sbrk>
 8002ac4:	1c43      	adds	r3, r0, #1
 8002ac6:	d102      	bne.n	8002ace <_sbrk_r+0x1a>
 8002ac8:	682b      	ldr	r3, [r5, #0]
 8002aca:	b103      	cbz	r3, 8002ace <_sbrk_r+0x1a>
 8002acc:	6023      	str	r3, [r4, #0]
 8002ace:	bd38      	pop	{r3, r4, r5, pc}
 8002ad0:	2000cf48 	.word	0x2000cf48

08002ad4 <memcpy>:
 8002ad4:	440a      	add	r2, r1
 8002ad6:	4291      	cmp	r1, r2
 8002ad8:	f100 33ff 	add.w	r3, r0, #4294967295
 8002adc:	d100      	bne.n	8002ae0 <memcpy+0xc>
 8002ade:	4770      	bx	lr
 8002ae0:	b510      	push	{r4, lr}
 8002ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002aea:	4291      	cmp	r1, r2
 8002aec:	d1f9      	bne.n	8002ae2 <memcpy+0xe>
 8002aee:	bd10      	pop	{r4, pc}

08002af0 <_realloc_r>:
 8002af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002af4:	4680      	mov	r8, r0
 8002af6:	4614      	mov	r4, r2
 8002af8:	460e      	mov	r6, r1
 8002afa:	b921      	cbnz	r1, 8002b06 <_realloc_r+0x16>
 8002afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b00:	4611      	mov	r1, r2
 8002b02:	f7ff bc49 	b.w	8002398 <_malloc_r>
 8002b06:	b92a      	cbnz	r2, 8002b14 <_realloc_r+0x24>
 8002b08:	f7ff fbda 	bl	80022c0 <_free_r>
 8002b0c:	4625      	mov	r5, r4
 8002b0e:	4628      	mov	r0, r5
 8002b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b14:	f000 f81b 	bl	8002b4e <_malloc_usable_size_r>
 8002b18:	4284      	cmp	r4, r0
 8002b1a:	4607      	mov	r7, r0
 8002b1c:	d802      	bhi.n	8002b24 <_realloc_r+0x34>
 8002b1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b22:	d812      	bhi.n	8002b4a <_realloc_r+0x5a>
 8002b24:	4621      	mov	r1, r4
 8002b26:	4640      	mov	r0, r8
 8002b28:	f7ff fc36 	bl	8002398 <_malloc_r>
 8002b2c:	4605      	mov	r5, r0
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	d0ed      	beq.n	8002b0e <_realloc_r+0x1e>
 8002b32:	42bc      	cmp	r4, r7
 8002b34:	4622      	mov	r2, r4
 8002b36:	4631      	mov	r1, r6
 8002b38:	bf28      	it	cs
 8002b3a:	463a      	movcs	r2, r7
 8002b3c:	f7ff ffca 	bl	8002ad4 <memcpy>
 8002b40:	4631      	mov	r1, r6
 8002b42:	4640      	mov	r0, r8
 8002b44:	f7ff fbbc 	bl	80022c0 <_free_r>
 8002b48:	e7e1      	b.n	8002b0e <_realloc_r+0x1e>
 8002b4a:	4635      	mov	r5, r6
 8002b4c:	e7df      	b.n	8002b0e <_realloc_r+0x1e>

08002b4e <_malloc_usable_size_r>:
 8002b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b52:	1f18      	subs	r0, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bfbc      	itt	lt
 8002b58:	580b      	ldrlt	r3, [r1, r0]
 8002b5a:	18c0      	addlt	r0, r0, r3
 8002b5c:	4770      	bx	lr
	...

08002b60 <_init>:
 8002b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b62:	bf00      	nop
 8002b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b66:	bc08      	pop	{r3}
 8002b68:	469e      	mov	lr, r3
 8002b6a:	4770      	bx	lr

08002b6c <_fini>:
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6e:	bf00      	nop
 8002b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b72:	bc08      	pop	{r3}
 8002b74:	469e      	mov	lr, r3
 8002b76:	4770      	bx	lr
