
swn-340 projjj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001868  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080019f8  080019f8  000119f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001be8  08001be8  00027b24  2**0
                  CONTENTS
  4 .ARM          00000000  08001be8  08001be8  00027b24  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001be8  08001be8  00027b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001be8  08001be8  00011be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bec  08001bec  00011bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007b24  20000000  08001bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  20007b24  08009714  00027b24  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007e14  08009714  00027e14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027b24  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00027b54  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000242b  00000000  00000000  00027b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d11  00000000  00000000  00029fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000268  00000000  00000000  0002acd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000196  00000000  00000000  0002af40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002634d  00000000  00000000  0002b0d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004ec7  00000000  00000000  00051423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4f78  00000000  00000000  000562ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b54  00000000  00000000  0014b264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0014bdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20007b24 	.word	0x20007b24
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080019e0 	.word	0x080019e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20007b28 	.word	0x20007b28
 80001cc:	080019e0 	.word	0x080019e0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <SysTick_Handler>:
void Error_Handler () {
	// Add error handler here if desired
}

// Systic interrupt handler
void SysTick_Handler() {
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	static uint32_t counter = 0; // that counts up to 1000
	counter++;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <SysTick_Handler+0x30>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	3301      	adds	r3, #1
 80002aa:	4a09      	ldr	r2, [pc, #36]	; (80002d0 <SysTick_Handler+0x30>)
 80002ac:	6013      	str	r3, [r2, #0]
	if (counter == 1000) {
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <SysTick_Handler+0x30>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002b6:	d105      	bne.n	80002c4 <SysTick_Handler+0x24>
		one_second_elapsed = TRUE;
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <SysTick_Handler+0x34>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	701a      	strb	r2, [r3, #0]
		counter = 0;
 80002be:	4b04      	ldr	r3, [pc, #16]	; (80002d0 <SysTick_Handler+0x30>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
	}
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	20007b44 	.word	0x20007b44
 80002d4:	20007b40 	.word	0x20007b40

080002d8 <LED_Init>:

//******************************************************************************************
// User pin = LD2 Green pin = PA.5
//******************************************************************************************

void LED_Init(uint8_t pin){
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 80002e2:	4b2b      	ldr	r3, [pc, #172]	; (8000390 <LED_Init+0xb8>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e6:	4a2a      	ldr	r2, [pc, #168]	; (8000390 <LED_Init+0xb8>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));
 80002ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	005b      	lsls	r3, r3, #1
 80002f8:	2103      	movs	r1, #3
 80002fa:	fa01 f303 	lsl.w	r3, r1, r3
 80002fe:	43db      	mvns	r3, r3
 8000300:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000304:	4013      	ands	r3, r2
 8000306:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 8000308:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	2101      	movs	r1, #1
 8000314:	fa01 f303 	lsl.w	r3, r1, r3
 8000318:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800031c:	4313      	orrs	r3, r2
 800031e:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 8000320:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000324:	689a      	ldr	r2, [r3, #8]
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	2103      	movs	r1, #3
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000336:	4013      	ands	r3, r2
 8000338:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 800033a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800033e:	689a      	ldr	r2, [r3, #8]
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	2103      	movs	r1, #3
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800034e:	4313      	orrs	r3, r2
 8000350:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 8000352:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000356:	685a      	ldr	r2, [r3, #4]
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	2101      	movs	r1, #1
 800035c:	fa01 f303 	lsl.w	r3, r1, r3
 8000360:	43db      	mvns	r3, r3
 8000362:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000366:	4013      	ands	r3, r2
 8000368:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 800036a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800036e:	68da      	ldr	r2, [r3, #12]
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	005b      	lsls	r3, r3, #1
 8000374:	2103      	movs	r1, #3
 8000376:	fa01 f303 	lsl.w	r3, r1, r3
 800037a:	43db      	mvns	r3, r3
 800037c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000380:	4013      	ands	r3, r2
 8000382:	60cb      	str	r3, [r1, #12]
	
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40021000 	.word	0x40021000

08000394 <LED_On>:

//******************************************************************************************
// Turn pin On
//******************************************************************************************
void LED_On(uint8_t pin){
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR |= (1UL<<pin);
 800039e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003a2:	695a      	ldr	r2, [r3, #20]
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	2101      	movs	r1, #1
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003b0:	4313      	orrs	r3, r2
 80003b2:	614b      	str	r3, [r1, #20]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <LED_Off>:

//******************************************************************************************
// Turn pin Off
//******************************************************************************************
void LED_Off(uint8_t pin){
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR &= ~(1UL<<pin);
 80003ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ce:	695a      	ldr	r2, [r3, #20]
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	2101      	movs	r1, #1
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	43db      	mvns	r3, r3
 80003da:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003de:	4013      	ands	r3, r2
 80003e0:	614b      	str	r3, [r1, #20]
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr

080003ee <LED_Toggle>:

//******************************************************************************************
// Toggle pin
//******************************************************************************************
void LED_Toggle(uint8_t pin){
 80003ee:	b480      	push	{r7}
 80003f0:	b083      	sub	sp, #12
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	4603      	mov	r3, r0
 80003f6:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR ^= (1UL<<pin);
 80003f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003fc:	695a      	ldr	r2, [r3, #20]
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	2101      	movs	r1, #1
 8000402:	fa01 f303 	lsl.w	r3, r1, r3
 8000406:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800040a:	4053      	eors	r3, r2
 800040c:	614b      	str	r3, [r1, #20]
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
	...

0800041c <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000422:	4b6b      	ldr	r3, [pc, #428]	; (80005d0 <System_Clock_Init+0x1b4>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a6a      	ldr	r2, [pc, #424]	; (80005d0 <System_Clock_Init+0x1b4>)
 8000428:	f023 0307 	bic.w	r3, r3, #7
 800042c:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 800042e:	4b68      	ldr	r3, [pc, #416]	; (80005d0 <System_Clock_Init+0x1b4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a67      	ldr	r2, [pc, #412]	; (80005d0 <System_Clock_Init+0x1b4>)
 8000434:	f043 0302 	orr.w	r3, r3, #2
 8000438:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 800043a:	4b66      	ldr	r3, [pc, #408]	; (80005d4 <System_Clock_Init+0x1b8>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a65      	ldr	r2, [pc, #404]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000444:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 8000446:	bf00      	nop
 8000448:	4b62      	ldr	r3, [pc, #392]	; (80005d4 <System_Clock_Init+0x1b8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000450:	2b00      	cmp	r3, #0
 8000452:	d0f9      	beq.n	8000448 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 8000454:	2310      	movs	r3, #16
 8000456:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 8000458:	4b5e      	ldr	r3, [pc, #376]	; (80005d4 <System_Clock_Init+0x1b8>)
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	4a5d      	ldr	r2, [pc, #372]	; (80005d4 <System_Clock_Init+0x1b8>)
 800045e:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000462:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000464:	4b5b      	ldr	r3, [pc, #364]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000466:	685a      	ldr	r2, [r3, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	061b      	lsls	r3, r3, #24
 800046c:	4959      	ldr	r1, [pc, #356]	; (80005d4 <System_Clock_Init+0x1b8>)
 800046e:	4313      	orrs	r3, r2
 8000470:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 8000472:	4b58      	ldr	r3, [pc, #352]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a57      	ldr	r2, [pc, #348]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000478:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800047c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 800047e:	bf00      	nop
 8000480:	4b54      	ldr	r3, [pc, #336]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800048c:	d0f8      	beq.n	8000480 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 800048e:	4b51      	ldr	r3, [pc, #324]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	4a50      	ldr	r2, [pc, #320]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000494:	f023 0303 	bic.w	r3, r3, #3
 8000498:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 800049a:	4b4e      	ldr	r3, [pc, #312]	; (80005d4 <System_Clock_Init+0x1b8>)
 800049c:	68db      	ldr	r3, [r3, #12]
 800049e:	4a4d      	ldr	r2, [pc, #308]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004a0:	f043 0302 	orr.w	r3, r3, #2
 80004a4:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 80004a6:	4b4b      	ldr	r3, [pc, #300]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004a8:	68db      	ldr	r3, [r3, #12]
 80004aa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80004ae:	4a49      	ldr	r2, [pc, #292]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004b0:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80004b4:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 80004b6:	4b47      	ldr	r3, [pc, #284]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004be:	4a45      	ldr	r2, [pc, #276]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004c0:	f043 0310 	orr.w	r3, r3, #16
 80004c4:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 80004c6:	4b43      	ldr	r3, [pc, #268]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	4a42      	ldr	r2, [pc, #264]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80004d0:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 80004d2:	4b40      	ldr	r3, [pc, #256]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	4a3f      	ldr	r2, [pc, #252]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004dc:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 80004de:	4b3d      	ldr	r3, [pc, #244]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a3c      	ldr	r2, [pc, #240]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004e8:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 80004ea:	bf00      	nop
 80004ec:	4b39      	ldr	r3, [pc, #228]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f9      	beq.n	80004ec <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 80004f8:	4b36      	ldr	r3, [pc, #216]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	4a35      	ldr	r2, [pc, #212]	; (80005d4 <System_Clock_Init+0x1b8>)
 80004fe:	f023 0303 	bic.w	r3, r3, #3
 8000502:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 8000504:	4b33      	ldr	r3, [pc, #204]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	4a32      	ldr	r2, [pc, #200]	; (80005d4 <System_Clock_Init+0x1b8>)
 800050a:	f043 0303 	orr.w	r3, r3, #3
 800050e:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000510:	bf00      	nop
 8000512:	4b30      	ldr	r3, [pc, #192]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	f003 030c 	and.w	r3, r3, #12
 800051a:	2b0c      	cmp	r3, #12
 800051c:	d1f9      	bne.n	8000512 <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	4a2c      	ldr	r2, [pc, #176]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000524:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000528:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <System_Clock_Init+0x1b8>)
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	4a29      	ldr	r2, [pc, #164]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000530:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000534:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 8000536:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <System_Clock_Init+0x1b8>)
 800053c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000540:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000542:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a23      	ldr	r2, [pc, #140]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000548:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800054c:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 800054e:	bf00      	nop
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800055c:	d0f8      	beq.n	8000550 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000560:	691b      	ldr	r3, [r3, #16]
 8000562:	4a1c      	ldr	r2, [pc, #112]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000564:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000568:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 800056a:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <System_Clock_Init+0x1b8>)
 800056c:	691b      	ldr	r3, [r3, #16]
 800056e:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000570:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000574:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	4a16      	ldr	r2, [pc, #88]	; (80005d4 <System_Clock_Init+0x1b8>)
 800057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000580:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000584:	691b      	ldr	r3, [r3, #16]
 8000586:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800058c:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <System_Clock_Init+0x1b8>)
 8000594:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000598:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 800059a:	bf00      	nop
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <System_Clock_Init+0x1b8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d0f9      	beq.n	800059c <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <System_Clock_Init+0x1b8>)
 80005aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ae:	4a09      	ldr	r2, [pc, #36]	; (80005d4 <System_Clock_Init+0x1b8>)
 80005b0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80005b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <System_Clock_Init+0x1b8>)
 80005ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005bc:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <System_Clock_Init+0x1b8>)
 80005be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005c2:	6613      	str	r3, [r2, #96]	; 0x60
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40022000 	.word	0x40022000
 80005d4:	40021000 	.word	0x40021000

080005d8 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <UART2_Init+0x40>)
 80005de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005e0:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <UART2_Init+0x40>)
 80005e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e6:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 80005e8:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <UART2_Init+0x40>)
 80005ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <UART2_Init+0x40>)
 80005f0:	f023 030c 	bic.w	r3, r3, #12
 80005f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <UART2_Init+0x40>)
 80005fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005fe:	4a06      	ldr	r2, [pc, #24]	; (8000618 <UART2_Init+0x40>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 8000608:	f000 f80a 	bl	8000620 <UART2_GPIO_Init>
	USART_Init(USART2);
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <UART2_Init+0x44>)
 800060e:	f000 f84f 	bl	80006b0 <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000
 800061c:	40004400 	.word	0x40004400

08000620 <UART2_GPIO_Init>:

void UART2_GPIO_Init(void) {
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <UART2_GPIO_Init+0x8c>)
 8000626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000628:	4a20      	ldr	r2, [pc, #128]	; (80006ac <UART2_GPIO_Init+0x8c>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 8000630:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800063a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800063e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 8000640:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800064a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800064e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 8000650:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000654:	6a1b      	ldr	r3, [r3, #32]
 8000656:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800065a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800065e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 8000660:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000664:	6a1b      	ldr	r3, [r3, #32]
 8000666:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800066a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800066e:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 8000670:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800067a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800067e:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000680:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800068a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800068e:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 8000690:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800069a:	f023 030c 	bic.w	r3, r3, #12
 800069e:	6053      	str	r3, [r2, #4]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000

080006b0 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 0201 	bic.w	r2, r3, #1
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f242 028d 	movw	r2, #8333	; 0x208d
 80006ee:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f043 020c 	orr.w	r2, r3, #12
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a2c      	ldr	r2, [pc, #176]	; (80007b0 <USART_Init+0x100>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d129      	bne.n	8000758 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f043 0220 	orr.w	r2, r3, #32
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f023 0210 	bic.w	r2, r3, #16
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f023 0201 	bic.w	r2, r3, #1
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <USART_Init+0x104>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d10b      	bne.n	8000778 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6a1b      	ldr	r3, [r3, #32]
 8000764:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <USART_Init+0x108>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	4a11      	ldr	r2, [pc, #68]	; (80007b8 <USART_Init+0x108>)
 8000772:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000776:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f043 0201 	orr.w	r2, r3, #1
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000784:	bf00      	nop
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f9      	beq.n	8000786 <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000792:	bf00      	nop
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	69db      	ldr	r3, [r3, #28]
 8000798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800079c:	2b00      	cmp	r3, #0
 800079e:	d0f9      	beq.n	8000794 <USART_Init+0xe4>
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40004c00 	.word	0x40004c00
 80007b4:	40004400 	.word	0x40004400
 80007b8:	40013800 	.word	0x40013800

080007bc <USART_Read_Nonblocking>:
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
	// Reading USART_DR automatically clears the RXNE flag 
}
uint8_t USART_Read_Nonblocking (USART_TypeDef * USARTx) {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	if(!(USARTx->ISR & USART_ISR_RXNE)){
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	69db      	ldr	r3, [r3, #28]
 80007c8:	f003 0320 	and.w	r3, r3, #32
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d101      	bne.n	80007d4 <USART_Read_Nonblocking+0x18>
			return 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	e003      	b.n	80007dc <USART_Read_Nonblocking+0x20>
	}else{
		return ((uint8_t)(USARTx->RDR & 0xFF));
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80007d8:	b29b      	uxth	r3, r3
 80007da:	b2db      	uxtb	r3, r3
	}
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	e014      	b.n	8000824 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 80007fa:	bf00      	nop
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000804:	2b00      	cmp	r3, #0
 8000806:	d0f9      	beq.n	80007fc <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	b29a      	uxth	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 8000816:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800081a:	f000 f819 	bl	8000850 <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	429a      	cmp	r2, r3
 800082a:	d8e6      	bhi.n	80007fa <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 800082c:	bf00      	nop
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0f9      	beq.n	800082e <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	61da      	str	r2, [r3, #28]
}   
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2264      	movs	r2, #100	; 0x64
 800085c:	fb03 f202 	mul.w	r2, r3, r2
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <USART_Delay+0x3c>)
 8000862:	fba3 1302 	umull	r1, r3, r3, r2
 8000866:	1ad2      	subs	r2, r2, r3
 8000868:	0852      	lsrs	r2, r2, #1
 800086a:	4413      	add	r3, r2
 800086c:	089b      	lsrs	r3, r3, #2
 800086e:	60fb      	str	r3, [r7, #12]
	while(--time);   
 8000870:	bf00      	nop
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	3b01      	subs	r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d1f9      	bne.n	8000872 <USART_Delay+0x22>
}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	24924925 	.word	0x24924925

08000890 <get_song>:

// Convenience list of all the songs in one array.
song songs[] = {{song0, sizeof (song0)}, {song1, sizeof (song1)}, {song2, sizeof (song2)}, {song3, sizeof (song3)},
				{song4, sizeof (song4)}};

song get_song (uint8_t song_number){
 8000890:	b490      	push	{r4, r7}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	460b      	mov	r3, r1
 800089a:	70fb      	strb	r3, [r7, #3]
	return songs[song_number];
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	4a06      	ldr	r2, [pc, #24]	; (80008bc <get_song+0x2c>)
 80008a2:	460c      	mov	r4, r1
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	4413      	add	r3, r2
 80008a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008ac:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc90      	pop	{r4, r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20007aa4 	.word	0x20007aa4

080008c0 <next_song>:

#define LED_PIN 6

char BUFFER[128];
int currentSongNum = -1;
void next_song(){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b0ca      	sub	sp, #296	; 0x128
 80008c4:	af00      	add	r7, sp, #0
	//display next songs title and queue it
	currentSongNum++;
 80008c6:	4ba7      	ldr	r3, [pc, #668]	; (8000b64 <next_song+0x2a4>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3301      	adds	r3, #1
 80008cc:	4aa5      	ldr	r2, [pc, #660]	; (8000b64 <next_song+0x2a4>)
 80008ce:	6013      	str	r3, [r2, #0]
	if(currentSongNum == 5){
 80008d0:	4ba4      	ldr	r3, [pc, #656]	; (8000b64 <next_song+0x2a4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	d102      	bne.n	80008de <next_song+0x1e>
		currentSongNum = 0;
 80008d8:	4ba2      	ldr	r3, [pc, #648]	; (8000b64 <next_song+0x2a4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
	}
	//title find
	char songTitle[128] = {};
 80008de:	2300      	movs	r3, #0
 80008e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80008e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008e8:	227c      	movs	r2, #124	; 0x7c
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fbf3 	bl	80010d8 <memset>
	int titleIndex = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	int numToCount = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	int mtrkCnt = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	song song = get_song(currentSongNum);
 8000904:	4b97      	ldr	r3, [pc, #604]	; (8000b64 <next_song+0x2a4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	b2da      	uxtb	r2, r3
 800090a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ffbd 	bl	8000890 <get_song>
	int i = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	while(0==0){
		if(song.p_song[i] == 255 && song.p_song[i+1] == 3){ //ff,03
 800091c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000920:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2bff      	cmp	r3, #255	; 0xff
 800092a:	d108      	bne.n	800093e <next_song+0x7e>
 800092c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000930:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000934:	3301      	adds	r3, #1
 8000936:	4413      	add	r3, r2
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b03      	cmp	r3, #3
 800093c:	d02d      	beq.n	800099a <next_song+0xda>
			break;
		}
		i++;
 800093e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000942:	3301      	adds	r3, #1
 8000944:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		if(song.p_song[i] == 77 && song.p_song[i+1] == 84 && song.p_song[i+2] == 114 && song.p_song[i+3] == 107 ){//ff,03
 8000948:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800094c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000950:	4413      	add	r3, r2
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b4d      	cmp	r3, #77	; 0x4d
 8000956:	d1e1      	bne.n	800091c <next_song+0x5c>
 8000958:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800095c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000960:	3301      	adds	r3, #1
 8000962:	4413      	add	r3, r2
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b54      	cmp	r3, #84	; 0x54
 8000968:	d1d8      	bne.n	800091c <next_song+0x5c>
 800096a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800096e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000972:	3302      	adds	r3, #2
 8000974:	4413      	add	r3, r2
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b72      	cmp	r3, #114	; 0x72
 800097a:	d1cf      	bne.n	800091c <next_song+0x5c>
 800097c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000980:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000984:	3303      	adds	r3, #3
 8000986:	4413      	add	r3, r2
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b6b      	cmp	r3, #107	; 0x6b
 800098c:	d1c6      	bne.n	800091c <next_song+0x5c>
			mtrkCnt++;
 800098e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000992:	3301      	adds	r3, #1
 8000994:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		if(song.p_song[i] == 255 && song.p_song[i+1] == 3){ //ff,03
 8000998:	e7c0      	b.n	800091c <next_song+0x5c>
			break;
 800099a:	bf00      	nop
		}
	}
	//if mtrk second was not found title exists
	if(mtrkCnt != 2){
 800099c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d033      	beq.n	8000a0c <next_song+0x14c>
		int numToCount = song.p_song[i+2];
 80009a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80009a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80009ac:	3302      	adds	r3, #2
 80009ae:	4413      	add	r3, r2
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		i++;
 80009b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80009ba:	3301      	adds	r3, #1
 80009bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		for(int p = i; p<=numToCount+i+1;p++){
 80009c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80009c4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80009c8:	e016      	b.n	80009f8 <next_song+0x138>
			songTitle[titleIndex] = (char)(song.p_song[p]);
 80009ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80009ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80009d2:	4413      	add	r3, r2
 80009d4:	7819      	ldrb	r1, [r3, #0]
 80009d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80009da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80009de:	4413      	add	r3, r2
 80009e0:	460a      	mov	r2, r1
 80009e2:	701a      	strb	r2, [r3, #0]
			titleIndex++;
 80009e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80009e8:	3301      	adds	r3, #1
 80009ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		for(int p = i; p<=numToCount+i+1;p++){
 80009ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80009f2:	3301      	adds	r3, #1
 80009f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80009f8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80009fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a00:	4413      	add	r3, r2
 8000a02:	3301      	adds	r3, #1
 8000a04:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	ddde      	ble.n	80009ca <next_song+0x10a>
		}
	}
	//copyright find
	char songCopyright[128] = {};
 8000a0c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000a10:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	227c      	movs	r2, #124	; 0x7c
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 fb5a 	bl	80010d8 <memset>
	int copyrightIndex = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	i = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	mtrkCnt = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	while(0==0){
		if(song.p_song[i] == 255 && song.p_song[i+1] == 2 ){
 8000a36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a3e:	4413      	add	r3, r2
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2bff      	cmp	r3, #255	; 0xff
 8000a44:	d108      	bne.n	8000a58 <next_song+0x198>
 8000a46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a4e:	3301      	adds	r3, #1
 8000a50:	4413      	add	r3, r2
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d031      	beq.n	8000abc <next_song+0x1fc>
			break;
		}
		if(song.p_song[i] == 77 && song.p_song[i+1] == 84 && song.p_song[i+2] == 114 && song.p_song[i+3] == 107 ){
 8000a58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a60:	4413      	add	r3, r2
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b4d      	cmp	r3, #77	; 0x4d
 8000a66:	d11f      	bne.n	8000aa8 <next_song+0x1e8>
 8000a68:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a70:	3301      	adds	r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b54      	cmp	r3, #84	; 0x54
 8000a78:	d116      	bne.n	8000aa8 <next_song+0x1e8>
 8000a7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a82:	3302      	adds	r3, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b72      	cmp	r3, #114	; 0x72
 8000a8a:	d10d      	bne.n	8000aa8 <next_song+0x1e8>
 8000a8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a94:	3303      	adds	r3, #3
 8000a96:	4413      	add	r3, r2
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b6b      	cmp	r3, #107	; 0x6b
 8000a9c:	d104      	bne.n	8000aa8 <next_song+0x1e8>
					mtrkCnt++;
 8000a9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		}
		i++;
 8000aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000aac:	3301      	adds	r3, #1
 8000aae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		if(mtrkCnt == 2){
 8000ab2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d002      	beq.n	8000ac0 <next_song+0x200>
		if(song.p_song[i] == 255 && song.p_song[i+1] == 2 ){
 8000aba:	e7bc      	b.n	8000a36 <next_song+0x176>
			break;
 8000abc:	bf00      	nop
 8000abe:	e000      	b.n	8000ac2 <next_song+0x202>
			break;
 8000ac0:	bf00      	nop
		}
	}
	//if mtrk second was not found copyright exists
	if(mtrkCnt != 2){
 8000ac2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d036      	beq.n	8000b38 <next_song+0x278>
		numToCount = song.p_song[i+2];
 8000aca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000ace:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000ad2:	3302      	adds	r3, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		i++;
 8000adc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		for(int p = i+2; p<=numToCount+i+1;p++){
 8000ae6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000aea:	3302      	adds	r3, #2
 8000aec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000af0:	e018      	b.n	8000b24 <next_song+0x264>
			songCopyright[copyrightIndex] = (char)(song.p_song[p]);
 8000af2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000af6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000afa:	4413      	add	r3, r2
 8000afc:	7819      	ldrb	r1, [r3, #0]
 8000afe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b02:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8000b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b0a:	4413      	add	r3, r2
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	701a      	strb	r2, [r3, #0]
			copyrightIndex++;
 8000b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000b14:	3301      	adds	r3, #1
 8000b16:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int p = i+2; p<=numToCount+i+1;p++){
 8000b1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000b1e:	3301      	adds	r3, #1
 8000b20:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000b24:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000b28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3301      	adds	r3, #1
 8000b30:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dddc      	ble.n	8000af2 <next_song+0x232>
		}
	}
	printf("\r\n%s","Current Song:");
 8000b38:	490b      	ldr	r1, [pc, #44]	; (8000b68 <next_song+0x2a8>)
 8000b3a:	480c      	ldr	r0, [pc, #48]	; (8000b6c <next_song+0x2ac>)
 8000b3c:	f000 f972 	bl	8000e24 <printf>
	printf("\r\n%s%s","Song Title: ",songTitle);
 8000b40:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b44:	461a      	mov	r2, r3
 8000b46:	490a      	ldr	r1, [pc, #40]	; (8000b70 <next_song+0x2b0>)
 8000b48:	480a      	ldr	r0, [pc, #40]	; (8000b74 <next_song+0x2b4>)
 8000b4a:	f000 f96b 	bl	8000e24 <printf>
	printf("\r\n%s%s","Song Copyright: ",songCopyright);
 8000b4e:	463b      	mov	r3, r7
 8000b50:	461a      	mov	r2, r3
 8000b52:	4909      	ldr	r1, [pc, #36]	; (8000b78 <next_song+0x2b8>)
 8000b54:	4807      	ldr	r0, [pc, #28]	; (8000b74 <next_song+0x2b4>)
 8000b56:	f000 f965 	bl	8000e24 <printf>

}
 8000b5a:	bf00      	nop
 8000b5c:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20007acc 	.word	0x20007acc
 8000b68:	080019f8 	.word	0x080019f8
 8000b6c:	08001a08 	.word	0x08001a08
 8000b70:	08001a10 	.word	0x08001a10
 8000b74:	08001a20 	.word	0x08001a20
 8000b78:	08001a28 	.word	0x08001a28

08000b7c <play_song>:
//play song
void play_song(){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	LED_On(LED_PIN);
 8000b80:	2006      	movs	r0, #6
 8000b82:	f7ff fc07 	bl	8000394 <LED_On>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <stop_song>:
//stop song
void stop_song(){
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
	LED_Off(LED_PIN);
 8000b8e:	2006      	movs	r0, #6
 8000b90:	f7ff fc16 	bl	80003c0 <LED_Off>
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <pause_song>:
char* pause_song(){
 8000b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b9c:	b089      	sub	sp, #36	; 0x24
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	466b      	mov	r3, sp
 8000ba2:	461e      	mov	r6, r3
	init_systick();
 8000ba4:	f000 fa00 	bl	8000fa8 <init_systick>
	int cnt = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
	int index = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
	char ch = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73fb      	strb	r3, [r7, #15]
	int going = 1;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
	while(going == 1){
 8000bb8:	e027      	b.n	8000c0a <pause_song+0x72>
		cnt++;
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
		ch = USART_Read_Nonblocking(USART2);
 8000bc0:	4839      	ldr	r0, [pc, #228]	; (8000ca8 <pause_song+0x110>)
 8000bc2:	f7ff fdfb 	bl	80007bc <USART_Read_Nonblocking>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	73fb      	strb	r3, [r7, #15]
		if(ch == '\r'){
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	2b0d      	cmp	r3, #13
 8000bce:	d102      	bne.n	8000bd6 <pause_song+0x3e>
			going = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	e019      	b.n	8000c0a <pause_song+0x72>
		}else{
		if(ch != 0){
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00b      	beq.n	8000bf4 <pause_song+0x5c>
			printf("%c",ch);
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f912 	bl	8000e08 <putchar>
			BUFFER[index] = ch;
 8000be4:	4a31      	ldr	r2, [pc, #196]	; (8000cac <pause_song+0x114>)
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	4413      	add	r3, r2
 8000bea:	7bfa      	ldrb	r2, [r7, #15]
 8000bec:	701a      	strb	r2, [r3, #0]
			index++;
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
		}
		//change delay systick to only count to 1
		delay_systick();
 8000bf4:	f000 fa02 	bl	8000ffc <delay_systick>
		// Toggle LED
		//count to 10 then toggle led
		if(cnt == 1000){
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bfe:	d104      	bne.n	8000c0a <pause_song+0x72>
			LED_Toggle(LED_PIN);
 8000c00:	2006      	movs	r0, #6
 8000c02:	f7ff fbf4 	bl	80003ee <LED_Toggle>
			cnt = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
	while(going == 1){
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d0d4      	beq.n	8000bba <pause_song+0x22>
		}
		}
	}
	printf("\r\n");
 8000c10:	4827      	ldr	r0, [pc, #156]	; (8000cb0 <pause_song+0x118>)
 8000c12:	f000 f8e1 	bl	8000dd8 <puts>
	BUFFER[index] = 0;
 8000c16:	4a25      	ldr	r2, [pc, #148]	; (8000cac <pause_song+0x114>)
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
	char* toReturn[index];
 8000c20:	69b9      	ldr	r1, [r7, #24]
 8000c22:	1e4b      	subs	r3, r1, #1
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	460a      	mov	r2, r1
 8000c28:	2300      	movs	r3, #0
 8000c2a:	4690      	mov	r8, r2
 8000c2c:	4699      	mov	r9, r3
 8000c2e:	f04f 0200 	mov.w	r2, #0
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000c3a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000c3e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000c42:	460a      	mov	r2, r1
 8000c44:	2300      	movs	r3, #0
 8000c46:	4614      	mov	r4, r2
 8000c48:	461d      	mov	r5, r3
 8000c4a:	f04f 0200 	mov.w	r2, #0
 8000c4e:	f04f 0300 	mov.w	r3, #0
 8000c52:	016b      	lsls	r3, r5, #5
 8000c54:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000c58:	0162      	lsls	r2, r4, #5
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	3307      	adds	r3, #7
 8000c60:	08db      	lsrs	r3, r3, #3
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	ebad 0d03 	sub.w	sp, sp, r3
 8000c68:	466b      	mov	r3, sp
 8000c6a:	3303      	adds	r3, #3
 8000c6c:	089b      	lsrs	r3, r3, #2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	607b      	str	r3, [r7, #4]
	for(int x = 0;x< index;x++){
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	e00b      	b.n	8000c90 <pause_song+0xf8>
		*toReturn[x] = BUFFER[x];
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c80:	490a      	ldr	r1, [pc, #40]	; (8000cac <pause_song+0x114>)
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	440a      	add	r2, r1
 8000c86:	7812      	ldrb	r2, [r2, #0]
 8000c88:	701a      	strb	r2, [r3, #0]
	for(int x = 0;x< index;x++){
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	dbef      	blt.n	8000c78 <pause_song+0xe0>
	}
	return toReturn;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	46b5      	mov	sp, r6
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3724      	adds	r7, #36	; 0x24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40004400 	.word	0x40004400
 8000cac:	20007b48 	.word	0x20007b48
 8000cb0:	08001a3c 	.word	0x08001a3c

08000cb4 <take_input>:

void take_input(char initialInput){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
	char* input = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
	//if inital input exists set input equal to
	if(initialInput == 0){
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d105      	bne.n	8000cd4 <take_input+0x20>
		input = read_line();
 8000cc8:	f000 f940 	bl	8000f4c <read_line>
 8000ccc:	60f8      	str	r0, [r7, #12]
		initialInput = *input;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
	}
	*input = initialInput;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	79fa      	ldrb	r2, [r7, #7]
 8000cd8:	701a      	strb	r2, [r3, #0]
	//check input vs commands
	if(strcmp(input,"NEXT") == 0){
 8000cda:	4927      	ldr	r1, [pc, #156]	; (8000d78 <take_input+0xc4>)
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f7ff fa77 	bl	80001d0 <strcmp>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d105      	bne.n	8000cf4 <take_input+0x40>
		next_song();
 8000ce8:	f7ff fdea 	bl	80008c0 <next_song>
		printf("\r\n");
 8000cec:	4823      	ldr	r0, [pc, #140]	; (8000d7c <take_input+0xc8>)
 8000cee:	f000 f873 	bl	8000dd8 <puts>
	//if no command was entered print invalid
	else{
		printf("\r\nInvalid Input");
		printf("\r\n");
	}
}
 8000cf2:	e03d      	b.n	8000d70 <take_input+0xbc>
	else if(strcmp(input,"PLAY") == 0){
 8000cf4:	4922      	ldr	r1, [pc, #136]	; (8000d80 <take_input+0xcc>)
 8000cf6:	68f8      	ldr	r0, [r7, #12]
 8000cf8:	f7ff fa6a 	bl	80001d0 <strcmp>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d105      	bne.n	8000d0e <take_input+0x5a>
		play_song();
 8000d02:	f7ff ff3b 	bl	8000b7c <play_song>
		printf("\r\n");
 8000d06:	481d      	ldr	r0, [pc, #116]	; (8000d7c <take_input+0xc8>)
 8000d08:	f000 f866 	bl	8000dd8 <puts>
}
 8000d0c:	e030      	b.n	8000d70 <take_input+0xbc>
	else if(strcmp(input,"STOP") == 0){
 8000d0e:	491d      	ldr	r1, [pc, #116]	; (8000d84 <take_input+0xd0>)
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f7ff fa5d 	bl	80001d0 <strcmp>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d105      	bne.n	8000d28 <take_input+0x74>
		stop_song();
 8000d1c:	f7ff ff35 	bl	8000b8a <stop_song>
		printf("\r\n");
 8000d20:	4816      	ldr	r0, [pc, #88]	; (8000d7c <take_input+0xc8>)
 8000d22:	f000 f859 	bl	8000dd8 <puts>
}
 8000d26:	e023      	b.n	8000d70 <take_input+0xbc>
	else if(strcmp(input,"HELP") == 0){
 8000d28:	4917      	ldr	r1, [pc, #92]	; (8000d88 <take_input+0xd4>)
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f7ff fa50 	bl	80001d0 <strcmp>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d103      	bne.n	8000d3e <take_input+0x8a>
		printf("\n\rAvailable User Commands\n\rNEXT - Show next song info\n\rPLAY - Play the song (LED on)\n\rPAUSE - Pause the song (LED flash)\n\rSTOP - Stop the song (LED off)\n\r");
 8000d36:	4815      	ldr	r0, [pc, #84]	; (8000d8c <take_input+0xd8>)
 8000d38:	f000 f874 	bl	8000e24 <printf>
}
 8000d3c:	e018      	b.n	8000d70 <take_input+0xbc>
	else if(strcmp(input,"PAUSE") == 0){
 8000d3e:	4914      	ldr	r1, [pc, #80]	; (8000d90 <take_input+0xdc>)
 8000d40:	68f8      	ldr	r0, [r7, #12]
 8000d42:	f7ff fa45 	bl	80001d0 <strcmp>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d10b      	bne.n	8000d64 <take_input+0xb0>
		printf("\r\n");
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <take_input+0xc8>)
 8000d4e:	f000 f843 	bl	8000dd8 <puts>
		char* pausedI = pause_song();
 8000d52:	f7ff ff21 	bl	8000b98 <pause_song>
 8000d56:	60b8      	str	r0, [r7, #8]
		take_input(*pausedI);
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ffa9 	bl	8000cb4 <take_input>
}
 8000d62:	e005      	b.n	8000d70 <take_input+0xbc>
		printf("\r\nInvalid Input");
 8000d64:	480b      	ldr	r0, [pc, #44]	; (8000d94 <take_input+0xe0>)
 8000d66:	f000 f85d 	bl	8000e24 <printf>
		printf("\r\n");
 8000d6a:	4804      	ldr	r0, [pc, #16]	; (8000d7c <take_input+0xc8>)
 8000d6c:	f000 f834 	bl	8000dd8 <puts>
}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	08001a40 	.word	0x08001a40
 8000d7c:	08001a3c 	.word	0x08001a3c
 8000d80:	08001a48 	.word	0x08001a48
 8000d84:	08001a50 	.word	0x08001a50
 8000d88:	08001a58 	.word	0x08001a58
 8000d8c:	08001a60 	.word	0x08001a60
 8000d90:	08001afc 	.word	0x08001afc
 8000d94:	08001b04 	.word	0x08001b04

08000d98 <init_player>:
void init_player(){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	//initialize the player
	LED_Init(LED_PIN);
 8000d9c:	2006      	movs	r0, #6
 8000d9e:	f7ff fa9b 	bl	80002d8 <LED_Init>
	printf("Available User Commands\n\rNEXT - Show next song info\n\rPLAY - Play the song (LED on)\n\rPAUSE - Pause the song (LED flash)\n\rSTOP - Stop the song (LED off)\n\r");
 8000da2:	4803      	ldr	r0, [pc, #12]	; (8000db0 <init_player+0x18>)
 8000da4:	f000 f83e 	bl	8000e24 <printf>
	while(0 == 0){ //loop through the inputs
		take_input(0);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff ff83 	bl	8000cb4 <take_input>
 8000dae:	e7fb      	b.n	8000da8 <init_player+0x10>
 8000db0:	08001b14 	.word	0x08001b14

08000db4 <print_string>:
#include <stdio.h>
#include <stdarg.h>

static char buffer[128];

static void print_string (const char* string, int len) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
    USART_Write (USART2, (unsigned char*) string, len);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <print_string+0x20>)
 8000dc6:	f7ff fd0f 	bl	80007e8 <USART_Write>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40004400 	.word	0x40004400

08000dd8 <puts>:

int puts (const char* string){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    int len = strlen (string);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff f9ff 	bl	80001e4 <strlen>
 8000de6:	4603      	mov	r3, r0
 8000de8:	60fb      	str	r3, [r7, #12]
    print_string (string, len);
 8000dea:	68f9      	ldr	r1, [r7, #12]
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ffe1 	bl	8000db4 <print_string>
    print_string ("\n", 1);
 8000df2:	2101      	movs	r1, #1
 8000df4:	4803      	ldr	r0, [pc, #12]	; (8000e04 <puts+0x2c>)
 8000df6:	f7ff ffdd 	bl	8000db4 <print_string>
    return len;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	08001bb0 	.word	0x08001bb0

08000e08 <putchar>:

int putchar (int chr){
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
    print_string ((char*)&chr, 1);
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2101      	movs	r1, #1
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ffcd 	bl	8000db4 <print_string>
    return chr;
 8000e1a:	687b      	ldr	r3, [r7, #4]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <printf>:

int printf (const char* format, ...) {
 8000e24:	b40f      	push	{r0, r1, r2, r3}
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
    va_list aptr;
    int ret;

    va_start(aptr, format);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	603b      	str	r3, [r7, #0]
    ret = vsprintf(buffer, format, aptr);
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	6939      	ldr	r1, [r7, #16]
 8000e36:	4808      	ldr	r0, [pc, #32]	; (8000e58 <printf+0x34>)
 8000e38:	f000 f944 	bl	80010c4 <vsiprintf>
 8000e3c:	6078      	str	r0, [r7, #4]
    va_end(aptr);
    print_string (buffer, ret);
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <printf+0x34>)
 8000e42:	f7ff ffb7 	bl	8000db4 <print_string>

    return(ret);
 8000e46:	687b      	ldr	r3, [r7, #4]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e52:	b004      	add	sp, #16
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20007bc8 	.word	0x20007bc8

08000e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <_sbrk+0x5c>)
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <_sbrk+0x60>)
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e70:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <_sbrk+0x64>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <_sbrk+0x68>)
 8000e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d207      	bcs.n	8000e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e8c:	f000 f92c 	bl	80010e8 <__errno>
 8000e90:	4603      	mov	r3, r0
 8000e92:	220c      	movs	r2, #12
 8000e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e009      	b.n	8000eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <_sbrk+0x64>)
 8000eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20018000 	.word	0x20018000
 8000ebc:	00000400 	.word	0x00000400
 8000ec0:	20007c48 	.word	0x20007c48
 8000ec4:	20007e18 	.word	0x20007e18

08000ec8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <SystemInit+0x64>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed2:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <SystemInit+0x64>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <SystemInit+0x68>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <SystemInit+0x68>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <SystemInit+0x68>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <SystemInit+0x68>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <SystemInit+0x68>)
 8000ef4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ef8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000efc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <SystemInit+0x68>)
 8000f00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f04:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <SystemInit+0x68>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a09      	ldr	r2, [pc, #36]	; (8000f30 <SystemInit+0x68>)
 8000f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <SystemInit+0x68>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <SystemInit+0x64>)
 8000f1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	40021000 	.word	0x40021000

08000f34 <main>:
#include "stdlib.h"
#include "math.h"
#include "ctype.h"

#define PIN_NUMBER 6
int main(void){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0

	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 8000f38:	f7ff fa70 	bl	800041c <System_Clock_Init>
	UART2_Init();
 8000f3c:	f7ff fb4c 	bl	80005d8 <UART2_Init>
	
	init_player();
 8000f40:	f7ff ff2a 	bl	8000d98 <init_player>
 8000f44:	2300      	movs	r3, #0

}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <read_line>:
#include "UART.h"
#include "printf.h"
#include "LED.h"
static char BUFFER[128];

char* read_line(){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	//read one characterA
	//print that character on it's own line
	int index = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
	char ch = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	70fb      	strb	r3, [r7, #3]
	while(ch != '\r'){
 8000f5a:	e013      	b.n	8000f84 <read_line+0x38>
		ch = (char)USART_Read_Nonblocking(USART2);
 8000f5c:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <read_line+0x54>)
 8000f5e:	f7ff fc2d 	bl	80007bc <USART_Read_Nonblocking>
 8000f62:	4603      	mov	r3, r0
 8000f64:	70fb      	strb	r3, [r7, #3]
		if(ch != '\0'){
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00b      	beq.n	8000f84 <read_line+0x38>
			printf("%c",ch);
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff4a 	bl	8000e08 <putchar>
			BUFFER[index] = ch;
 8000f74:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <read_line+0x58>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	78fa      	ldrb	r2, [r7, #3]
 8000f7c:	701a      	strb	r2, [r3, #0]
			index++;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3301      	adds	r3, #1
 8000f82:	607b      	str	r3, [r7, #4]
	while(ch != '\r'){
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	2b0d      	cmp	r3, #13
 8000f88:	d1e8      	bne.n	8000f5c <read_line+0x10>
		}
	}
	BUFFER[index - 1] = 0;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <read_line+0x58>)
 8000f90:	2100      	movs	r1, #0
 8000f92:	54d1      	strb	r1, [r2, r3]
	return BUFFER;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <read_line+0x58>)

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40004400 	.word	0x40004400
 8000fa4:	20007c4c 	.word	0x20007c4c

08000fa8 <init_systick>:
	uint32_t CVR;
	uint32_t CALIB;
};
struct SYST* SYST_TICK = (struct SYST*) 0xE000E010;
// This function is to Initialize SysTick registers
struct SYST* init_systick(){
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
		//clear csr register
		SYST_TICK->CSR &= ~(1 << 0);;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <init_systick+0x4c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <init_systick+0x4c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
	    // Set timer to 10 ms
	    SYST_TICK->RVR = 79999;
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <init_systick+0x4c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <init_systick+0x50>)
 8000fc2:	605a      	str	r2, [r3, #4]
	    //Set to internal clock
	    SYST_TICK->CSR |= (1<<2); // Use pc source
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <init_systick+0x4c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <init_systick+0x4c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0204 	orr.w	r2, r2, #4
 8000fd2:	601a      	str	r2, [r3, #0]
	    //Enable timer
	    SYST_TICK->CSR |= (1<<0); // Enable
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <init_systick+0x4c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <init_systick+0x4c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f042 0201 	orr.w	r2, r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]
	    return SYST_TICK;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <init_systick+0x4c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20007ad0 	.word	0x20007ad0
 8000ff8:	0001387f 	.word	0x0001387f

08000ffc <delay_systick>:

// This function is to create delay using SysTick timer counter
void delay_systick(){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
	int i;
	for(i=0;i<=0;i++){
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	e010      	b.n	800102a <delay_systick+0x2e>
		// Inside that for loop check the COUNTFLAG bit in the CTRL (CSR)
		// register in a loop. When that bit is set exit this inner loop
		int x = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	603b      	str	r3, [r7, #0]
		while(x == 0){
 800100c:	e007      	b.n	800101e <delay_systick+0x22>
			if ((SYST_TICK->CSR >> 16) == 1) {
 800100e:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <delay_systick+0x44>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	0c1b      	lsrs	r3, r3, #16
 8001016:	2b01      	cmp	r3, #1
 8001018:	d101      	bne.n	800101e <delay_systick+0x22>
		         x = 1;
 800101a:	2301      	movs	r3, #1
 800101c:	603b      	str	r3, [r7, #0]
		while(x == 0){
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0f4      	beq.n	800100e <delay_systick+0x12>
	for(i=0;i<=0;i++){
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3301      	adds	r3, #1
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	ddeb      	ble.n	8001008 <delay_systick+0xc>
			}
		}
	}
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20007ad0 	.word	0x20007ad0

08001044 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800107c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001048:	f7ff ff3e 	bl	8000ec8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800104c:	480c      	ldr	r0, [pc, #48]	; (8001080 <LoopForever+0x6>)
  ldr r1, =_edata
 800104e:	490d      	ldr	r1, [pc, #52]	; (8001084 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <LoopForever+0xe>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001064:	4c0a      	ldr	r4, [pc, #40]	; (8001090 <LoopForever+0x16>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001072:	f000 f83f 	bl	80010f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001076:	f7ff ff5d 	bl	8000f34 <main>

0800107a <LoopForever>:

LoopForever:
    b LoopForever
 800107a:	e7fe      	b.n	800107a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800107c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	20007b24 	.word	0x20007b24
  ldr r2, =_sidata
 8001088:	08001bf0 	.word	0x08001bf0
  ldr r2, =_sbss
 800108c:	20007b24 	.word	0x20007b24
  ldr r4, =_ebss
 8001090:	20007e14 	.word	0x20007e14

08001094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC1_2_IRQHandler>
	...

08001098 <_vsiprintf_r>:
 8001098:	b500      	push	{lr}
 800109a:	b09b      	sub	sp, #108	; 0x6c
 800109c:	9100      	str	r1, [sp, #0]
 800109e:	9104      	str	r1, [sp, #16]
 80010a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80010a4:	9105      	str	r1, [sp, #20]
 80010a6:	9102      	str	r1, [sp, #8]
 80010a8:	4905      	ldr	r1, [pc, #20]	; (80010c0 <_vsiprintf_r+0x28>)
 80010aa:	9103      	str	r1, [sp, #12]
 80010ac:	4669      	mov	r1, sp
 80010ae:	f000 f999 	bl	80013e4 <_svfiprintf_r>
 80010b2:	9b00      	ldr	r3, [sp, #0]
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	b01b      	add	sp, #108	; 0x6c
 80010ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80010be:	bf00      	nop
 80010c0:	ffff0208 	.word	0xffff0208

080010c4 <vsiprintf>:
 80010c4:	4613      	mov	r3, r2
 80010c6:	460a      	mov	r2, r1
 80010c8:	4601      	mov	r1, r0
 80010ca:	4802      	ldr	r0, [pc, #8]	; (80010d4 <vsiprintf+0x10>)
 80010cc:	6800      	ldr	r0, [r0, #0]
 80010ce:	f7ff bfe3 	b.w	8001098 <_vsiprintf_r>
 80010d2:	bf00      	nop
 80010d4:	20007b20 	.word	0x20007b20

080010d8 <memset>:
 80010d8:	4402      	add	r2, r0
 80010da:	4603      	mov	r3, r0
 80010dc:	4293      	cmp	r3, r2
 80010de:	d100      	bne.n	80010e2 <memset+0xa>
 80010e0:	4770      	bx	lr
 80010e2:	f803 1b01 	strb.w	r1, [r3], #1
 80010e6:	e7f9      	b.n	80010dc <memset+0x4>

080010e8 <__errno>:
 80010e8:	4b01      	ldr	r3, [pc, #4]	; (80010f0 <__errno+0x8>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20007b20 	.word	0x20007b20

080010f4 <__libc_init_array>:
 80010f4:	b570      	push	{r4, r5, r6, lr}
 80010f6:	4d0d      	ldr	r5, [pc, #52]	; (800112c <__libc_init_array+0x38>)
 80010f8:	4c0d      	ldr	r4, [pc, #52]	; (8001130 <__libc_init_array+0x3c>)
 80010fa:	1b64      	subs	r4, r4, r5
 80010fc:	10a4      	asrs	r4, r4, #2
 80010fe:	2600      	movs	r6, #0
 8001100:	42a6      	cmp	r6, r4
 8001102:	d109      	bne.n	8001118 <__libc_init_array+0x24>
 8001104:	4d0b      	ldr	r5, [pc, #44]	; (8001134 <__libc_init_array+0x40>)
 8001106:	4c0c      	ldr	r4, [pc, #48]	; (8001138 <__libc_init_array+0x44>)
 8001108:	f000 fc6a 	bl	80019e0 <_init>
 800110c:	1b64      	subs	r4, r4, r5
 800110e:	10a4      	asrs	r4, r4, #2
 8001110:	2600      	movs	r6, #0
 8001112:	42a6      	cmp	r6, r4
 8001114:	d105      	bne.n	8001122 <__libc_init_array+0x2e>
 8001116:	bd70      	pop	{r4, r5, r6, pc}
 8001118:	f855 3b04 	ldr.w	r3, [r5], #4
 800111c:	4798      	blx	r3
 800111e:	3601      	adds	r6, #1
 8001120:	e7ee      	b.n	8001100 <__libc_init_array+0xc>
 8001122:	f855 3b04 	ldr.w	r3, [r5], #4
 8001126:	4798      	blx	r3
 8001128:	3601      	adds	r6, #1
 800112a:	e7f2      	b.n	8001112 <__libc_init_array+0x1e>
 800112c:	08001be8 	.word	0x08001be8
 8001130:	08001be8 	.word	0x08001be8
 8001134:	08001be8 	.word	0x08001be8
 8001138:	08001bec 	.word	0x08001bec

0800113c <__retarget_lock_acquire_recursive>:
 800113c:	4770      	bx	lr

0800113e <__retarget_lock_release_recursive>:
 800113e:	4770      	bx	lr

08001140 <_free_r>:
 8001140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001142:	2900      	cmp	r1, #0
 8001144:	d044      	beq.n	80011d0 <_free_r+0x90>
 8001146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800114a:	9001      	str	r0, [sp, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	f1a1 0404 	sub.w	r4, r1, #4
 8001152:	bfb8      	it	lt
 8001154:	18e4      	addlt	r4, r4, r3
 8001156:	f000 f8df 	bl	8001318 <__malloc_lock>
 800115a:	4a1e      	ldr	r2, [pc, #120]	; (80011d4 <_free_r+0x94>)
 800115c:	9801      	ldr	r0, [sp, #4]
 800115e:	6813      	ldr	r3, [r2, #0]
 8001160:	b933      	cbnz	r3, 8001170 <_free_r+0x30>
 8001162:	6063      	str	r3, [r4, #4]
 8001164:	6014      	str	r4, [r2, #0]
 8001166:	b003      	add	sp, #12
 8001168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800116c:	f000 b8da 	b.w	8001324 <__malloc_unlock>
 8001170:	42a3      	cmp	r3, r4
 8001172:	d908      	bls.n	8001186 <_free_r+0x46>
 8001174:	6825      	ldr	r5, [r4, #0]
 8001176:	1961      	adds	r1, r4, r5
 8001178:	428b      	cmp	r3, r1
 800117a:	bf01      	itttt	eq
 800117c:	6819      	ldreq	r1, [r3, #0]
 800117e:	685b      	ldreq	r3, [r3, #4]
 8001180:	1949      	addeq	r1, r1, r5
 8001182:	6021      	streq	r1, [r4, #0]
 8001184:	e7ed      	b.n	8001162 <_free_r+0x22>
 8001186:	461a      	mov	r2, r3
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	b10b      	cbz	r3, 8001190 <_free_r+0x50>
 800118c:	42a3      	cmp	r3, r4
 800118e:	d9fa      	bls.n	8001186 <_free_r+0x46>
 8001190:	6811      	ldr	r1, [r2, #0]
 8001192:	1855      	adds	r5, r2, r1
 8001194:	42a5      	cmp	r5, r4
 8001196:	d10b      	bne.n	80011b0 <_free_r+0x70>
 8001198:	6824      	ldr	r4, [r4, #0]
 800119a:	4421      	add	r1, r4
 800119c:	1854      	adds	r4, r2, r1
 800119e:	42a3      	cmp	r3, r4
 80011a0:	6011      	str	r1, [r2, #0]
 80011a2:	d1e0      	bne.n	8001166 <_free_r+0x26>
 80011a4:	681c      	ldr	r4, [r3, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	6053      	str	r3, [r2, #4]
 80011aa:	440c      	add	r4, r1
 80011ac:	6014      	str	r4, [r2, #0]
 80011ae:	e7da      	b.n	8001166 <_free_r+0x26>
 80011b0:	d902      	bls.n	80011b8 <_free_r+0x78>
 80011b2:	230c      	movs	r3, #12
 80011b4:	6003      	str	r3, [r0, #0]
 80011b6:	e7d6      	b.n	8001166 <_free_r+0x26>
 80011b8:	6825      	ldr	r5, [r4, #0]
 80011ba:	1961      	adds	r1, r4, r5
 80011bc:	428b      	cmp	r3, r1
 80011be:	bf04      	itt	eq
 80011c0:	6819      	ldreq	r1, [r3, #0]
 80011c2:	685b      	ldreq	r3, [r3, #4]
 80011c4:	6063      	str	r3, [r4, #4]
 80011c6:	bf04      	itt	eq
 80011c8:	1949      	addeq	r1, r1, r5
 80011ca:	6021      	streq	r1, [r4, #0]
 80011cc:	6054      	str	r4, [r2, #4]
 80011ce:	e7ca      	b.n	8001166 <_free_r+0x26>
 80011d0:	b003      	add	sp, #12
 80011d2:	bd30      	pop	{r4, r5, pc}
 80011d4:	20007e0c 	.word	0x20007e0c

080011d8 <sbrk_aligned>:
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	4e0e      	ldr	r6, [pc, #56]	; (8001214 <sbrk_aligned+0x3c>)
 80011dc:	460c      	mov	r4, r1
 80011de:	6831      	ldr	r1, [r6, #0]
 80011e0:	4605      	mov	r5, r0
 80011e2:	b911      	cbnz	r1, 80011ea <sbrk_aligned+0x12>
 80011e4:	f000 fba6 	bl	8001934 <_sbrk_r>
 80011e8:	6030      	str	r0, [r6, #0]
 80011ea:	4621      	mov	r1, r4
 80011ec:	4628      	mov	r0, r5
 80011ee:	f000 fba1 	bl	8001934 <_sbrk_r>
 80011f2:	1c43      	adds	r3, r0, #1
 80011f4:	d00a      	beq.n	800120c <sbrk_aligned+0x34>
 80011f6:	1cc4      	adds	r4, r0, #3
 80011f8:	f024 0403 	bic.w	r4, r4, #3
 80011fc:	42a0      	cmp	r0, r4
 80011fe:	d007      	beq.n	8001210 <sbrk_aligned+0x38>
 8001200:	1a21      	subs	r1, r4, r0
 8001202:	4628      	mov	r0, r5
 8001204:	f000 fb96 	bl	8001934 <_sbrk_r>
 8001208:	3001      	adds	r0, #1
 800120a:	d101      	bne.n	8001210 <sbrk_aligned+0x38>
 800120c:	f04f 34ff 	mov.w	r4, #4294967295
 8001210:	4620      	mov	r0, r4
 8001212:	bd70      	pop	{r4, r5, r6, pc}
 8001214:	20007e10 	.word	0x20007e10

08001218 <_malloc_r>:
 8001218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800121c:	1ccd      	adds	r5, r1, #3
 800121e:	f025 0503 	bic.w	r5, r5, #3
 8001222:	3508      	adds	r5, #8
 8001224:	2d0c      	cmp	r5, #12
 8001226:	bf38      	it	cc
 8001228:	250c      	movcc	r5, #12
 800122a:	2d00      	cmp	r5, #0
 800122c:	4607      	mov	r7, r0
 800122e:	db01      	blt.n	8001234 <_malloc_r+0x1c>
 8001230:	42a9      	cmp	r1, r5
 8001232:	d905      	bls.n	8001240 <_malloc_r+0x28>
 8001234:	230c      	movs	r3, #12
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	2600      	movs	r6, #0
 800123a:	4630      	mov	r0, r6
 800123c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001240:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001314 <_malloc_r+0xfc>
 8001244:	f000 f868 	bl	8001318 <__malloc_lock>
 8001248:	f8d8 3000 	ldr.w	r3, [r8]
 800124c:	461c      	mov	r4, r3
 800124e:	bb5c      	cbnz	r4, 80012a8 <_malloc_r+0x90>
 8001250:	4629      	mov	r1, r5
 8001252:	4638      	mov	r0, r7
 8001254:	f7ff ffc0 	bl	80011d8 <sbrk_aligned>
 8001258:	1c43      	adds	r3, r0, #1
 800125a:	4604      	mov	r4, r0
 800125c:	d155      	bne.n	800130a <_malloc_r+0xf2>
 800125e:	f8d8 4000 	ldr.w	r4, [r8]
 8001262:	4626      	mov	r6, r4
 8001264:	2e00      	cmp	r6, #0
 8001266:	d145      	bne.n	80012f4 <_malloc_r+0xdc>
 8001268:	2c00      	cmp	r4, #0
 800126a:	d048      	beq.n	80012fe <_malloc_r+0xe6>
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	4631      	mov	r1, r6
 8001270:	4638      	mov	r0, r7
 8001272:	eb04 0903 	add.w	r9, r4, r3
 8001276:	f000 fb5d 	bl	8001934 <_sbrk_r>
 800127a:	4581      	cmp	r9, r0
 800127c:	d13f      	bne.n	80012fe <_malloc_r+0xe6>
 800127e:	6821      	ldr	r1, [r4, #0]
 8001280:	1a6d      	subs	r5, r5, r1
 8001282:	4629      	mov	r1, r5
 8001284:	4638      	mov	r0, r7
 8001286:	f7ff ffa7 	bl	80011d8 <sbrk_aligned>
 800128a:	3001      	adds	r0, #1
 800128c:	d037      	beq.n	80012fe <_malloc_r+0xe6>
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	442b      	add	r3, r5
 8001292:	6023      	str	r3, [r4, #0]
 8001294:	f8d8 3000 	ldr.w	r3, [r8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d038      	beq.n	800130e <_malloc_r+0xf6>
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	42a2      	cmp	r2, r4
 80012a0:	d12b      	bne.n	80012fa <_malloc_r+0xe2>
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	e00f      	b.n	80012c8 <_malloc_r+0xb0>
 80012a8:	6822      	ldr	r2, [r4, #0]
 80012aa:	1b52      	subs	r2, r2, r5
 80012ac:	d41f      	bmi.n	80012ee <_malloc_r+0xd6>
 80012ae:	2a0b      	cmp	r2, #11
 80012b0:	d917      	bls.n	80012e2 <_malloc_r+0xca>
 80012b2:	1961      	adds	r1, r4, r5
 80012b4:	42a3      	cmp	r3, r4
 80012b6:	6025      	str	r5, [r4, #0]
 80012b8:	bf18      	it	ne
 80012ba:	6059      	strne	r1, [r3, #4]
 80012bc:	6863      	ldr	r3, [r4, #4]
 80012be:	bf08      	it	eq
 80012c0:	f8c8 1000 	streq.w	r1, [r8]
 80012c4:	5162      	str	r2, [r4, r5]
 80012c6:	604b      	str	r3, [r1, #4]
 80012c8:	4638      	mov	r0, r7
 80012ca:	f104 060b 	add.w	r6, r4, #11
 80012ce:	f000 f829 	bl	8001324 <__malloc_unlock>
 80012d2:	f026 0607 	bic.w	r6, r6, #7
 80012d6:	1d23      	adds	r3, r4, #4
 80012d8:	1af2      	subs	r2, r6, r3
 80012da:	d0ae      	beq.n	800123a <_malloc_r+0x22>
 80012dc:	1b9b      	subs	r3, r3, r6
 80012de:	50a3      	str	r3, [r4, r2]
 80012e0:	e7ab      	b.n	800123a <_malloc_r+0x22>
 80012e2:	42a3      	cmp	r3, r4
 80012e4:	6862      	ldr	r2, [r4, #4]
 80012e6:	d1dd      	bne.n	80012a4 <_malloc_r+0x8c>
 80012e8:	f8c8 2000 	str.w	r2, [r8]
 80012ec:	e7ec      	b.n	80012c8 <_malloc_r+0xb0>
 80012ee:	4623      	mov	r3, r4
 80012f0:	6864      	ldr	r4, [r4, #4]
 80012f2:	e7ac      	b.n	800124e <_malloc_r+0x36>
 80012f4:	4634      	mov	r4, r6
 80012f6:	6876      	ldr	r6, [r6, #4]
 80012f8:	e7b4      	b.n	8001264 <_malloc_r+0x4c>
 80012fa:	4613      	mov	r3, r2
 80012fc:	e7cc      	b.n	8001298 <_malloc_r+0x80>
 80012fe:	230c      	movs	r3, #12
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	4638      	mov	r0, r7
 8001304:	f000 f80e 	bl	8001324 <__malloc_unlock>
 8001308:	e797      	b.n	800123a <_malloc_r+0x22>
 800130a:	6025      	str	r5, [r4, #0]
 800130c:	e7dc      	b.n	80012c8 <_malloc_r+0xb0>
 800130e:	605b      	str	r3, [r3, #4]
 8001310:	deff      	udf	#255	; 0xff
 8001312:	bf00      	nop
 8001314:	20007e0c 	.word	0x20007e0c

08001318 <__malloc_lock>:
 8001318:	4801      	ldr	r0, [pc, #4]	; (8001320 <__malloc_lock+0x8>)
 800131a:	f7ff bf0f 	b.w	800113c <__retarget_lock_acquire_recursive>
 800131e:	bf00      	nop
 8001320:	20007e08 	.word	0x20007e08

08001324 <__malloc_unlock>:
 8001324:	4801      	ldr	r0, [pc, #4]	; (800132c <__malloc_unlock+0x8>)
 8001326:	f7ff bf0a 	b.w	800113e <__retarget_lock_release_recursive>
 800132a:	bf00      	nop
 800132c:	20007e08 	.word	0x20007e08

08001330 <__ssputs_r>:
 8001330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001334:	688e      	ldr	r6, [r1, #8]
 8001336:	461f      	mov	r7, r3
 8001338:	42be      	cmp	r6, r7
 800133a:	680b      	ldr	r3, [r1, #0]
 800133c:	4682      	mov	sl, r0
 800133e:	460c      	mov	r4, r1
 8001340:	4690      	mov	r8, r2
 8001342:	d82c      	bhi.n	800139e <__ssputs_r+0x6e>
 8001344:	898a      	ldrh	r2, [r1, #12]
 8001346:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800134a:	d026      	beq.n	800139a <__ssputs_r+0x6a>
 800134c:	6965      	ldr	r5, [r4, #20]
 800134e:	6909      	ldr	r1, [r1, #16]
 8001350:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001354:	eba3 0901 	sub.w	r9, r3, r1
 8001358:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800135c:	1c7b      	adds	r3, r7, #1
 800135e:	444b      	add	r3, r9
 8001360:	106d      	asrs	r5, r5, #1
 8001362:	429d      	cmp	r5, r3
 8001364:	bf38      	it	cc
 8001366:	461d      	movcc	r5, r3
 8001368:	0553      	lsls	r3, r2, #21
 800136a:	d527      	bpl.n	80013bc <__ssputs_r+0x8c>
 800136c:	4629      	mov	r1, r5
 800136e:	f7ff ff53 	bl	8001218 <_malloc_r>
 8001372:	4606      	mov	r6, r0
 8001374:	b360      	cbz	r0, 80013d0 <__ssputs_r+0xa0>
 8001376:	6921      	ldr	r1, [r4, #16]
 8001378:	464a      	mov	r2, r9
 800137a:	f000 faeb 	bl	8001954 <memcpy>
 800137e:	89a3      	ldrh	r3, [r4, #12]
 8001380:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001388:	81a3      	strh	r3, [r4, #12]
 800138a:	6126      	str	r6, [r4, #16]
 800138c:	6165      	str	r5, [r4, #20]
 800138e:	444e      	add	r6, r9
 8001390:	eba5 0509 	sub.w	r5, r5, r9
 8001394:	6026      	str	r6, [r4, #0]
 8001396:	60a5      	str	r5, [r4, #8]
 8001398:	463e      	mov	r6, r7
 800139a:	42be      	cmp	r6, r7
 800139c:	d900      	bls.n	80013a0 <__ssputs_r+0x70>
 800139e:	463e      	mov	r6, r7
 80013a0:	6820      	ldr	r0, [r4, #0]
 80013a2:	4632      	mov	r2, r6
 80013a4:	4641      	mov	r1, r8
 80013a6:	f000 faab 	bl	8001900 <memmove>
 80013aa:	68a3      	ldr	r3, [r4, #8]
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	60a3      	str	r3, [r4, #8]
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	4433      	add	r3, r6
 80013b4:	6023      	str	r3, [r4, #0]
 80013b6:	2000      	movs	r0, #0
 80013b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013bc:	462a      	mov	r2, r5
 80013be:	f000 fad7 	bl	8001970 <_realloc_r>
 80013c2:	4606      	mov	r6, r0
 80013c4:	2800      	cmp	r0, #0
 80013c6:	d1e0      	bne.n	800138a <__ssputs_r+0x5a>
 80013c8:	6921      	ldr	r1, [r4, #16]
 80013ca:	4650      	mov	r0, sl
 80013cc:	f7ff feb8 	bl	8001140 <_free_r>
 80013d0:	230c      	movs	r3, #12
 80013d2:	f8ca 3000 	str.w	r3, [sl]
 80013d6:	89a3      	ldrh	r3, [r4, #12]
 80013d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013dc:	81a3      	strh	r3, [r4, #12]
 80013de:	f04f 30ff 	mov.w	r0, #4294967295
 80013e2:	e7e9      	b.n	80013b8 <__ssputs_r+0x88>

080013e4 <_svfiprintf_r>:
 80013e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013e8:	4698      	mov	r8, r3
 80013ea:	898b      	ldrh	r3, [r1, #12]
 80013ec:	061b      	lsls	r3, r3, #24
 80013ee:	b09d      	sub	sp, #116	; 0x74
 80013f0:	4607      	mov	r7, r0
 80013f2:	460d      	mov	r5, r1
 80013f4:	4614      	mov	r4, r2
 80013f6:	d50e      	bpl.n	8001416 <_svfiprintf_r+0x32>
 80013f8:	690b      	ldr	r3, [r1, #16]
 80013fa:	b963      	cbnz	r3, 8001416 <_svfiprintf_r+0x32>
 80013fc:	2140      	movs	r1, #64	; 0x40
 80013fe:	f7ff ff0b 	bl	8001218 <_malloc_r>
 8001402:	6028      	str	r0, [r5, #0]
 8001404:	6128      	str	r0, [r5, #16]
 8001406:	b920      	cbnz	r0, 8001412 <_svfiprintf_r+0x2e>
 8001408:	230c      	movs	r3, #12
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	e0d0      	b.n	80015b4 <_svfiprintf_r+0x1d0>
 8001412:	2340      	movs	r3, #64	; 0x40
 8001414:	616b      	str	r3, [r5, #20]
 8001416:	2300      	movs	r3, #0
 8001418:	9309      	str	r3, [sp, #36]	; 0x24
 800141a:	2320      	movs	r3, #32
 800141c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001420:	f8cd 800c 	str.w	r8, [sp, #12]
 8001424:	2330      	movs	r3, #48	; 0x30
 8001426:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80015cc <_svfiprintf_r+0x1e8>
 800142a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800142e:	f04f 0901 	mov.w	r9, #1
 8001432:	4623      	mov	r3, r4
 8001434:	469a      	mov	sl, r3
 8001436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800143a:	b10a      	cbz	r2, 8001440 <_svfiprintf_r+0x5c>
 800143c:	2a25      	cmp	r2, #37	; 0x25
 800143e:	d1f9      	bne.n	8001434 <_svfiprintf_r+0x50>
 8001440:	ebba 0b04 	subs.w	fp, sl, r4
 8001444:	d00b      	beq.n	800145e <_svfiprintf_r+0x7a>
 8001446:	465b      	mov	r3, fp
 8001448:	4622      	mov	r2, r4
 800144a:	4629      	mov	r1, r5
 800144c:	4638      	mov	r0, r7
 800144e:	f7ff ff6f 	bl	8001330 <__ssputs_r>
 8001452:	3001      	adds	r0, #1
 8001454:	f000 80a9 	beq.w	80015aa <_svfiprintf_r+0x1c6>
 8001458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800145a:	445a      	add	r2, fp
 800145c:	9209      	str	r2, [sp, #36]	; 0x24
 800145e:	f89a 3000 	ldrb.w	r3, [sl]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 80a1 	beq.w	80015aa <_svfiprintf_r+0x1c6>
 8001468:	2300      	movs	r3, #0
 800146a:	f04f 32ff 	mov.w	r2, #4294967295
 800146e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001472:	f10a 0a01 	add.w	sl, sl, #1
 8001476:	9304      	str	r3, [sp, #16]
 8001478:	9307      	str	r3, [sp, #28]
 800147a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800147e:	931a      	str	r3, [sp, #104]	; 0x68
 8001480:	4654      	mov	r4, sl
 8001482:	2205      	movs	r2, #5
 8001484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001488:	4850      	ldr	r0, [pc, #320]	; (80015cc <_svfiprintf_r+0x1e8>)
 800148a:	f7fe feb9 	bl	8000200 <memchr>
 800148e:	9a04      	ldr	r2, [sp, #16]
 8001490:	b9d8      	cbnz	r0, 80014ca <_svfiprintf_r+0xe6>
 8001492:	06d0      	lsls	r0, r2, #27
 8001494:	bf44      	itt	mi
 8001496:	2320      	movmi	r3, #32
 8001498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800149c:	0711      	lsls	r1, r2, #28
 800149e:	bf44      	itt	mi
 80014a0:	232b      	movmi	r3, #43	; 0x2b
 80014a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80014a6:	f89a 3000 	ldrb.w	r3, [sl]
 80014aa:	2b2a      	cmp	r3, #42	; 0x2a
 80014ac:	d015      	beq.n	80014da <_svfiprintf_r+0xf6>
 80014ae:	9a07      	ldr	r2, [sp, #28]
 80014b0:	4654      	mov	r4, sl
 80014b2:	2000      	movs	r0, #0
 80014b4:	f04f 0c0a 	mov.w	ip, #10
 80014b8:	4621      	mov	r1, r4
 80014ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014be:	3b30      	subs	r3, #48	; 0x30
 80014c0:	2b09      	cmp	r3, #9
 80014c2:	d94d      	bls.n	8001560 <_svfiprintf_r+0x17c>
 80014c4:	b1b0      	cbz	r0, 80014f4 <_svfiprintf_r+0x110>
 80014c6:	9207      	str	r2, [sp, #28]
 80014c8:	e014      	b.n	80014f4 <_svfiprintf_r+0x110>
 80014ca:	eba0 0308 	sub.w	r3, r0, r8
 80014ce:	fa09 f303 	lsl.w	r3, r9, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	9304      	str	r3, [sp, #16]
 80014d6:	46a2      	mov	sl, r4
 80014d8:	e7d2      	b.n	8001480 <_svfiprintf_r+0x9c>
 80014da:	9b03      	ldr	r3, [sp, #12]
 80014dc:	1d19      	adds	r1, r3, #4
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	9103      	str	r1, [sp, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	bfbb      	ittet	lt
 80014e6:	425b      	neglt	r3, r3
 80014e8:	f042 0202 	orrlt.w	r2, r2, #2
 80014ec:	9307      	strge	r3, [sp, #28]
 80014ee:	9307      	strlt	r3, [sp, #28]
 80014f0:	bfb8      	it	lt
 80014f2:	9204      	strlt	r2, [sp, #16]
 80014f4:	7823      	ldrb	r3, [r4, #0]
 80014f6:	2b2e      	cmp	r3, #46	; 0x2e
 80014f8:	d10c      	bne.n	8001514 <_svfiprintf_r+0x130>
 80014fa:	7863      	ldrb	r3, [r4, #1]
 80014fc:	2b2a      	cmp	r3, #42	; 0x2a
 80014fe:	d134      	bne.n	800156a <_svfiprintf_r+0x186>
 8001500:	9b03      	ldr	r3, [sp, #12]
 8001502:	1d1a      	adds	r2, r3, #4
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	9203      	str	r2, [sp, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	bfb8      	it	lt
 800150c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001510:	3402      	adds	r4, #2
 8001512:	9305      	str	r3, [sp, #20]
 8001514:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80015dc <_svfiprintf_r+0x1f8>
 8001518:	7821      	ldrb	r1, [r4, #0]
 800151a:	2203      	movs	r2, #3
 800151c:	4650      	mov	r0, sl
 800151e:	f7fe fe6f 	bl	8000200 <memchr>
 8001522:	b138      	cbz	r0, 8001534 <_svfiprintf_r+0x150>
 8001524:	9b04      	ldr	r3, [sp, #16]
 8001526:	eba0 000a 	sub.w	r0, r0, sl
 800152a:	2240      	movs	r2, #64	; 0x40
 800152c:	4082      	lsls	r2, r0
 800152e:	4313      	orrs	r3, r2
 8001530:	3401      	adds	r4, #1
 8001532:	9304      	str	r3, [sp, #16]
 8001534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001538:	4825      	ldr	r0, [pc, #148]	; (80015d0 <_svfiprintf_r+0x1ec>)
 800153a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800153e:	2206      	movs	r2, #6
 8001540:	f7fe fe5e 	bl	8000200 <memchr>
 8001544:	2800      	cmp	r0, #0
 8001546:	d038      	beq.n	80015ba <_svfiprintf_r+0x1d6>
 8001548:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <_svfiprintf_r+0x1f0>)
 800154a:	bb1b      	cbnz	r3, 8001594 <_svfiprintf_r+0x1b0>
 800154c:	9b03      	ldr	r3, [sp, #12]
 800154e:	3307      	adds	r3, #7
 8001550:	f023 0307 	bic.w	r3, r3, #7
 8001554:	3308      	adds	r3, #8
 8001556:	9303      	str	r3, [sp, #12]
 8001558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800155a:	4433      	add	r3, r6
 800155c:	9309      	str	r3, [sp, #36]	; 0x24
 800155e:	e768      	b.n	8001432 <_svfiprintf_r+0x4e>
 8001560:	fb0c 3202 	mla	r2, ip, r2, r3
 8001564:	460c      	mov	r4, r1
 8001566:	2001      	movs	r0, #1
 8001568:	e7a6      	b.n	80014b8 <_svfiprintf_r+0xd4>
 800156a:	2300      	movs	r3, #0
 800156c:	3401      	adds	r4, #1
 800156e:	9305      	str	r3, [sp, #20]
 8001570:	4619      	mov	r1, r3
 8001572:	f04f 0c0a 	mov.w	ip, #10
 8001576:	4620      	mov	r0, r4
 8001578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800157c:	3a30      	subs	r2, #48	; 0x30
 800157e:	2a09      	cmp	r2, #9
 8001580:	d903      	bls.n	800158a <_svfiprintf_r+0x1a6>
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0c6      	beq.n	8001514 <_svfiprintf_r+0x130>
 8001586:	9105      	str	r1, [sp, #20]
 8001588:	e7c4      	b.n	8001514 <_svfiprintf_r+0x130>
 800158a:	fb0c 2101 	mla	r1, ip, r1, r2
 800158e:	4604      	mov	r4, r0
 8001590:	2301      	movs	r3, #1
 8001592:	e7f0      	b.n	8001576 <_svfiprintf_r+0x192>
 8001594:	ab03      	add	r3, sp, #12
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	462a      	mov	r2, r5
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <_svfiprintf_r+0x1f4>)
 800159c:	a904      	add	r1, sp, #16
 800159e:	4638      	mov	r0, r7
 80015a0:	f3af 8000 	nop.w
 80015a4:	1c42      	adds	r2, r0, #1
 80015a6:	4606      	mov	r6, r0
 80015a8:	d1d6      	bne.n	8001558 <_svfiprintf_r+0x174>
 80015aa:	89ab      	ldrh	r3, [r5, #12]
 80015ac:	065b      	lsls	r3, r3, #25
 80015ae:	f53f af2d 	bmi.w	800140c <_svfiprintf_r+0x28>
 80015b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80015b4:	b01d      	add	sp, #116	; 0x74
 80015b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015ba:	ab03      	add	r3, sp, #12
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	462a      	mov	r2, r5
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <_svfiprintf_r+0x1f4>)
 80015c2:	a904      	add	r1, sp, #16
 80015c4:	4638      	mov	r0, r7
 80015c6:	f000 f879 	bl	80016bc <_printf_i>
 80015ca:	e7eb      	b.n	80015a4 <_svfiprintf_r+0x1c0>
 80015cc:	08001bb2 	.word	0x08001bb2
 80015d0:	08001bbc 	.word	0x08001bbc
 80015d4:	00000000 	.word	0x00000000
 80015d8:	08001331 	.word	0x08001331
 80015dc:	08001bb8 	.word	0x08001bb8

080015e0 <_printf_common>:
 80015e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015e4:	4616      	mov	r6, r2
 80015e6:	4699      	mov	r9, r3
 80015e8:	688a      	ldr	r2, [r1, #8]
 80015ea:	690b      	ldr	r3, [r1, #16]
 80015ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80015f0:	4293      	cmp	r3, r2
 80015f2:	bfb8      	it	lt
 80015f4:	4613      	movlt	r3, r2
 80015f6:	6033      	str	r3, [r6, #0]
 80015f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80015fc:	4607      	mov	r7, r0
 80015fe:	460c      	mov	r4, r1
 8001600:	b10a      	cbz	r2, 8001606 <_printf_common+0x26>
 8001602:	3301      	adds	r3, #1
 8001604:	6033      	str	r3, [r6, #0]
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	0699      	lsls	r1, r3, #26
 800160a:	bf42      	ittt	mi
 800160c:	6833      	ldrmi	r3, [r6, #0]
 800160e:	3302      	addmi	r3, #2
 8001610:	6033      	strmi	r3, [r6, #0]
 8001612:	6825      	ldr	r5, [r4, #0]
 8001614:	f015 0506 	ands.w	r5, r5, #6
 8001618:	d106      	bne.n	8001628 <_printf_common+0x48>
 800161a:	f104 0a19 	add.w	sl, r4, #25
 800161e:	68e3      	ldr	r3, [r4, #12]
 8001620:	6832      	ldr	r2, [r6, #0]
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	42ab      	cmp	r3, r5
 8001626:	dc26      	bgt.n	8001676 <_printf_common+0x96>
 8001628:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800162c:	1e13      	subs	r3, r2, #0
 800162e:	6822      	ldr	r2, [r4, #0]
 8001630:	bf18      	it	ne
 8001632:	2301      	movne	r3, #1
 8001634:	0692      	lsls	r2, r2, #26
 8001636:	d42b      	bmi.n	8001690 <_printf_common+0xb0>
 8001638:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800163c:	4649      	mov	r1, r9
 800163e:	4638      	mov	r0, r7
 8001640:	47c0      	blx	r8
 8001642:	3001      	adds	r0, #1
 8001644:	d01e      	beq.n	8001684 <_printf_common+0xa4>
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	6922      	ldr	r2, [r4, #16]
 800164a:	f003 0306 	and.w	r3, r3, #6
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf02      	ittt	eq
 8001652:	68e5      	ldreq	r5, [r4, #12]
 8001654:	6833      	ldreq	r3, [r6, #0]
 8001656:	1aed      	subeq	r5, r5, r3
 8001658:	68a3      	ldr	r3, [r4, #8]
 800165a:	bf0c      	ite	eq
 800165c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001660:	2500      	movne	r5, #0
 8001662:	4293      	cmp	r3, r2
 8001664:	bfc4      	itt	gt
 8001666:	1a9b      	subgt	r3, r3, r2
 8001668:	18ed      	addgt	r5, r5, r3
 800166a:	2600      	movs	r6, #0
 800166c:	341a      	adds	r4, #26
 800166e:	42b5      	cmp	r5, r6
 8001670:	d11a      	bne.n	80016a8 <_printf_common+0xc8>
 8001672:	2000      	movs	r0, #0
 8001674:	e008      	b.n	8001688 <_printf_common+0xa8>
 8001676:	2301      	movs	r3, #1
 8001678:	4652      	mov	r2, sl
 800167a:	4649      	mov	r1, r9
 800167c:	4638      	mov	r0, r7
 800167e:	47c0      	blx	r8
 8001680:	3001      	adds	r0, #1
 8001682:	d103      	bne.n	800168c <_printf_common+0xac>
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800168c:	3501      	adds	r5, #1
 800168e:	e7c6      	b.n	800161e <_printf_common+0x3e>
 8001690:	18e1      	adds	r1, r4, r3
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	2030      	movs	r0, #48	; 0x30
 8001696:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800169a:	4422      	add	r2, r4
 800169c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80016a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80016a4:	3302      	adds	r3, #2
 80016a6:	e7c7      	b.n	8001638 <_printf_common+0x58>
 80016a8:	2301      	movs	r3, #1
 80016aa:	4622      	mov	r2, r4
 80016ac:	4649      	mov	r1, r9
 80016ae:	4638      	mov	r0, r7
 80016b0:	47c0      	blx	r8
 80016b2:	3001      	adds	r0, #1
 80016b4:	d0e6      	beq.n	8001684 <_printf_common+0xa4>
 80016b6:	3601      	adds	r6, #1
 80016b8:	e7d9      	b.n	800166e <_printf_common+0x8e>
	...

080016bc <_printf_i>:
 80016bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80016c0:	7e0f      	ldrb	r7, [r1, #24]
 80016c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80016c4:	2f78      	cmp	r7, #120	; 0x78
 80016c6:	4691      	mov	r9, r2
 80016c8:	4680      	mov	r8, r0
 80016ca:	460c      	mov	r4, r1
 80016cc:	469a      	mov	sl, r3
 80016ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80016d2:	d807      	bhi.n	80016e4 <_printf_i+0x28>
 80016d4:	2f62      	cmp	r7, #98	; 0x62
 80016d6:	d80a      	bhi.n	80016ee <_printf_i+0x32>
 80016d8:	2f00      	cmp	r7, #0
 80016da:	f000 80d4 	beq.w	8001886 <_printf_i+0x1ca>
 80016de:	2f58      	cmp	r7, #88	; 0x58
 80016e0:	f000 80c0 	beq.w	8001864 <_printf_i+0x1a8>
 80016e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80016e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80016ec:	e03a      	b.n	8001764 <_printf_i+0xa8>
 80016ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80016f2:	2b15      	cmp	r3, #21
 80016f4:	d8f6      	bhi.n	80016e4 <_printf_i+0x28>
 80016f6:	a101      	add	r1, pc, #4	; (adr r1, 80016fc <_printf_i+0x40>)
 80016f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80016fc:	08001755 	.word	0x08001755
 8001700:	08001769 	.word	0x08001769
 8001704:	080016e5 	.word	0x080016e5
 8001708:	080016e5 	.word	0x080016e5
 800170c:	080016e5 	.word	0x080016e5
 8001710:	080016e5 	.word	0x080016e5
 8001714:	08001769 	.word	0x08001769
 8001718:	080016e5 	.word	0x080016e5
 800171c:	080016e5 	.word	0x080016e5
 8001720:	080016e5 	.word	0x080016e5
 8001724:	080016e5 	.word	0x080016e5
 8001728:	0800186d 	.word	0x0800186d
 800172c:	08001795 	.word	0x08001795
 8001730:	08001827 	.word	0x08001827
 8001734:	080016e5 	.word	0x080016e5
 8001738:	080016e5 	.word	0x080016e5
 800173c:	0800188f 	.word	0x0800188f
 8001740:	080016e5 	.word	0x080016e5
 8001744:	08001795 	.word	0x08001795
 8001748:	080016e5 	.word	0x080016e5
 800174c:	080016e5 	.word	0x080016e5
 8001750:	0800182f 	.word	0x0800182f
 8001754:	682b      	ldr	r3, [r5, #0]
 8001756:	1d1a      	adds	r2, r3, #4
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	602a      	str	r2, [r5, #0]
 800175c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001760:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001764:	2301      	movs	r3, #1
 8001766:	e09f      	b.n	80018a8 <_printf_i+0x1ec>
 8001768:	6820      	ldr	r0, [r4, #0]
 800176a:	682b      	ldr	r3, [r5, #0]
 800176c:	0607      	lsls	r7, r0, #24
 800176e:	f103 0104 	add.w	r1, r3, #4
 8001772:	6029      	str	r1, [r5, #0]
 8001774:	d501      	bpl.n	800177a <_printf_i+0xbe>
 8001776:	681e      	ldr	r6, [r3, #0]
 8001778:	e003      	b.n	8001782 <_printf_i+0xc6>
 800177a:	0646      	lsls	r6, r0, #25
 800177c:	d5fb      	bpl.n	8001776 <_printf_i+0xba>
 800177e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001782:	2e00      	cmp	r6, #0
 8001784:	da03      	bge.n	800178e <_printf_i+0xd2>
 8001786:	232d      	movs	r3, #45	; 0x2d
 8001788:	4276      	negs	r6, r6
 800178a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800178e:	485a      	ldr	r0, [pc, #360]	; (80018f8 <_printf_i+0x23c>)
 8001790:	230a      	movs	r3, #10
 8001792:	e012      	b.n	80017ba <_printf_i+0xfe>
 8001794:	682b      	ldr	r3, [r5, #0]
 8001796:	6820      	ldr	r0, [r4, #0]
 8001798:	1d19      	adds	r1, r3, #4
 800179a:	6029      	str	r1, [r5, #0]
 800179c:	0605      	lsls	r5, r0, #24
 800179e:	d501      	bpl.n	80017a4 <_printf_i+0xe8>
 80017a0:	681e      	ldr	r6, [r3, #0]
 80017a2:	e002      	b.n	80017aa <_printf_i+0xee>
 80017a4:	0641      	lsls	r1, r0, #25
 80017a6:	d5fb      	bpl.n	80017a0 <_printf_i+0xe4>
 80017a8:	881e      	ldrh	r6, [r3, #0]
 80017aa:	4853      	ldr	r0, [pc, #332]	; (80018f8 <_printf_i+0x23c>)
 80017ac:	2f6f      	cmp	r7, #111	; 0x6f
 80017ae:	bf0c      	ite	eq
 80017b0:	2308      	moveq	r3, #8
 80017b2:	230a      	movne	r3, #10
 80017b4:	2100      	movs	r1, #0
 80017b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80017ba:	6865      	ldr	r5, [r4, #4]
 80017bc:	60a5      	str	r5, [r4, #8]
 80017be:	2d00      	cmp	r5, #0
 80017c0:	bfa2      	ittt	ge
 80017c2:	6821      	ldrge	r1, [r4, #0]
 80017c4:	f021 0104 	bicge.w	r1, r1, #4
 80017c8:	6021      	strge	r1, [r4, #0]
 80017ca:	b90e      	cbnz	r6, 80017d0 <_printf_i+0x114>
 80017cc:	2d00      	cmp	r5, #0
 80017ce:	d04b      	beq.n	8001868 <_printf_i+0x1ac>
 80017d0:	4615      	mov	r5, r2
 80017d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80017d6:	fb03 6711 	mls	r7, r3, r1, r6
 80017da:	5dc7      	ldrb	r7, [r0, r7]
 80017dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80017e0:	4637      	mov	r7, r6
 80017e2:	42bb      	cmp	r3, r7
 80017e4:	460e      	mov	r6, r1
 80017e6:	d9f4      	bls.n	80017d2 <_printf_i+0x116>
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d10b      	bne.n	8001804 <_printf_i+0x148>
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	07de      	lsls	r6, r3, #31
 80017f0:	d508      	bpl.n	8001804 <_printf_i+0x148>
 80017f2:	6923      	ldr	r3, [r4, #16]
 80017f4:	6861      	ldr	r1, [r4, #4]
 80017f6:	4299      	cmp	r1, r3
 80017f8:	bfde      	ittt	le
 80017fa:	2330      	movle	r3, #48	; 0x30
 80017fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001800:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001804:	1b52      	subs	r2, r2, r5
 8001806:	6122      	str	r2, [r4, #16]
 8001808:	f8cd a000 	str.w	sl, [sp]
 800180c:	464b      	mov	r3, r9
 800180e:	aa03      	add	r2, sp, #12
 8001810:	4621      	mov	r1, r4
 8001812:	4640      	mov	r0, r8
 8001814:	f7ff fee4 	bl	80015e0 <_printf_common>
 8001818:	3001      	adds	r0, #1
 800181a:	d14a      	bne.n	80018b2 <_printf_i+0x1f6>
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	b004      	add	sp, #16
 8001822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	f043 0320 	orr.w	r3, r3, #32
 800182c:	6023      	str	r3, [r4, #0]
 800182e:	4833      	ldr	r0, [pc, #204]	; (80018fc <_printf_i+0x240>)
 8001830:	2778      	movs	r7, #120	; 0x78
 8001832:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001836:	6823      	ldr	r3, [r4, #0]
 8001838:	6829      	ldr	r1, [r5, #0]
 800183a:	061f      	lsls	r7, r3, #24
 800183c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001840:	d402      	bmi.n	8001848 <_printf_i+0x18c>
 8001842:	065f      	lsls	r7, r3, #25
 8001844:	bf48      	it	mi
 8001846:	b2b6      	uxthmi	r6, r6
 8001848:	07df      	lsls	r7, r3, #31
 800184a:	bf48      	it	mi
 800184c:	f043 0320 	orrmi.w	r3, r3, #32
 8001850:	6029      	str	r1, [r5, #0]
 8001852:	bf48      	it	mi
 8001854:	6023      	strmi	r3, [r4, #0]
 8001856:	b91e      	cbnz	r6, 8001860 <_printf_i+0x1a4>
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	f023 0320 	bic.w	r3, r3, #32
 800185e:	6023      	str	r3, [r4, #0]
 8001860:	2310      	movs	r3, #16
 8001862:	e7a7      	b.n	80017b4 <_printf_i+0xf8>
 8001864:	4824      	ldr	r0, [pc, #144]	; (80018f8 <_printf_i+0x23c>)
 8001866:	e7e4      	b.n	8001832 <_printf_i+0x176>
 8001868:	4615      	mov	r5, r2
 800186a:	e7bd      	b.n	80017e8 <_printf_i+0x12c>
 800186c:	682b      	ldr	r3, [r5, #0]
 800186e:	6826      	ldr	r6, [r4, #0]
 8001870:	6961      	ldr	r1, [r4, #20]
 8001872:	1d18      	adds	r0, r3, #4
 8001874:	6028      	str	r0, [r5, #0]
 8001876:	0635      	lsls	r5, r6, #24
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	d501      	bpl.n	8001880 <_printf_i+0x1c4>
 800187c:	6019      	str	r1, [r3, #0]
 800187e:	e002      	b.n	8001886 <_printf_i+0x1ca>
 8001880:	0670      	lsls	r0, r6, #25
 8001882:	d5fb      	bpl.n	800187c <_printf_i+0x1c0>
 8001884:	8019      	strh	r1, [r3, #0]
 8001886:	2300      	movs	r3, #0
 8001888:	6123      	str	r3, [r4, #16]
 800188a:	4615      	mov	r5, r2
 800188c:	e7bc      	b.n	8001808 <_printf_i+0x14c>
 800188e:	682b      	ldr	r3, [r5, #0]
 8001890:	1d1a      	adds	r2, r3, #4
 8001892:	602a      	str	r2, [r5, #0]
 8001894:	681d      	ldr	r5, [r3, #0]
 8001896:	6862      	ldr	r2, [r4, #4]
 8001898:	2100      	movs	r1, #0
 800189a:	4628      	mov	r0, r5
 800189c:	f7fe fcb0 	bl	8000200 <memchr>
 80018a0:	b108      	cbz	r0, 80018a6 <_printf_i+0x1ea>
 80018a2:	1b40      	subs	r0, r0, r5
 80018a4:	6060      	str	r0, [r4, #4]
 80018a6:	6863      	ldr	r3, [r4, #4]
 80018a8:	6123      	str	r3, [r4, #16]
 80018aa:	2300      	movs	r3, #0
 80018ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018b0:	e7aa      	b.n	8001808 <_printf_i+0x14c>
 80018b2:	6923      	ldr	r3, [r4, #16]
 80018b4:	462a      	mov	r2, r5
 80018b6:	4649      	mov	r1, r9
 80018b8:	4640      	mov	r0, r8
 80018ba:	47d0      	blx	sl
 80018bc:	3001      	adds	r0, #1
 80018be:	d0ad      	beq.n	800181c <_printf_i+0x160>
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	079b      	lsls	r3, r3, #30
 80018c4:	d413      	bmi.n	80018ee <_printf_i+0x232>
 80018c6:	68e0      	ldr	r0, [r4, #12]
 80018c8:	9b03      	ldr	r3, [sp, #12]
 80018ca:	4298      	cmp	r0, r3
 80018cc:	bfb8      	it	lt
 80018ce:	4618      	movlt	r0, r3
 80018d0:	e7a6      	b.n	8001820 <_printf_i+0x164>
 80018d2:	2301      	movs	r3, #1
 80018d4:	4632      	mov	r2, r6
 80018d6:	4649      	mov	r1, r9
 80018d8:	4640      	mov	r0, r8
 80018da:	47d0      	blx	sl
 80018dc:	3001      	adds	r0, #1
 80018de:	d09d      	beq.n	800181c <_printf_i+0x160>
 80018e0:	3501      	adds	r5, #1
 80018e2:	68e3      	ldr	r3, [r4, #12]
 80018e4:	9903      	ldr	r1, [sp, #12]
 80018e6:	1a5b      	subs	r3, r3, r1
 80018e8:	42ab      	cmp	r3, r5
 80018ea:	dcf2      	bgt.n	80018d2 <_printf_i+0x216>
 80018ec:	e7eb      	b.n	80018c6 <_printf_i+0x20a>
 80018ee:	2500      	movs	r5, #0
 80018f0:	f104 0619 	add.w	r6, r4, #25
 80018f4:	e7f5      	b.n	80018e2 <_printf_i+0x226>
 80018f6:	bf00      	nop
 80018f8:	08001bc3 	.word	0x08001bc3
 80018fc:	08001bd4 	.word	0x08001bd4

08001900 <memmove>:
 8001900:	4288      	cmp	r0, r1
 8001902:	b510      	push	{r4, lr}
 8001904:	eb01 0402 	add.w	r4, r1, r2
 8001908:	d902      	bls.n	8001910 <memmove+0x10>
 800190a:	4284      	cmp	r4, r0
 800190c:	4623      	mov	r3, r4
 800190e:	d807      	bhi.n	8001920 <memmove+0x20>
 8001910:	1e43      	subs	r3, r0, #1
 8001912:	42a1      	cmp	r1, r4
 8001914:	d008      	beq.n	8001928 <memmove+0x28>
 8001916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800191a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800191e:	e7f8      	b.n	8001912 <memmove+0x12>
 8001920:	4402      	add	r2, r0
 8001922:	4601      	mov	r1, r0
 8001924:	428a      	cmp	r2, r1
 8001926:	d100      	bne.n	800192a <memmove+0x2a>
 8001928:	bd10      	pop	{r4, pc}
 800192a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800192e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001932:	e7f7      	b.n	8001924 <memmove+0x24>

08001934 <_sbrk_r>:
 8001934:	b538      	push	{r3, r4, r5, lr}
 8001936:	4d06      	ldr	r5, [pc, #24]	; (8001950 <_sbrk_r+0x1c>)
 8001938:	2300      	movs	r3, #0
 800193a:	4604      	mov	r4, r0
 800193c:	4608      	mov	r0, r1
 800193e:	602b      	str	r3, [r5, #0]
 8001940:	f7ff fa8c 	bl	8000e5c <_sbrk>
 8001944:	1c43      	adds	r3, r0, #1
 8001946:	d102      	bne.n	800194e <_sbrk_r+0x1a>
 8001948:	682b      	ldr	r3, [r5, #0]
 800194a:	b103      	cbz	r3, 800194e <_sbrk_r+0x1a>
 800194c:	6023      	str	r3, [r4, #0]
 800194e:	bd38      	pop	{r3, r4, r5, pc}
 8001950:	20007e04 	.word	0x20007e04

08001954 <memcpy>:
 8001954:	440a      	add	r2, r1
 8001956:	4291      	cmp	r1, r2
 8001958:	f100 33ff 	add.w	r3, r0, #4294967295
 800195c:	d100      	bne.n	8001960 <memcpy+0xc>
 800195e:	4770      	bx	lr
 8001960:	b510      	push	{r4, lr}
 8001962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800196a:	4291      	cmp	r1, r2
 800196c:	d1f9      	bne.n	8001962 <memcpy+0xe>
 800196e:	bd10      	pop	{r4, pc}

08001970 <_realloc_r>:
 8001970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001974:	4680      	mov	r8, r0
 8001976:	4614      	mov	r4, r2
 8001978:	460e      	mov	r6, r1
 800197a:	b921      	cbnz	r1, 8001986 <_realloc_r+0x16>
 800197c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001980:	4611      	mov	r1, r2
 8001982:	f7ff bc49 	b.w	8001218 <_malloc_r>
 8001986:	b92a      	cbnz	r2, 8001994 <_realloc_r+0x24>
 8001988:	f7ff fbda 	bl	8001140 <_free_r>
 800198c:	4625      	mov	r5, r4
 800198e:	4628      	mov	r0, r5
 8001990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001994:	f000 f81b 	bl	80019ce <_malloc_usable_size_r>
 8001998:	4284      	cmp	r4, r0
 800199a:	4607      	mov	r7, r0
 800199c:	d802      	bhi.n	80019a4 <_realloc_r+0x34>
 800199e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80019a2:	d812      	bhi.n	80019ca <_realloc_r+0x5a>
 80019a4:	4621      	mov	r1, r4
 80019a6:	4640      	mov	r0, r8
 80019a8:	f7ff fc36 	bl	8001218 <_malloc_r>
 80019ac:	4605      	mov	r5, r0
 80019ae:	2800      	cmp	r0, #0
 80019b0:	d0ed      	beq.n	800198e <_realloc_r+0x1e>
 80019b2:	42bc      	cmp	r4, r7
 80019b4:	4622      	mov	r2, r4
 80019b6:	4631      	mov	r1, r6
 80019b8:	bf28      	it	cs
 80019ba:	463a      	movcs	r2, r7
 80019bc:	f7ff ffca 	bl	8001954 <memcpy>
 80019c0:	4631      	mov	r1, r6
 80019c2:	4640      	mov	r0, r8
 80019c4:	f7ff fbbc 	bl	8001140 <_free_r>
 80019c8:	e7e1      	b.n	800198e <_realloc_r+0x1e>
 80019ca:	4635      	mov	r5, r6
 80019cc:	e7df      	b.n	800198e <_realloc_r+0x1e>

080019ce <_malloc_usable_size_r>:
 80019ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019d2:	1f18      	subs	r0, r3, #4
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bfbc      	itt	lt
 80019d8:	580b      	ldrlt	r3, [r1, r0]
 80019da:	18c0      	addlt	r0, r0, r3
 80019dc:	4770      	bx	lr
	...

080019e0 <_init>:
 80019e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e2:	bf00      	nop
 80019e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019e6:	bc08      	pop	{r3}
 80019e8:	469e      	mov	lr, r3
 80019ea:	4770      	bx	lr

080019ec <_fini>:
 80019ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ee:	bf00      	nop
 80019f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019f2:	bc08      	pop	{r3}
 80019f4:	469e      	mov	lr, r3
 80019f6:	4770      	bx	lr
