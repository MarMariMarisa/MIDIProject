
swn-340 projjj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000aa8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c30  08000c38  00010c38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c30  08000c30  00010c38  2**0
                  CONTENTS
  4 .ARM          00000000  08000c30  08000c30  00010c38  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c30  08000c38  00010c38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c30  08000c30  00010c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c34  08000c34  00010c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000c38  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000c38  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010c38  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010c68  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002299  00000000  00000000  00010cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009f4  00000000  00000000  00012f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00013938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000014b  00000000  00000000  00013b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c12  00000000  00000000  00013c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000044c1  00000000  00000000  00039885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4c01  00000000  00000000  0003dd46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000050c  00000000  00000000  00132948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00132e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000c18 	.word	0x08000c18

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000c18 	.word	0x08000c18

080001c8 <SysTick_Handler>:
void Error_Handler () {
	// Add error handler here if desired
}

// Systic interrupt handler
void SysTick_Handler() {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	static uint32_t counter = 0; // that counts up to 1000
	counter++;
 80001cc:	4b0a      	ldr	r3, [pc, #40]	; (80001f8 <SysTick_Handler+0x30>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	3301      	adds	r3, #1
 80001d2:	4a09      	ldr	r2, [pc, #36]	; (80001f8 <SysTick_Handler+0x30>)
 80001d4:	6013      	str	r3, [r2, #0]
	if (counter == 1000) {
 80001d6:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <SysTick_Handler+0x30>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001de:	d105      	bne.n	80001ec <SysTick_Handler+0x24>
		one_second_elapsed = TRUE;
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <SysTick_Handler+0x34>)
 80001e2:	2201      	movs	r2, #1
 80001e4:	701a      	strb	r2, [r3, #0]
		counter = 0;
 80001e6:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <SysTick_Handler+0x30>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
	}
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	20000020 	.word	0x20000020
 80001fc:	2000001c 	.word	0x2000001c

08000200 <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b08a      	sub	sp, #40	; 0x28
 8000204:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000206:	f107 0314 	add.w	r3, r7, #20
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000216:	4b28      	ldr	r3, [pc, #160]	; (80002b8 <GPIO_Init+0xb8>)
 8000218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021a:	4a27      	ldr	r2, [pc, #156]	; (80002b8 <GPIO_Init+0xb8>)
 800021c:	f043 0304 	orr.w	r3, r3, #4
 8000220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000222:	4b25      	ldr	r3, [pc, #148]	; (80002b8 <GPIO_Init+0xb8>)
 8000224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000226:	f003 0304 	and.w	r3, r3, #4
 800022a:	613b      	str	r3, [r7, #16]
 800022c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800022e:	4b22      	ldr	r3, [pc, #136]	; (80002b8 <GPIO_Init+0xb8>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000232:	4a21      	ldr	r2, [pc, #132]	; (80002b8 <GPIO_Init+0xb8>)
 8000234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800023a:	4b1f      	ldr	r3, [pc, #124]	; (80002b8 <GPIO_Init+0xb8>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000242:	60fb      	str	r3, [r7, #12]
 8000244:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000246:	4b1c      	ldr	r3, [pc, #112]	; (80002b8 <GPIO_Init+0xb8>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800024a:	4a1b      	ldr	r2, [pc, #108]	; (80002b8 <GPIO_Init+0xb8>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000252:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <GPIO_Init+0xb8>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000256:	f003 0301 	and.w	r3, r3, #1
 800025a:	60bb      	str	r3, [r7, #8]
 800025c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800025e:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <GPIO_Init+0xb8>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000262:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <GPIO_Init+0xb8>)
 8000264:	f043 0302 	orr.w	r3, r3, #2
 8000268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800026a:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <GPIO_Init+0xb8>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800026e:	f003 0302 	and.w	r3, r3, #2
 8000272:	607b      	str	r3, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800027a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800027c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000280:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000282:	2300      	movs	r3, #0
 8000284:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	4619      	mov	r1, r3
 800028c:	480b      	ldr	r0, [pc, #44]	; (80002bc <GPIO_Init+0xbc>)
 800028e:	f000 faf5 	bl	800087c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = S1_Pin;
 8000292:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000296:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000298:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800029c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800029e:	2302      	movs	r3, #2
 80002a0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 80002a2:	f107 0314 	add.w	r3, r7, #20
 80002a6:	4619      	mov	r1, r3
 80002a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ac:	f000 fae6 	bl	800087c <HAL_GPIO_Init>


	/* EXTI9_5_IRQn interrupt init*/
	// Note you will have to add EXTI9_15_IRQn Interrupt handler function as well
	// This is the interrupt handler for the external buttons (S1)
}
 80002b0:	bf00      	nop
 80002b2:	3728      	adds	r7, #40	; 0x28
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	40021000 	.word	0x40021000
 80002bc:	48000800 	.word	0x48000800

080002c0 <LED_Init>:

//******************************************************************************************
// User pin = LD2 Green pin = PA.5
//******************************************************************************************

void LED_Init(uint8_t pin){
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 80002ca:	4b2b      	ldr	r3, [pc, #172]	; (8000378 <LED_Init+0xb8>)
 80002cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ce:	4a2a      	ldr	r2, [pc, #168]	; (8000378 <LED_Init+0xb8>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));
 80002d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	2103      	movs	r1, #3
 80002e2:	fa01 f303 	lsl.w	r3, r1, r3
 80002e6:	43db      	mvns	r3, r3
 80002e8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80002ec:	4013      	ands	r3, r2
 80002ee:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 80002f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	2101      	movs	r1, #1
 80002fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000300:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000304:	4313      	orrs	r3, r2
 8000306:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 8000308:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800030c:	689a      	ldr	r2, [r3, #8]
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	2103      	movs	r1, #3
 8000314:	fa01 f303 	lsl.w	r3, r1, r3
 8000318:	43db      	mvns	r3, r3
 800031a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800031e:	4013      	ands	r3, r2
 8000320:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 8000322:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000326:	689a      	ldr	r2, [r3, #8]
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	2103      	movs	r1, #3
 800032e:	fa01 f303 	lsl.w	r3, r1, r3
 8000332:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000336:	4313      	orrs	r3, r2
 8000338:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 800033a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800033e:	685a      	ldr	r2, [r3, #4]
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	2101      	movs	r1, #1
 8000344:	fa01 f303 	lsl.w	r3, r1, r3
 8000348:	43db      	mvns	r3, r3
 800034a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800034e:	4013      	ands	r3, r2
 8000350:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 8000352:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000356:	68da      	ldr	r2, [r3, #12]
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	2103      	movs	r1, #3
 800035e:	fa01 f303 	lsl.w	r3, r1, r3
 8000362:	43db      	mvns	r3, r3
 8000364:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000368:	4013      	ands	r3, r2
 800036a:	60cb      	str	r3, [r1, #12]
	
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	40021000 	.word	0x40021000

0800037c <LED_On>:

//******************************************************************************************
// Turn pin On
//******************************************************************************************
void LED_On(uint8_t pin){
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR |= (1UL<<pin);
 8000386:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800038a:	695a      	ldr	r2, [r3, #20]
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	2101      	movs	r1, #1
 8000390:	fa01 f303 	lsl.w	r3, r1, r3
 8000394:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000398:	4313      	orrs	r3, r2
 800039a:	614b      	str	r3, [r1, #20]
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <LED_Off>:

//******************************************************************************************
// Turn pin Off
//******************************************************************************************
void LED_Off(uint8_t pin){
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR &= ~(1UL<<pin);
 80003b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b6:	695a      	ldr	r2, [r3, #20]
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	2101      	movs	r1, #1
 80003bc:	fa01 f303 	lsl.w	r3, r1, r3
 80003c0:	43db      	mvns	r3, r3
 80003c2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003c6:	4013      	ands	r3, r2
 80003c8:	614b      	str	r3, [r1, #20]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
	...

080003d8 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80003de:	4b6b      	ldr	r3, [pc, #428]	; (800058c <System_Clock_Init+0x1b4>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a6a      	ldr	r2, [pc, #424]	; (800058c <System_Clock_Init+0x1b4>)
 80003e4:	f023 0307 	bic.w	r3, r3, #7
 80003e8:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80003ea:	4b68      	ldr	r3, [pc, #416]	; (800058c <System_Clock_Init+0x1b4>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a67      	ldr	r2, [pc, #412]	; (800058c <System_Clock_Init+0x1b4>)
 80003f0:	f043 0302 	orr.w	r3, r3, #2
 80003f4:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 80003f6:	4b66      	ldr	r3, [pc, #408]	; (8000590 <System_Clock_Init+0x1b8>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a65      	ldr	r2, [pc, #404]	; (8000590 <System_Clock_Init+0x1b8>)
 80003fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000400:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 8000402:	bf00      	nop
 8000404:	4b62      	ldr	r3, [pc, #392]	; (8000590 <System_Clock_Init+0x1b8>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800040c:	2b00      	cmp	r3, #0
 800040e:	d0f9      	beq.n	8000404 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 8000410:	2310      	movs	r3, #16
 8000412:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 8000414:	4b5e      	ldr	r3, [pc, #376]	; (8000590 <System_Clock_Init+0x1b8>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	4a5d      	ldr	r2, [pc, #372]	; (8000590 <System_Clock_Init+0x1b8>)
 800041a:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800041e:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000420:	4b5b      	ldr	r3, [pc, #364]	; (8000590 <System_Clock_Init+0x1b8>)
 8000422:	685a      	ldr	r2, [r3, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	061b      	lsls	r3, r3, #24
 8000428:	4959      	ldr	r1, [pc, #356]	; (8000590 <System_Clock_Init+0x1b8>)
 800042a:	4313      	orrs	r3, r2
 800042c:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 800042e:	4b58      	ldr	r3, [pc, #352]	; (8000590 <System_Clock_Init+0x1b8>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a57      	ldr	r2, [pc, #348]	; (8000590 <System_Clock_Init+0x1b8>)
 8000434:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000438:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 800043a:	bf00      	nop
 800043c:	4b54      	ldr	r3, [pc, #336]	; (8000590 <System_Clock_Init+0x1b8>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000444:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000448:	d0f8      	beq.n	800043c <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 800044a:	4b51      	ldr	r3, [pc, #324]	; (8000590 <System_Clock_Init+0x1b8>)
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	4a50      	ldr	r2, [pc, #320]	; (8000590 <System_Clock_Init+0x1b8>)
 8000450:	f023 0303 	bic.w	r3, r3, #3
 8000454:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 8000456:	4b4e      	ldr	r3, [pc, #312]	; (8000590 <System_Clock_Init+0x1b8>)
 8000458:	68db      	ldr	r3, [r3, #12]
 800045a:	4a4d      	ldr	r2, [pc, #308]	; (8000590 <System_Clock_Init+0x1b8>)
 800045c:	f043 0302 	orr.w	r3, r3, #2
 8000460:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 8000462:	4b4b      	ldr	r3, [pc, #300]	; (8000590 <System_Clock_Init+0x1b8>)
 8000464:	68db      	ldr	r3, [r3, #12]
 8000466:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800046a:	4a49      	ldr	r2, [pc, #292]	; (8000590 <System_Clock_Init+0x1b8>)
 800046c:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000470:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 8000472:	4b47      	ldr	r3, [pc, #284]	; (8000590 <System_Clock_Init+0x1b8>)
 8000474:	68db      	ldr	r3, [r3, #12]
 8000476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800047a:	4a45      	ldr	r2, [pc, #276]	; (8000590 <System_Clock_Init+0x1b8>)
 800047c:	f043 0310 	orr.w	r3, r3, #16
 8000480:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 8000482:	4b43      	ldr	r3, [pc, #268]	; (8000590 <System_Clock_Init+0x1b8>)
 8000484:	68db      	ldr	r3, [r3, #12]
 8000486:	4a42      	ldr	r2, [pc, #264]	; (8000590 <System_Clock_Init+0x1b8>)
 8000488:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800048c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 800048e:	4b40      	ldr	r3, [pc, #256]	; (8000590 <System_Clock_Init+0x1b8>)
 8000490:	68db      	ldr	r3, [r3, #12]
 8000492:	4a3f      	ldr	r2, [pc, #252]	; (8000590 <System_Clock_Init+0x1b8>)
 8000494:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000498:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 800049a:	4b3d      	ldr	r3, [pc, #244]	; (8000590 <System_Clock_Init+0x1b8>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a3c      	ldr	r2, [pc, #240]	; (8000590 <System_Clock_Init+0x1b8>)
 80004a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004a4:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 80004a6:	bf00      	nop
 80004a8:	4b39      	ldr	r3, [pc, #228]	; (8000590 <System_Clock_Init+0x1b8>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d0f9      	beq.n	80004a8 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 80004b4:	4b36      	ldr	r3, [pc, #216]	; (8000590 <System_Clock_Init+0x1b8>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	4a35      	ldr	r2, [pc, #212]	; (8000590 <System_Clock_Init+0x1b8>)
 80004ba:	f023 0303 	bic.w	r3, r3, #3
 80004be:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 80004c0:	4b33      	ldr	r3, [pc, #204]	; (8000590 <System_Clock_Init+0x1b8>)
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	4a32      	ldr	r2, [pc, #200]	; (8000590 <System_Clock_Init+0x1b8>)
 80004c6:	f043 0303 	orr.w	r3, r3, #3
 80004ca:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80004cc:	bf00      	nop
 80004ce:	4b30      	ldr	r3, [pc, #192]	; (8000590 <System_Clock_Init+0x1b8>)
 80004d0:	689b      	ldr	r3, [r3, #8]
 80004d2:	f003 030c 	and.w	r3, r3, #12
 80004d6:	2b0c      	cmp	r3, #12
 80004d8:	d1f9      	bne.n	80004ce <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 80004da:	4b2d      	ldr	r3, [pc, #180]	; (8000590 <System_Clock_Init+0x1b8>)
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	4a2c      	ldr	r2, [pc, #176]	; (8000590 <System_Clock_Init+0x1b8>)
 80004e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80004e4:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 80004e6:	4b2a      	ldr	r3, [pc, #168]	; (8000590 <System_Clock_Init+0x1b8>)
 80004e8:	689b      	ldr	r3, [r3, #8]
 80004ea:	4a29      	ldr	r2, [pc, #164]	; (8000590 <System_Clock_Init+0x1b8>)
 80004ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80004f0:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 80004f2:	4b27      	ldr	r3, [pc, #156]	; (8000590 <System_Clock_Init+0x1b8>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	4a26      	ldr	r2, [pc, #152]	; (8000590 <System_Clock_Init+0x1b8>)
 80004f8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80004fc:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80004fe:	4b24      	ldr	r3, [pc, #144]	; (8000590 <System_Clock_Init+0x1b8>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a23      	ldr	r2, [pc, #140]	; (8000590 <System_Clock_Init+0x1b8>)
 8000504:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000508:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 800050a:	bf00      	nop
 800050c:	4b20      	ldr	r3, [pc, #128]	; (8000590 <System_Clock_Init+0x1b8>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000514:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000518:	d0f8      	beq.n	800050c <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 800051a:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <System_Clock_Init+0x1b8>)
 800051c:	691b      	ldr	r3, [r3, #16]
 800051e:	4a1c      	ldr	r2, [pc, #112]	; (8000590 <System_Clock_Init+0x1b8>)
 8000520:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000524:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <System_Clock_Init+0x1b8>)
 8000528:	691b      	ldr	r3, [r3, #16]
 800052a:	4a19      	ldr	r2, [pc, #100]	; (8000590 <System_Clock_Init+0x1b8>)
 800052c:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 8000530:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <System_Clock_Init+0x1b8>)
 8000534:	691b      	ldr	r3, [r3, #16]
 8000536:	4a16      	ldr	r2, [pc, #88]	; (8000590 <System_Clock_Init+0x1b8>)
 8000538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053c:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <System_Clock_Init+0x1b8>)
 8000540:	691b      	ldr	r3, [r3, #16]
 8000542:	4a13      	ldr	r2, [pc, #76]	; (8000590 <System_Clock_Init+0x1b8>)
 8000544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000548:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 800054a:	4b11      	ldr	r3, [pc, #68]	; (8000590 <System_Clock_Init+0x1b8>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a10      	ldr	r2, [pc, #64]	; (8000590 <System_Clock_Init+0x1b8>)
 8000550:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000554:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 8000556:	bf00      	nop
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <System_Clock_Init+0x1b8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000560:	2b00      	cmp	r3, #0
 8000562:	d0f9      	beq.n	8000558 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8000564:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <System_Clock_Init+0x1b8>)
 8000566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800056a:	4a09      	ldr	r2, [pc, #36]	; (8000590 <System_Clock_Init+0x1b8>)
 800056c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <System_Clock_Init+0x1b8>)
 8000576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000578:	4a05      	ldr	r2, [pc, #20]	; (8000590 <System_Clock_Init+0x1b8>)
 800057a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800057e:	6613      	str	r3, [r2, #96]	; 0x60
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	40022000 	.word	0x40022000
 8000590:	40021000 	.word	0x40021000

08000594 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <UART2_Init+0x40>)
 800059a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <UART2_Init+0x40>)
 800059e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a2:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <UART2_Init+0x40>)
 80005a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005aa:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <UART2_Init+0x40>)
 80005ac:	f023 030c 	bic.w	r3, r3, #12
 80005b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <UART2_Init+0x40>)
 80005b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ba:	4a06      	ldr	r2, [pc, #24]	; (80005d4 <UART2_Init+0x40>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 80005c4:	f000 f80a 	bl	80005dc <UART2_GPIO_Init>
	USART_Init(USART2);
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <UART2_Init+0x44>)
 80005ca:	f000 f84f 	bl	800066c <USART_Init>
	
	//NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
	//NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40004400 	.word	0x40004400

080005dc <UART2_GPIO_Init>:
void UART2_GPIO_Init(void) {
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <UART2_GPIO_Init+0x8c>)
 80005e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e4:	4a20      	ldr	r2, [pc, #128]	; (8000668 <UART2_GPIO_Init+0x8c>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 80005ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 80005fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000606:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800060a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 800060c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000610:	6a1b      	ldr	r3, [r3, #32]
 8000612:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800061a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 800061c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000620:	6a1b      	ldr	r3, [r3, #32]
 8000622:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000626:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800062a:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 800062c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000636:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800063a:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 800063c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000640:	68db      	ldr	r3, [r3, #12]
 8000642:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800064a:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 800064c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000656:	f023 030c 	bic.w	r3, r3, #12
 800065a:	6053      	str	r3, [r2, #4]
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000

0800066c <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f023 0201 	bic.w	r2, r3, #1
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f242 028d 	movw	r2, #8333	; 0x208d
 80006aa:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f043 020c 	orr.w	r2, r3, #12
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a2c      	ldr	r2, [pc, #176]	; (800076c <USART_Init+0x100>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d129      	bne.n	8000714 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f043 0220 	orr.w	r2, r3, #32
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 0210 	bic.w	r2, r3, #16
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f023 0201 	bic.w	r2, r3, #1
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a16      	ldr	r2, [pc, #88]	; (8000770 <USART_Init+0x104>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d10b      	bne.n	8000734 <USART_Init+0xc8>
		USARTx->ICR |= USART_ICR_TCCF;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6a1b      	ldr	r3, [r3, #32]
 8000720:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <USART_Init+0x108>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	4a11      	ldr	r2, [pc, #68]	; (8000774 <USART_Init+0x108>)
 800072e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000732:	6093      	str	r3, [r2, #8]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f043 0201 	orr.w	r2, r3, #1
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000740:	bf00      	nop
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0f9      	beq.n	8000742 <USART_Init+0xd6>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 800074e:	bf00      	nop
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	69db      	ldr	r3, [r3, #28]
 8000754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0f9      	beq.n	8000750 <USART_Init+0xe4>
}
 800075c:	bf00      	nop
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40004c00 	.word	0x40004c00
 8000770:	40004400 	.word	0x40004400
 8000774:	40013800 	.word	0x40013800

08000778 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <SystemInit+0x64>)
 800077e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000782:	4a16      	ldr	r2, [pc, #88]	; (80007dc <SystemInit+0x64>)
 8000784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <SystemInit+0x68>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <SystemInit+0x68>)
 8000792:	f043 0301 	orr.w	r3, r3, #1
 8000796:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <SystemInit+0x68>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <SystemInit+0x68>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <SystemInit+0x68>)
 80007a4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80007a8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80007ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <SystemInit+0x68>)
 80007b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007b4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007b6:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <SystemInit+0x68>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <SystemInit+0x68>)
 80007bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007c2:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <SystemInit+0x68>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <SystemInit+0x64>)
 80007ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007ce:	609a      	str	r2, [r3, #8]
#endif
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00
 80007e0:	40021000 	.word	0x40021000

080007e4 <software_led>:
#include "stm32l4xx.h"
#include "main.h"
#include "GPIO.h"


void software_led(){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	GPIO_Init();
 80007e8:	f7ff fd0a 	bl	8000200 <GPIO_Init>
	while(1){
		if(GPIOA->IDR & (1 << 9)){
 80007ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d003      	beq.n	8000802 <software_led+0x1e>
			LED_On(EXTERN_LED);
 80007fa:	2006      	movs	r0, #6
 80007fc:	f7ff fdbe 	bl	800037c <LED_On>
 8000800:	e7f4      	b.n	80007ec <software_led+0x8>
		}else{
			LED_Off(EXTERN_LED);
 8000802:	2006      	movs	r0, #6
 8000804:	f7ff fdd0 	bl	80003a8 <LED_Off>
		if(GPIOA->IDR & (1 << 9)){
 8000808:	e7f0      	b.n	80007ec <software_led+0x8>

0800080a <main>:
#include "math.h"
#include "ctype.h"
#include "led_soft_test.h"
#define EXTERN_LED 6

int main(void){
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0

	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 800080e:	f7ff fde3 	bl	80003d8 <System_Clock_Init>
	UART2_Init();
 8000812:	f7ff febf 	bl	8000594 <UART2_Init>
	LED_Init(EXTERN_LED);
 8000816:	2006      	movs	r0, #6
 8000818:	f7ff fd52 	bl	80002c0 <LED_Init>

	software_led();
 800081c:	f7ff ffe2 	bl	80007e4 <software_led>
 8000820:	2300      	movs	r3, #0

//	init_player();

}
 8000822:	4618      	mov	r0, r3
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000860 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800082c:	f7ff ffa4 	bl	8000778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <LoopForever+0x6>)
  ldr r1, =_edata
 8000832:	490d      	ldr	r1, [pc, #52]	; (8000868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <LoopForever+0xe>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000848:	4c0a      	ldr	r4, [pc, #40]	; (8000874 <LoopForever+0x16>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000856:	f000 f9bb 	bl	8000bd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800085a:	f7ff ffd6 	bl	800080a <main>

0800085e <LoopForever>:

LoopForever:
    b LoopForever
 800085e:	e7fe      	b.n	800085e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000860:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800086c:	08000c38 	.word	0x08000c38
  ldr r2, =_sbss
 8000870:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000874:	20000024 	.word	0x20000024

08000878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_2_IRQHandler>
	...

0800087c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800087c:	b480      	push	{r7}
 800087e:	b087      	sub	sp, #28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800088a:	e17f      	b.n	8000b8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	2101      	movs	r1, #1
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	fa01 f303 	lsl.w	r3, r1, r3
 8000898:	4013      	ands	r3, r2
 800089a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	f000 8171 	beq.w	8000b86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f003 0303 	and.w	r3, r3, #3
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d005      	beq.n	80008bc <HAL_GPIO_Init+0x40>
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f003 0303 	and.w	r3, r3, #3
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d130      	bne.n	800091e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	2203      	movs	r2, #3
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	68da      	ldr	r2, [r3, #12]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	4313      	orrs	r3, r2
 80008e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008f2:	2201      	movs	r2, #1
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43db      	mvns	r3, r3
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	4013      	ands	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	091b      	lsrs	r3, r3, #4
 8000908:	f003 0201 	and.w	r2, r3, #1
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f003 0303 	and.w	r3, r3, #3
 8000926:	2b03      	cmp	r3, #3
 8000928:	d118      	bne.n	800095c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000930:	2201      	movs	r2, #1
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	08db      	lsrs	r3, r3, #3
 8000946:	f003 0201 	and.w	r2, r3, #1
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f003 0303 	and.w	r3, r3, #3
 8000964:	2b03      	cmp	r3, #3
 8000966:	d017      	beq.n	8000998 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	2203      	movs	r2, #3
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	4013      	ands	r3, r2
 800097e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4313      	orrs	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f003 0303 	and.w	r3, r3, #3
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d123      	bne.n	80009ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	08da      	lsrs	r2, r3, #3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3208      	adds	r2, #8
 80009ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f003 0307 	and.w	r3, r3, #7
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	220f      	movs	r2, #15
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4013      	ands	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	691a      	ldr	r2, [r3, #16]
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4313      	orrs	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	08da      	lsrs	r2, r3, #3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	3208      	adds	r2, #8
 80009e6:	6939      	ldr	r1, [r7, #16]
 80009e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	2203      	movs	r2, #3
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f003 0203 	and.w	r2, r3, #3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f000 80ac 	beq.w	8000b86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b5f      	ldr	r3, [pc, #380]	; (8000bac <HAL_GPIO_Init+0x330>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a32:	4a5e      	ldr	r2, [pc, #376]	; (8000bac <HAL_GPIO_Init+0x330>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6613      	str	r3, [r2, #96]	; 0x60
 8000a3a:	4b5c      	ldr	r3, [pc, #368]	; (8000bac <HAL_GPIO_Init+0x330>)
 8000a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a46:	4a5a      	ldr	r2, [pc, #360]	; (8000bb0 <HAL_GPIO_Init+0x334>)
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	f003 0303 	and.w	r3, r3, #3
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a70:	d025      	beq.n	8000abe <HAL_GPIO_Init+0x242>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a4f      	ldr	r2, [pc, #316]	; (8000bb4 <HAL_GPIO_Init+0x338>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d01f      	beq.n	8000aba <HAL_GPIO_Init+0x23e>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a4e      	ldr	r2, [pc, #312]	; (8000bb8 <HAL_GPIO_Init+0x33c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d019      	beq.n	8000ab6 <HAL_GPIO_Init+0x23a>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a4d      	ldr	r2, [pc, #308]	; (8000bbc <HAL_GPIO_Init+0x340>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d013      	beq.n	8000ab2 <HAL_GPIO_Init+0x236>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a4c      	ldr	r2, [pc, #304]	; (8000bc0 <HAL_GPIO_Init+0x344>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d00d      	beq.n	8000aae <HAL_GPIO_Init+0x232>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4b      	ldr	r2, [pc, #300]	; (8000bc4 <HAL_GPIO_Init+0x348>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d007      	beq.n	8000aaa <HAL_GPIO_Init+0x22e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a4a      	ldr	r2, [pc, #296]	; (8000bc8 <HAL_GPIO_Init+0x34c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d101      	bne.n	8000aa6 <HAL_GPIO_Init+0x22a>
 8000aa2:	2306      	movs	r3, #6
 8000aa4:	e00c      	b.n	8000ac0 <HAL_GPIO_Init+0x244>
 8000aa6:	2307      	movs	r3, #7
 8000aa8:	e00a      	b.n	8000ac0 <HAL_GPIO_Init+0x244>
 8000aaa:	2305      	movs	r3, #5
 8000aac:	e008      	b.n	8000ac0 <HAL_GPIO_Init+0x244>
 8000aae:	2304      	movs	r3, #4
 8000ab0:	e006      	b.n	8000ac0 <HAL_GPIO_Init+0x244>
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	e004      	b.n	8000ac0 <HAL_GPIO_Init+0x244>
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e002      	b.n	8000ac0 <HAL_GPIO_Init+0x244>
 8000aba:	2301      	movs	r3, #1
 8000abc:	e000      	b.n	8000ac0 <HAL_GPIO_Init+0x244>
 8000abe:	2300      	movs	r3, #0
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	f002 0203 	and.w	r2, r2, #3
 8000ac6:	0092      	lsls	r2, r2, #2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ad0:	4937      	ldr	r1, [pc, #220]	; (8000bb0 <HAL_GPIO_Init+0x334>)
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ade:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <HAL_GPIO_Init+0x350>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b02:	4a32      	ldr	r2, [pc, #200]	; (8000bcc <HAL_GPIO_Init+0x350>)
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <HAL_GPIO_Init+0x350>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d003      	beq.n	8000b2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b2c:	4a27      	ldr	r2, [pc, #156]	; (8000bcc <HAL_GPIO_Init+0x350>)
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b32:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <HAL_GPIO_Init+0x350>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b56:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <HAL_GPIO_Init+0x350>)
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <HAL_GPIO_Init+0x350>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b80:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <HAL_GPIO_Init+0x350>)
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa22 f303 	lsr.w	r3, r2, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f47f ae78 	bne.w	800088c <HAL_GPIO_Init+0x10>
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
 8000ba0:	371c      	adds	r7, #28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000
 8000bb0:	40010000 	.word	0x40010000
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	48000800 	.word	0x48000800
 8000bbc:	48000c00 	.word	0x48000c00
 8000bc0:	48001000 	.word	0x48001000
 8000bc4:	48001400 	.word	0x48001400
 8000bc8:	48001800 	.word	0x48001800
 8000bcc:	40010400 	.word	0x40010400

08000bd0 <__libc_init_array>:
 8000bd0:	b570      	push	{r4, r5, r6, lr}
 8000bd2:	4d0d      	ldr	r5, [pc, #52]	; (8000c08 <__libc_init_array+0x38>)
 8000bd4:	4c0d      	ldr	r4, [pc, #52]	; (8000c0c <__libc_init_array+0x3c>)
 8000bd6:	1b64      	subs	r4, r4, r5
 8000bd8:	10a4      	asrs	r4, r4, #2
 8000bda:	2600      	movs	r6, #0
 8000bdc:	42a6      	cmp	r6, r4
 8000bde:	d109      	bne.n	8000bf4 <__libc_init_array+0x24>
 8000be0:	4d0b      	ldr	r5, [pc, #44]	; (8000c10 <__libc_init_array+0x40>)
 8000be2:	4c0c      	ldr	r4, [pc, #48]	; (8000c14 <__libc_init_array+0x44>)
 8000be4:	f000 f818 	bl	8000c18 <_init>
 8000be8:	1b64      	subs	r4, r4, r5
 8000bea:	10a4      	asrs	r4, r4, #2
 8000bec:	2600      	movs	r6, #0
 8000bee:	42a6      	cmp	r6, r4
 8000bf0:	d105      	bne.n	8000bfe <__libc_init_array+0x2e>
 8000bf2:	bd70      	pop	{r4, r5, r6, pc}
 8000bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bf8:	4798      	blx	r3
 8000bfa:	3601      	adds	r6, #1
 8000bfc:	e7ee      	b.n	8000bdc <__libc_init_array+0xc>
 8000bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c02:	4798      	blx	r3
 8000c04:	3601      	adds	r6, #1
 8000c06:	e7f2      	b.n	8000bee <__libc_init_array+0x1e>
 8000c08:	08000c30 	.word	0x08000c30
 8000c0c:	08000c30 	.word	0x08000c30
 8000c10:	08000c30 	.word	0x08000c30
 8000c14:	08000c34 	.word	0x08000c34

08000c18 <_init>:
 8000c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c1a:	bf00      	nop
 8000c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c1e:	bc08      	pop	{r3}
 8000c20:	469e      	mov	lr, r3
 8000c22:	4770      	bx	lr

08000c24 <_fini>:
 8000c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c26:	bf00      	nop
 8000c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c2a:	bc08      	pop	{r3}
 8000c2c:	469e      	mov	lr, r3
 8000c2e:	4770      	bx	lr
