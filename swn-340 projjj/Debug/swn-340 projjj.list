
swn-340 projjj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002148  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  080022d8  080022d8  000122d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800254c  0800254c  00027b30  2**0
                  CONTENTS
  4 .ARM          00000000  0800254c  0800254c  00027b30  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800254c  0800254c  00027b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800254c  0800254c  0001254c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002550  08002550  00012550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00007b30  20000000  08002554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20007b30  0800a084  00027b30  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007e2c  0800a084  00027e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00027b30  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00027b60  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004504  00000000  00000000  00027ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016a6  00000000  00000000  0002c0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000430  00000000  00000000  0002d750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002de  00000000  00000000  0002db80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000226a  00000000  00000000  0002de5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000077d0  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5bd6  00000000  00000000  00037898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001200  00000000  00000000  0012d470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  0012e670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20007b30 	.word	0x20007b30
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080022c0 	.word	0x080022c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20007b34 	.word	0x20007b34
 80001cc:	080022c0 	.word	0x080022c0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80002b6:	4b30      	ldr	r3, [pc, #192]	; (8000378 <GPIO_Init+0xd8>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	4a2f      	ldr	r2, [pc, #188]	; (8000378 <GPIO_Init+0xd8>)
 80002bc:	f043 0304 	orr.w	r3, r3, #4
 80002c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002c2:	4b2d      	ldr	r3, [pc, #180]	; (8000378 <GPIO_Init+0xd8>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	f003 0304 	and.w	r3, r3, #4
 80002ca:	613b      	str	r3, [r7, #16]
 80002cc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80002ce:	4b2a      	ldr	r3, [pc, #168]	; (8000378 <GPIO_Init+0xd8>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	4a29      	ldr	r2, [pc, #164]	; (8000378 <GPIO_Init+0xd8>)
 80002d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002da:	4b27      	ldr	r3, [pc, #156]	; (8000378 <GPIO_Init+0xd8>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002e2:	60fb      	str	r3, [r7, #12]
 80002e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <GPIO_Init+0xd8>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ea:	4a23      	ldr	r2, [pc, #140]	; (8000378 <GPIO_Init+0xd8>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002f2:	4b21      	ldr	r3, [pc, #132]	; (8000378 <GPIO_Init+0xd8>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	60bb      	str	r3, [r7, #8]
 80002fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80002fe:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <GPIO_Init+0xd8>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <GPIO_Init+0xd8>)
 8000304:	f043 0302 	orr.w	r3, r3, #2
 8000308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800030a:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <GPIO_Init+0xd8>)
 800030c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030e:	f003 0302 	and.w	r3, r3, #2
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800031c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000320:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	4619      	mov	r1, r3
 800032c:	4813      	ldr	r0, [pc, #76]	; (800037c <GPIO_Init+0xdc>)
 800032e:	f001 f93d 	bl	80015ac <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = S1_Pin;
 8000332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000336:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000338:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800033c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800033e:	2302      	movs	r3, #2
 8000340:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	4619      	mov	r1, r3
 8000348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034c:	f001 f92e 	bl	80015ac <HAL_GPIO_Init>

	/* EXTI15_10_IRQn interrupt init*/
	// Note you will ahave to add EXTI15_10_IRQn Interrupt handler function as well
	// This is the interrupt handler for the blue button
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000350:	2200      	movs	r2, #0
 8000352:	2100      	movs	r1, #0
 8000354:	2028      	movs	r0, #40	; 0x28
 8000356:	f001 f8fe 	bl	8001556 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800035a:	2028      	movs	r0, #40	; 0x28
 800035c:	f001 f917 	bl	800158e <HAL_NVIC_EnableIRQ>


	/* EXTI9_5_IRQn interrupt init*/
	// Note you will have to add EXTI9_15_IRQn Interrupt handler function as well
	// This is the interrupt handler for the external buttons (S1)
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000360:	2200      	movs	r2, #0
 8000362:	2101      	movs	r1, #1
 8000364:	2017      	movs	r0, #23
 8000366:	f001 f8f6 	bl	8001556 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800036a:	2017      	movs	r0, #23
 800036c:	f001 f90f 	bl	800158e <HAL_NVIC_EnableIRQ>

}
 8000370:	bf00      	nop
 8000372:	3728      	adds	r7, #40	; 0x28
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40021000 	.word	0x40021000
 800037c:	48000800 	.word	0x48000800

08000380 <LED_Init>:

//******************************************************************************************
// User pin = LD2 Green pin = PA.5
//******************************************************************************************

void LED_Init(uint8_t pin){
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
	
	// Enable the peripheral clock of GPIO Port	
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;	
 800038a:	4b2b      	ldr	r3, [pc, #172]	; (8000438 <LED_Init+0xb8>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038e:	4a2a      	ldr	r2, [pc, #168]	; (8000438 <LED_Init+0xb8>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	64d3      	str	r3, [r2, #76]	; 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*pin));
 8000396:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	005b      	lsls	r3, r3, #1
 80003a0:	2103      	movs	r1, #3
 80003a2:	fa01 f303 	lsl.w	r3, r1, r3
 80003a6:	43db      	mvns	r3, r3
 80003a8:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003ac:	4013      	ands	r3, r2
 80003ae:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= 1U<<(2*pin);      //  Output(01)
 80003b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	2101      	movs	r1, #1
 80003bc:	fa01 f303 	lsl.w	r3, r1, r3
 80003c0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003c4:	4313      	orrs	r3, r2
 80003c6:	600b      	str	r3, [r1, #0]
	
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*pin));
 80003c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003cc:	689a      	ldr	r2, [r3, #8]
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	2103      	movs	r1, #3
 80003d4:	fa01 f303 	lsl.w	r3, r1, r3
 80003d8:	43db      	mvns	r3, r3
 80003da:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003de:	4013      	ands	r3, r2
 80003e0:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |=   3U<<(2*pin);  // High speed
 80003e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003e6:	689a      	ldr	r2, [r3, #8]
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	2103      	movs	r1, #3
 80003ee:	fa01 f303 	lsl.w	r3, r1, r3
 80003f2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003f6:	4313      	orrs	r3, r2
 80003f8:	608b      	str	r3, [r1, #8]
	
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER &= ~(1U<<pin);       // Push-pull
 80003fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003fe:	685a      	ldr	r2, [r3, #4]
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	2101      	movs	r1, #1
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	43db      	mvns	r3, r3
 800040a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800040e:	4013      	ands	r3, r2
 8000410:	604b      	str	r3, [r1, #4]
	
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*pin));  // No pull-up, no pull-down
 8000412:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000416:	68da      	ldr	r2, [r3, #12]
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	005b      	lsls	r3, r3, #1
 800041c:	2103      	movs	r1, #3
 800041e:	fa01 f303 	lsl.w	r3, r1, r3
 8000422:	43db      	mvns	r3, r3
 8000424:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000428:	4013      	ands	r3, r2
 800042a:	60cb      	str	r3, [r1, #12]
	
}
 800042c:	bf00      	nop
 800042e:	370c      	adds	r7, #12
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000

0800043c <LED_On>:

//******************************************************************************************
// Turn pin On
//******************************************************************************************
void LED_On(uint8_t pin){
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR |= (1UL<<pin);
 8000446:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	2101      	movs	r1, #1
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000458:	4313      	orrs	r3, r2
 800045a:	614b      	str	r3, [r1, #20]
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr

08000468 <LED_Off>:

//******************************************************************************************
// Turn pin Off
//******************************************************************************************
void LED_Off(uint8_t pin){
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR &= ~(1UL<<pin);
 8000472:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000476:	695a      	ldr	r2, [r3, #20]
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f303 	lsl.w	r3, r1, r3
 8000480:	43db      	mvns	r3, r3
 8000482:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000486:	4013      	ands	r3, r2
 8000488:	614b      	str	r3, [r1, #20]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <LED_Toggle>:

//******************************************************************************************
// Toggle pin
//******************************************************************************************
void LED_Toggle(uint8_t pin){
 8000496:	b480      	push	{r7}
 8000498:	b083      	sub	sp, #12
 800049a:	af00      	add	r7, sp, #0
 800049c:	4603      	mov	r3, r0
 800049e:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR ^= (1UL<<pin);
 80004a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004a4:	695a      	ldr	r2, [r3, #20]
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	2101      	movs	r1, #1
 80004aa:	fa01 f303 	lsl.w	r3, r1, r3
 80004ae:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80004b2:	4053      	eors	r3, r2
 80004b4:	614b      	str	r3, [r1, #20]
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
	...

080004c4 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.		
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80004ca:	4b6b      	ldr	r3, [pc, #428]	; (8000678 <System_Clock_Init+0x1b4>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a6a      	ldr	r2, [pc, #424]	; (8000678 <System_Clock_Init+0x1b4>)
 80004d0:	f023 0307 	bic.w	r3, r3, #7
 80004d4:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80004d6:	4b68      	ldr	r3, [pc, #416]	; (8000678 <System_Clock_Init+0x1b4>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a67      	ldr	r2, [pc, #412]	; (8000678 <System_Clock_Init+0x1b4>)
 80004dc:	f043 0302 	orr.w	r3, r3, #2
 80004e0:	6013      	str	r3, [r2, #0]
		
	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 80004e2:	4b66      	ldr	r3, [pc, #408]	; (800067c <System_Clock_Init+0x1b8>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a65      	ldr	r2, [pc, #404]	; (800067c <System_Clock_Init+0x1b8>)
 80004e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ec:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 80004ee:	bf00      	nop
 80004f0:	4b62      	ldr	r3, [pc, #392]	; (800067c <System_Clock_Init+0x1b8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0f9      	beq.n	80004f0 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR	
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 80004fc:	2310      	movs	r3, #16
 80004fe:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 8000500:	4b5e      	ldr	r3, [pc, #376]	; (800067c <System_Clock_Init+0x1b8>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	4a5d      	ldr	r2, [pc, #372]	; (800067c <System_Clock_Init+0x1b8>)
 8000506:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800050a:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 800050c:	4b5b      	ldr	r3, [pc, #364]	; (800067c <System_Clock_Init+0x1b8>)
 800050e:	685a      	ldr	r2, [r3, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	061b      	lsls	r3, r3, #24
 8000514:	4959      	ldr	r1, [pc, #356]	; (800067c <System_Clock_Init+0x1b8>)
 8000516:	4313      	orrs	r3, r2
 8000518:	604b      	str	r3, [r1, #4]
	
	RCC->CR    &= ~RCC_CR_PLLON; 
 800051a:	4b58      	ldr	r3, [pc, #352]	; (800067c <System_Clock_Init+0x1b8>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a57      	ldr	r2, [pc, #348]	; (800067c <System_Clock_Init+0x1b8>)
 8000520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000524:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 8000526:	bf00      	nop
 8000528:	4b54      	ldr	r3, [pc, #336]	; (800067c <System_Clock_Init+0x1b8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000530:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000534:	d0f8      	beq.n	8000528 <System_Clock_Init+0x64>
	
	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 8000536:	4b51      	ldr	r3, [pc, #324]	; (800067c <System_Clock_Init+0x1b8>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	4a50      	ldr	r2, [pc, #320]	; (800067c <System_Clock_Init+0x1b8>)
 800053c:	f023 0303 	bic.w	r3, r3, #3
 8000540:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 8000542:	4b4e      	ldr	r3, [pc, #312]	; (800067c <System_Clock_Init+0x1b8>)
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	4a4d      	ldr	r2, [pc, #308]	; (800067c <System_Clock_Init+0x1b8>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	60d3      	str	r3, [r2, #12]
	
	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 800054e:	4b4b      	ldr	r3, [pc, #300]	; (800067c <System_Clock_Init+0x1b8>)
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000556:	4a49      	ldr	r2, [pc, #292]	; (800067c <System_Clock_Init+0x1b8>)
 8000558:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800055c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 800055e:	4b47      	ldr	r3, [pc, #284]	; (800067c <System_Clock_Init+0x1b8>)
 8000560:	68db      	ldr	r3, [r3, #12]
 8000562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000566:	4a45      	ldr	r2, [pc, #276]	; (800067c <System_Clock_Init+0x1b8>)
 8000568:	f043 0310 	orr.w	r3, r3, #16
 800056c:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8	
 800056e:	4b43      	ldr	r3, [pc, #268]	; (800067c <System_Clock_Init+0x1b8>)
 8000570:	68db      	ldr	r3, [r3, #12]
 8000572:	4a42      	ldr	r2, [pc, #264]	; (800067c <System_Clock_Init+0x1b8>)
 8000574:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8000578:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output 
 800057a:	4b40      	ldr	r3, [pc, #256]	; (800067c <System_Clock_Init+0x1b8>)
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	4a3f      	ldr	r2, [pc, #252]	; (800067c <System_Clock_Init+0x1b8>)
 8000580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000584:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON; 
 8000586:	4b3d      	ldr	r3, [pc, #244]	; (800067c <System_Clock_Init+0x1b8>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a3c      	ldr	r2, [pc, #240]	; (800067c <System_Clock_Init+0x1b8>)
 800058c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000590:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000592:	bf00      	nop
 8000594:	4b39      	ldr	r3, [pc, #228]	; (800067c <System_Clock_Init+0x1b8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800059c:	2b00      	cmp	r3, #0
 800059e:	d0f9      	beq.n	8000594 <System_Clock_Init+0xd0>
	
	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 80005a0:	4b36      	ldr	r3, [pc, #216]	; (800067c <System_Clock_Init+0x1b8>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	4a35      	ldr	r2, [pc, #212]	; (800067c <System_Clock_Init+0x1b8>)
 80005a6:	f023 0303 	bic.w	r3, r3, #3
 80005aa:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 80005ac:	4b33      	ldr	r3, [pc, #204]	; (800067c <System_Clock_Init+0x1b8>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	4a32      	ldr	r2, [pc, #200]	; (800067c <System_Clock_Init+0x1b8>)
 80005b2:	f043 0303 	orr.w	r3, r3, #3
 80005b6:	6093      	str	r3, [r2, #8]
	
	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80005b8:	bf00      	nop
 80005ba:	4b30      	ldr	r3, [pc, #192]	; (800067c <System_Clock_Init+0x1b8>)
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	f003 030c 	and.w	r3, r3, #12
 80005c2:	2b0c      	cmp	r3, #12
 80005c4:	d1f9      	bne.n	80005ba <System_Clock_Init+0xf6>
	
	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <System_Clock_Init+0x1b8>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	4a2c      	ldr	r2, [pc, #176]	; (800067c <System_Clock_Init+0x1b8>)
 80005cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005d0:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 80005d2:	4b2a      	ldr	r3, [pc, #168]	; (800067c <System_Clock_Init+0x1b8>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	4a29      	ldr	r2, [pc, #164]	; (800067c <System_Clock_Init+0x1b8>)
 80005d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005dc:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 80005de:	4b27      	ldr	r3, [pc, #156]	; (800067c <System_Clock_Init+0x1b8>)
 80005e0:	689b      	ldr	r3, [r3, #8]
 80005e2:	4a26      	ldr	r2, [pc, #152]	; (800067c <System_Clock_Init+0x1b8>)
 80005e4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80005e8:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; 
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;	
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable
	
	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80005ea:	4b24      	ldr	r3, [pc, #144]	; (800067c <System_Clock_Init+0x1b8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a23      	ldr	r2, [pc, #140]	; (800067c <System_Clock_Init+0x1b8>)
 80005f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80005f4:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 80005f6:	bf00      	nop
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <System_Clock_Init+0x1b8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000600:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000604:	d0f8      	beq.n	80005f8 <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 8000606:	4b1d      	ldr	r3, [pc, #116]	; (800067c <System_Clock_Init+0x1b8>)
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	4a1c      	ldr	r2, [pc, #112]	; (800067c <System_Clock_Init+0x1b8>)
 800060c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000610:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <System_Clock_Init+0x1b8>)
 8000614:	691b      	ldr	r3, [r3, #16]
 8000616:	4a19      	ldr	r2, [pc, #100]	; (800067c <System_Clock_Init+0x1b8>)
 8000618:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 800061c:	6113      	str	r3, [r2, #16]
	
	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <System_Clock_Init+0x1b8>)
 8000620:	691b      	ldr	r3, [r3, #16]
 8000622:	4a16      	ldr	r2, [pc, #88]	; (800067c <System_Clock_Init+0x1b8>)
 8000624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000628:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <System_Clock_Init+0x1b8>)
 800062c:	691b      	ldr	r3, [r3, #16]
 800062e:	4a13      	ldr	r2, [pc, #76]	; (800067c <System_Clock_Init+0x1b8>)
 8000630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000634:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R; 
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;
	
	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <System_Clock_Init+0x1b8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a10      	ldr	r2, [pc, #64]	; (800067c <System_Clock_Init+0x1b8>)
 800063c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000640:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 8000642:	bf00      	nop
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <System_Clock_Init+0x1b8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f9      	beq.n	8000644 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock	
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <System_Clock_Init+0x1b8>)
 8000652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000656:	4a09      	ldr	r2, [pc, #36]	; (800067c <System_Clock_Init+0x1b8>)
 8000658:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800065c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <System_Clock_Init+0x1b8>)
 8000662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <System_Clock_Init+0x1b8>)
 8000666:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800066a:	6613      	str	r3, [r2, #96]	; 0x60
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40022000 	.word	0x40022000
 800067c:	40021000 	.word	0x40021000

08000680 <UART2_Init>:
// PA.3 = USART2_RX (AF7)

#define TX_PIN 2
#define RX_PIN 3

void UART2_Init(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock		
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <UART2_Init+0x40>)
 8000686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000688:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <UART2_Init+0x40>)
 800068a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068e:	6593      	str	r3, [r2, #88]	; 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <UART2_Init+0x40>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <UART2_Init+0x40>)
 8000698:	f023 030c 	bic.w	r3, r3, #12
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <UART2_Init+0x40>)
 80006a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006a6:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <UART2_Init+0x40>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	UART2_GPIO_Init();
 80006b0:	f000 f80a 	bl	80006c8 <UART2_GPIO_Init>
	USART_Init(USART2);
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <UART2_Init+0x44>)
 80006b6:	f000 f84f 	bl	8000758 <USART_Init>
	
//	NVIC_SetPriority(USART2_IRQn, 0);			// Set Priority to 1
//	NVIC_EnableIRQ(USART2_IRQn);					// Enable interrupt of USART1 peripheral
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40004400 	.word	0x40004400

080006c8 <UART2_GPIO_Init>:
void UART2_GPIO_Init(void) {
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
	
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |=   RCC_AHB2ENR_GPIOAEN;
 80006cc:	4b21      	ldr	r3, [pc, #132]	; (8000754 <UART2_GPIO_Init+0x8c>)
 80006ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d0:	4a20      	ldr	r2, [pc, #128]	; (8000754 <UART2_GPIO_Init+0x8c>)
 80006d2:	f043 0301 	orr.w	r3, r3, #1
 80006d6:	64d3      	str	r3, [r2, #76]	; 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 80006d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN); 
 80006e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80006f2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80006f6:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));	
 80006f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006fc:	6a1b      	ldr	r3, [r3, #32]
 80006fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000706:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);       	
 8000708:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800070c:	6a1b      	ldr	r3, [r3, #32]
 800070e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000712:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000716:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN); 					 	
 8000718:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000722:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000726:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 8000728:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000736:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1) 
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);       	
 8000738:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000742:	f023 030c 	bic.w	r3, r3, #12
 8000746:	6053      	str	r3, [r2, #4]
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <USART_Init>:


void USART_Init (USART_TypeDef * USARTx) {
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	// Default setting: 
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit		
	USARTx->CR1 &= ~USART_CR1_UE;  // Disable USART
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f023 0201 	bic.w	r2, r3, #1
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	601a      	str	r2, [r3, #0]
	
	// Configure word length to 8 bit
	USARTx->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	601a      	str	r2, [r3, #0]
	
	// Configure oversampling mode: Oversampling by 16 
	USARTx->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	601a      	str	r2, [r3, #0]
	
	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USARTx->CR2 &= ~USART_CR2_STOP;   
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	605a      	str	r2, [r3, #4]
	// CSet Baudrate to 9600 using APB frequency (80,000,000 Hz)
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,  
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
  // When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	USARTx->BRR  = 0x208D; // Limited to 16 bits
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f242 028d 	movw	r2, #8333	; 0x208d
 8000796:	60da      	str	r2, [r3, #12]

	USARTx->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f043 020c 	orr.w	r2, r3, #12
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	601a      	str	r2, [r3, #0]
	
  if (USARTx == UART4){	
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a2f      	ldr	r2, [pc, #188]	; (8000864 <USART_Init+0x10c>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d129      	bne.n	8000800 <USART_Init+0xa8>
		USARTx->CR1 |= USART_CR1_RXNEIE;  			// Received Data Ready to be Read Interrupt  
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f043 0220 	orr.w	r2, r3, #32
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TCIE;    			// Transmission Complete Interrupt 
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_IDLEIE;  			// Idle Line Detected Interrupt 
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f023 0210 	bic.w	r2, r3, #16
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_TXEIE;   			// Transmit Data Register Empty Interrupt 
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR1_PEIE;    			// Parity Error Interrupt 
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR2_LBDIE;				// LIN Break Detection Interrupt Enable
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	601a      	str	r2, [r3, #0]
		USARTx->CR1 &= ~USART_CR3_EIE;					// Error Interrupt Enable (Frame error, noise error, overrun error) 
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f023 0201 	bic.w	r2, r3, #1
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	601a      	str	r2, [r3, #0]
		//USARTx->CR3 &= ~USART_CR3_CTSIE;				// CTS Interrupt
	}

	if (USARTx == USART2){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a19      	ldr	r2, [pc, #100]	; (8000868 <USART_Init+0x110>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d111      	bne.n	800082c <USART_Init+0xd4>
		USARTx->ICR |= USART_ICR_TCCF;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6a1b      	ldr	r3, [r3, #32]
 800080c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	621a      	str	r2, [r3, #32]
		USART1->CR3 |= USART_CR3_DMAT | USART_CR3_DMAR;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <USART_Init+0x114>)
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	4a14      	ldr	r2, [pc, #80]	; (800086c <USART_Init+0x114>)
 800081a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800081e:	6093      	str	r3, [r2, #8]
		USARTx-> CR1 |= USART_CR1_RXNEIE;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f043 0220 	orr.w	r2, r3, #32
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	601a      	str	r2, [r3, #0]
	}
	
	USARTx->CR1  |= USART_CR1_UE; // USART enable                 
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f043 0201 	orr.w	r2, r3, #1
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	601a      	str	r2, [r3, #0]
	
	while ( (USARTx->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000838:	bf00      	nop
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000842:	2b00      	cmp	r3, #0
 8000844:	d0f9      	beq.n	800083a <USART_Init+0xe2>
	while ( (USARTx->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000846:	bf00      	nop
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0f9      	beq.n	8000848 <USART_Init+0xf0>
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40004c00 	.word	0x40004c00
 8000868:	40004400 	.word	0x40004400
 800086c:	40013800 	.word	0x40013800

08000870 <USART_Read>:


uint8_t USART_Read (USART_TypeDef * USARTx) {
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	// SR_RXNE (Read data register not empty) bit is set by hardware
	while (!(USARTx->ISR & USART_ISR_RXNE));  // Wait until RXNE (RX not empty) bit is set
 8000878:	bf00      	nop
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 0320 	and.w	r3, r3, #32
 8000882:	2b00      	cmp	r3, #0
 8000884:	d0f9      	beq.n	800087a <USART_Read+0xa>
	// USART resets the RXNE flag automatically after reading DR
	return ((uint8_t)(USARTx->RDR & 0xFF));
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800088a:	b29b      	uxth	r3, r3
 800088c:	b2db      	uxtb	r3, r3
	// Reading USART_DR automatically clears the RXNE flag 
}
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <USART_Read_Nonblocking>:
uint8_t USART_Read_Nonblocking (USART_TypeDef * USARTx) {
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
	if(!(USARTx->ISR & USART_ISR_RXNE)){
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f003 0320 	and.w	r3, r3, #32
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d101      	bne.n	80008b2 <USART_Read_Nonblocking+0x18>
			return 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	e003      	b.n	80008ba <USART_Read_Nonblocking+0x20>
	}else{
		return ((uint8_t)(USARTx->RDR & 0xFF));
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	b2db      	uxtb	r3, r3
	}
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes) {
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b086      	sub	sp, #24
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	60f8      	str	r0, [r7, #12]
 80008ce:	60b9      	str	r1, [r7, #8]
 80008d0:	607a      	str	r2, [r7, #4]
	int i;
	// TXE is cleared by a write to the USART_DR register.
	// TXE is set by hardware when the content of the TDR 
	// register has been transferred into the shift register.
	for (i = 0; i < nBytes; i++) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	e014      	b.n	8000902 <USART_Write+0x3c>
		while (!(USARTx->ISR & USART_ISR_TXE));   	// wait until TXE (TX empty) bit is set
 80008d8:	bf00      	nop
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0f9      	beq.n	80008da <USART_Write+0x14>
		// Writing USART_DR automatically clears the TXE flag 	
		USARTx->TDR = buffer[i] & 0xFF;
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	68ba      	ldr	r2, [r7, #8]
 80008ea:	4413      	add	r3, r2
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	851a      	strh	r2, [r3, #40]	; 0x28
		USART_Delay(300);
 80008f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008f8:	f000 f818 	bl	800092c <USART_Delay>
	for (i = 0; i < nBytes; i++) {
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	3301      	adds	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	429a      	cmp	r2, r3
 8000908:	d8e6      	bhi.n	80008d8 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 800090a:	bf00      	nop
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	69db      	ldr	r3, [r3, #28]
 8000910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000914:	2b00      	cmp	r3, #0
 8000916:	d0f9      	beq.n	800090c <USART_Write+0x46>
	USARTx->ISR &= ~USART_ISR_TC;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	69db      	ldr	r3, [r3, #28]
 800091c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	61da      	str	r2, [r3, #28]
}   
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <USART_Delay>:
 

void USART_Delay(uint32_t us) {
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;    
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2264      	movs	r2, #100	; 0x64
 8000938:	fb03 f202 	mul.w	r2, r3, r2
 800093c:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <USART_Delay+0x3c>)
 800093e:	fba3 1302 	umull	r1, r3, r3, r2
 8000942:	1ad2      	subs	r2, r2, r3
 8000944:	0852      	lsrs	r2, r2, #1
 8000946:	4413      	add	r3, r2
 8000948:	089b      	lsrs	r3, r3, #2
 800094a:	60fb      	str	r3, [r7, #12]
	while(--time);   
 800094c:	bf00      	nop
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	3b01      	subs	r3, #1
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1f9      	bne.n	800094e <USART_Delay+0x22>
}
 800095a:	bf00      	nop
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	24924925 	.word	0x24924925

0800096c <init_syst>:
    uint32_t CSR;
    uint32_t RVR;
    uint32_t CVR;
    uint32_t CALIB;
};
void init_syst (){
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
    // Create an instance of systick
    // Set timer to 10 ms
    SYST_TICK->RVR = 799999; //1 ms timer
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <init_syst+0x38>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <init_syst+0x3c>)
 8000976:	605a      	str	r2, [r3, #4]
    // Turn on timer -
    SYST_TICK->CSR |= (1<<2); // Use pc source
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <init_syst+0x38>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <init_syst+0x38>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f042 0204 	orr.w	r2, r2, #4
 8000986:	601a      	str	r2, [r3, #0]
    SYST_TICK->CSR |= (1<<0); // Enable
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <init_syst+0x38>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <init_syst+0x38>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f042 0201 	orr.w	r2, r2, #1
 8000996:	601a      	str	r2, [r3, #0]
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20007ad8 	.word	0x20007ad8
 80009a8:	000c34ff 	.word	0x000c34ff

080009ac <get_song>:

// Convenience list of all the songs in one array.
song songs[] = {{song0, sizeof (song0)}, {song1, sizeof (song1)}, {song2, sizeof (song2)}, {song3, sizeof (song3)},
				{song4, sizeof (song4)}};

song get_song (uint8_t song_number){
 80009ac:	b490      	push	{r4, r7}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	460b      	mov	r3, r1
 80009b6:	70fb      	strb	r3, [r7, #3]
	return songs[song_number];
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <get_song+0x2c>)
 80009be:	460c      	mov	r4, r1
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	4413      	add	r3, r2
 80009c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009c8:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc90      	pop	{r4, r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20007aa4 	.word	0x20007aa4

080009dc <next_song>:
char BUFFER[128];
int currentSongNum = -1;
volatile int lightState = 0;


void next_song(){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0ca      	sub	sp, #296	; 0x128
 80009e0:	af00      	add	r7, sp, #0
	//display next songs title and queue it
	currentSongNum++;
 80009e2:	4ba7      	ldr	r3, [pc, #668]	; (8000c80 <next_song+0x2a4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	3301      	adds	r3, #1
 80009e8:	4aa5      	ldr	r2, [pc, #660]	; (8000c80 <next_song+0x2a4>)
 80009ea:	6013      	str	r3, [r2, #0]
	if(currentSongNum == 5){
 80009ec:	4ba4      	ldr	r3, [pc, #656]	; (8000c80 <next_song+0x2a4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b05      	cmp	r3, #5
 80009f2:	d102      	bne.n	80009fa <next_song+0x1e>
		currentSongNum = 0;
 80009f4:	4ba2      	ldr	r3, [pc, #648]	; (8000c80 <next_song+0x2a4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
	}
	//title find
	char songTitle[128] = {};
 80009fa:	2300      	movs	r3, #0
 80009fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000a00:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a04:	227c      	movs	r2, #124	; 0x7c
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 ffd5 	bl	80019b8 <memset>
	int titleIndex = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	int numToCount = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	int mtrkCnt = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	song song = get_song(currentSongNum);
 8000a20:	4b97      	ldr	r3, [pc, #604]	; (8000c80 <next_song+0x2a4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffbd 	bl	80009ac <get_song>
	int i = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	while(0==0){
		if(song.p_song[i] == 255 && song.p_song[i+1] == 3){ //ff,03
 8000a38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a40:	4413      	add	r3, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2bff      	cmp	r3, #255	; 0xff
 8000a46:	d108      	bne.n	8000a5a <next_song+0x7e>
 8000a48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a50:	3301      	adds	r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d02d      	beq.n	8000ab6 <next_song+0xda>
			break;
		}
		i++;
 8000a5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a5e:	3301      	adds	r3, #1
 8000a60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		if(song.p_song[i] == 77 && song.p_song[i+1] == 84 && song.p_song[i+2] == 114 && song.p_song[i+3] == 107 ){//ff,03
 8000a64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a6c:	4413      	add	r3, r2
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b4d      	cmp	r3, #77	; 0x4d
 8000a72:	d1e1      	bne.n	8000a38 <next_song+0x5c>
 8000a74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	4413      	add	r3, r2
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b54      	cmp	r3, #84	; 0x54
 8000a84:	d1d8      	bne.n	8000a38 <next_song+0x5c>
 8000a86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a8e:	3302      	adds	r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b72      	cmp	r3, #114	; 0x72
 8000a96:	d1cf      	bne.n	8000a38 <next_song+0x5c>
 8000a98:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000aa0:	3303      	adds	r3, #3
 8000aa2:	4413      	add	r3, r2
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b6b      	cmp	r3, #107	; 0x6b
 8000aa8:	d1c6      	bne.n	8000a38 <next_song+0x5c>
			mtrkCnt++;
 8000aaa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000aae:	3301      	adds	r3, #1
 8000ab0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		if(song.p_song[i] == 255 && song.p_song[i+1] == 3){ //ff,03
 8000ab4:	e7c0      	b.n	8000a38 <next_song+0x5c>
			break;
 8000ab6:	bf00      	nop
		}
	}
	//if mtrk second was not found title exists
	if(mtrkCnt != 2){
 8000ab8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d033      	beq.n	8000b28 <next_song+0x14c>
		int numToCount = song.p_song[i+2];
 8000ac0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000ac4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000ac8:	3302      	adds	r3, #2
 8000aca:	4413      	add	r3, r2
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		i++;
 8000ad2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		for(int p = i; p<=numToCount+i+1;p++){
 8000adc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000ae0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000ae4:	e016      	b.n	8000b14 <next_song+0x138>
			songTitle[titleIndex] = (char)(song.p_song[p]);
 8000ae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000aea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000aee:	4413      	add	r3, r2
 8000af0:	7819      	ldrb	r1, [r3, #0]
 8000af2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000af6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000afa:	4413      	add	r3, r2
 8000afc:	460a      	mov	r2, r1
 8000afe:	701a      	strb	r2, [r3, #0]
			titleIndex++;
 8000b00:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b04:	3301      	adds	r3, #1
 8000b06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		for(int p = i; p<=numToCount+i+1;p++){
 8000b0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000b0e:	3301      	adds	r3, #1
 8000b10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000b14:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8000b18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b1c:	4413      	add	r3, r2
 8000b1e:	3301      	adds	r3, #1
 8000b20:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000b24:	429a      	cmp	r2, r3
 8000b26:	ddde      	ble.n	8000ae6 <next_song+0x10a>
		}
	}
	//copyright find
	char songCopyright[128] = {};
 8000b28:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b2c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	3304      	adds	r3, #4
 8000b36:	227c      	movs	r2, #124	; 0x7c
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 ff3c 	bl	80019b8 <memset>
	int copyrightIndex = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	i = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	mtrkCnt = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	while(0==0){
		if(song.p_song[i] == 255 && song.p_song[i+1] == 2 ){
 8000b52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000b56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b5a:	4413      	add	r3, r2
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2bff      	cmp	r3, #255	; 0xff
 8000b60:	d108      	bne.n	8000b74 <next_song+0x198>
 8000b62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000b66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	4413      	add	r3, r2
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d031      	beq.n	8000bd8 <next_song+0x1fc>
			break;
		}
		if(song.p_song[i] == 77 && song.p_song[i+1] == 84 && song.p_song[i+2] == 114 && song.p_song[i+3] == 107 ){
 8000b74:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000b78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b7c:	4413      	add	r3, r2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b4d      	cmp	r3, #77	; 0x4d
 8000b82:	d11f      	bne.n	8000bc4 <next_song+0x1e8>
 8000b84:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000b88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	4413      	add	r3, r2
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b54      	cmp	r3, #84	; 0x54
 8000b94:	d116      	bne.n	8000bc4 <next_song+0x1e8>
 8000b96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000b9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	4413      	add	r3, r2
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b72      	cmp	r3, #114	; 0x72
 8000ba6:	d10d      	bne.n	8000bc4 <next_song+0x1e8>
 8000ba8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000bb0:	3303      	adds	r3, #3
 8000bb2:	4413      	add	r3, r2
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b6b      	cmp	r3, #107	; 0x6b
 8000bb8:	d104      	bne.n	8000bc4 <next_song+0x1e8>
					mtrkCnt++;
 8000bba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
		}
		i++;
 8000bc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000bc8:	3301      	adds	r3, #1
 8000bca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		if(mtrkCnt == 2){
 8000bce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d002      	beq.n	8000bdc <next_song+0x200>
		if(song.p_song[i] == 255 && song.p_song[i+1] == 2 ){
 8000bd6:	e7bc      	b.n	8000b52 <next_song+0x176>
			break;
 8000bd8:	bf00      	nop
 8000bda:	e000      	b.n	8000bde <next_song+0x202>
			break;
 8000bdc:	bf00      	nop
		}
	}
	//if mtrk second was not found copyright exists
	if(mtrkCnt != 2){
 8000bde:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d036      	beq.n	8000c54 <next_song+0x278>
		numToCount = song.p_song[i+2];
 8000be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000bea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000bee:	3302      	adds	r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
		i++;
 8000bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		for(int p = i+2; p<=numToCount+i+1;p++){
 8000c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c06:	3302      	adds	r3, #2
 8000c08:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000c0c:	e018      	b.n	8000c40 <next_song+0x264>
			songCopyright[copyrightIndex] = (char)(song.p_song[p]);
 8000c0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000c12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c16:	4413      	add	r3, r2
 8000c18:	7819      	ldrb	r1, [r3, #0]
 8000c1a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000c1e:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8000c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c26:	4413      	add	r3, r2
 8000c28:	460a      	mov	r2, r1
 8000c2a:	701a      	strb	r2, [r3, #0]
			copyrightIndex++;
 8000c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c30:	3301      	adds	r3, #1
 8000c32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int p = i+2; p<=numToCount+i+1;p++){
 8000c36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000c40:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8000c44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c48:	4413      	add	r3, r2
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000c50:	429a      	cmp	r2, r3
 8000c52:	dddc      	ble.n	8000c0e <next_song+0x232>
		}
	}
	printf("\r\n%s","Current Song:");
 8000c54:	490b      	ldr	r1, [pc, #44]	; (8000c84 <next_song+0x2a8>)
 8000c56:	480c      	ldr	r0, [pc, #48]	; (8000c88 <next_song+0x2ac>)
 8000c58:	f000 faa6 	bl	80011a8 <printf>
	printf("\r\n%s%s","Song Title: ",songTitle);
 8000c5c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c60:	461a      	mov	r2, r3
 8000c62:	490a      	ldr	r1, [pc, #40]	; (8000c8c <next_song+0x2b0>)
 8000c64:	480a      	ldr	r0, [pc, #40]	; (8000c90 <next_song+0x2b4>)
 8000c66:	f000 fa9f 	bl	80011a8 <printf>
	printf("\r\n%s%s\r\n","Song Copyright: ",songCopyright);
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4909      	ldr	r1, [pc, #36]	; (8000c94 <next_song+0x2b8>)
 8000c70:	4809      	ldr	r0, [pc, #36]	; (8000c98 <next_song+0x2bc>)
 8000c72:	f000 fa99 	bl	80011a8 <printf>

}
 8000c76:	bf00      	nop
 8000c78:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20007ad4 	.word	0x20007ad4
 8000c84:	080022d8 	.word	0x080022d8
 8000c88:	080022e8 	.word	0x080022e8
 8000c8c:	080022f0 	.word	0x080022f0
 8000c90:	08002300 	.word	0x08002300
 8000c94:	08002308 	.word	0x08002308
 8000c98:	0800231c 	.word	0x0800231c

08000c9c <play_song>:
//play song
void play_song(){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	PLAY_PAUSE_TOG = 1;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <play_song+0x20>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	601a      	str	r2, [r3, #0]
	lightState = 1;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <play_song+0x24>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	601a      	str	r2, [r3, #0]
	LED_On(EXTERN_LED);
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <play_song+0x28>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fbc2 	bl	800043c <LED_On>
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20007b4c 	.word	0x20007b4c
 8000cc0:	20007bd0 	.word	0x20007bd0
 8000cc4:	20007adc 	.word	0x20007adc

08000cc8 <stop_song>:
//stop song
void stop_song(){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	lightState = 0;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <stop_song+0x1c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
	LED_Off(EXTERN_LED);
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <stop_song+0x20>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fbc5 	bl	8000468 <LED_Off>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20007bd0 	.word	0x20007bd0
 8000ce8:	20007adc 	.word	0x20007adc

08000cec <pause_song>:
char* pause_song() {
 8000cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cf0:	b088      	sub	sp, #32
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	466b      	mov	r3, sp
 8000cf6:	4698      	mov	r8, r3
	lightState = 2;
 8000cf8:	4b3c      	ldr	r3, [pc, #240]	; (8000dec <pause_song+0x100>)
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	601a      	str	r2, [r3, #0]
    char BUFFER[MAX_STRING_SIZE];  // Declare BUFFER as static
 8000cfe:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <pause_song+0x104>)
 8000d00:	681e      	ldr	r6, [r3, #0]
 8000d02:	1e73      	subs	r3, r6, #1
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4632      	mov	r2, r6
 8000d08:	2300      	movs	r3, #0
 8000d0a:	4614      	mov	r4, r2
 8000d0c:	461d      	mov	r5, r3
 8000d0e:	f04f 0200 	mov.w	r2, #0
 8000d12:	f04f 0300 	mov.w	r3, #0
 8000d16:	00eb      	lsls	r3, r5, #3
 8000d18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d1c:	00e2      	lsls	r2, r4, #3
 8000d1e:	4632      	mov	r2, r6
 8000d20:	2300      	movs	r3, #0
 8000d22:	4610      	mov	r0, r2
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	f04f 0300 	mov.w	r3, #0
 8000d2e:	00cb      	lsls	r3, r1, #3
 8000d30:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d34:	00c2      	lsls	r2, r0, #3
 8000d36:	4633      	mov	r3, r6
 8000d38:	3307      	adds	r3, #7
 8000d3a:	08db      	lsrs	r3, r3, #3
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	ebad 0d03 	sub.w	sp, sp, r3
 8000d42:	466b      	mov	r3, sp
 8000d44:	3300      	adds	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
    PLAY_PAUSE_TOG = 0;
 8000d48:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <pause_song+0x108>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
    init_systick();
 8000d4e:	f000 fab3 	bl	80012b8 <init_systick>
    int cnt = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    int index = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61bb      	str	r3, [r7, #24]
    char ch = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	72fb      	strb	r3, [r7, #11]
    int going = 1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
    while (going == 1 && lightState == 2) {
 8000d62:	e02a      	b.n	8000dba <pause_song+0xce>
        cnt++;
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	3301      	adds	r3, #1
 8000d68:	61fb      	str	r3, [r7, #28]
			ch = USART_Read_Nonblocking(USART2);
 8000d6a:	4823      	ldr	r0, [pc, #140]	; (8000df8 <pause_song+0x10c>)
 8000d6c:	f7ff fd95 	bl	800089a <USART_Read_Nonblocking>
 8000d70:	4603      	mov	r3, r0
 8000d72:	72fb      	strb	r3, [r7, #11]
			if (ch == '\r') {
 8000d74:	7afb      	ldrb	r3, [r7, #11]
 8000d76:	2b0d      	cmp	r3, #13
 8000d78:	d102      	bne.n	8000d80 <pause_song+0x94>
				going = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	e01c      	b.n	8000dba <pause_song+0xce>
			} else {
				if (ch != 0) {
 8000d80:	7afb      	ldrb	r3, [r7, #11]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00b      	beq.n	8000d9e <pause_song+0xb2>
					printf("%c", ch);
 8000d86:	7afb      	ldrb	r3, [r7, #11]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 f9ff 	bl	800118c <putchar>
					BUFFER[index] = ch;
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	4413      	add	r3, r2
 8000d94:	7afa      	ldrb	r2, [r7, #11]
 8000d96:	701a      	strb	r2, [r3, #0]
					index++;
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	61bb      	str	r3, [r7, #24]
				}
       delay_systick();
 8000d9e:	f000 fabd 	bl	800131c <delay_systick>
       if (cnt == 1000) {
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000da8:	d107      	bne.n	8000dba <pause_song+0xce>
    	   LED_Toggle(EXTERN_LED);
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <pause_song+0x110>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fb70 	bl	8000496 <LED_Toggle>
    	   cnt = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    while (going == 1 && lightState == 2) {
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d103      	bne.n	8000dc8 <pause_song+0xdc>
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <pause_song+0x100>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d0cd      	beq.n	8000d64 <pause_song+0x78>
        }
        }
    }
    printf("\r\n");
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <pause_song+0x114>)
 8000dca:	f000 f9c7 	bl	800115c <puts>
    BUFFER[index] = 0;
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
    char* toReturn = BUFFER;  // Return a pointer to BUFFER
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	607b      	str	r3, [r7, #4]
    return toReturn;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	46c5      	mov	sp, r8
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3720      	adds	r7, #32
 8000de4:	46bd      	mov	sp, r7
 8000de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dea:	bf00      	nop
 8000dec:	20007bd0 	.word	0x20007bd0
 8000df0:	20007acc 	.word	0x20007acc
 8000df4:	20007b4c 	.word	0x20007b4c
 8000df8:	40004400 	.word	0x40004400
 8000dfc:	20007adc 	.word	0x20007adc
 8000e00:	08002328 	.word	0x08002328

08000e04 <take_input_remote>:
	     }
	}
	init_player();
}

void take_input_remote(char initialInput){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	char* input = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
	//if inital input exists set input equal to
		if(initialInput == 0){
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d105      	bne.n	8000e24 <take_input_remote+0x20>
			input = read_line();
 8000e18:	f000 fab4 	bl	8001384 <read_line>
 8000e1c:	60f8      	str	r0, [r7, #12]
			initialInput = *input;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
		}
		*input = initialInput;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	79fa      	ldrb	r2, [r7, #7]
 8000e28:	701a      	strb	r2, [r3, #0]
		//check input vs commands
		if(strcmp(input,"NEXT") == 0){
 8000e2a:	492b      	ldr	r1, [pc, #172]	; (8000ed8 <take_input_remote+0xd4>)
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	f7ff f9cf 	bl	80001d0 <strcmp>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d105      	bne.n	8000e44 <take_input_remote+0x40>
			next_song();
 8000e38:	f7ff fdd0 	bl	80009dc <next_song>
			printf("\r\n");
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <take_input_remote+0xd8>)
 8000e3e:	f000 f98d 	bl	800115c <puts>
			printf("\r\nInvalid Input");
			printf("\r\n");
			}
		}

}
 8000e42:	e045      	b.n	8000ed0 <take_input_remote+0xcc>
		else if(strcmp(input,"PLAY") == 0){
 8000e44:	4926      	ldr	r1, [pc, #152]	; (8000ee0 <take_input_remote+0xdc>)
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f7ff f9c2 	bl	80001d0 <strcmp>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d105      	bne.n	8000e5e <take_input_remote+0x5a>
			play_song();
 8000e52:	f7ff ff23 	bl	8000c9c <play_song>
			printf("\r\n");
 8000e56:	4821      	ldr	r0, [pc, #132]	; (8000edc <take_input_remote+0xd8>)
 8000e58:	f000 f980 	bl	800115c <puts>
}
 8000e5c:	e038      	b.n	8000ed0 <take_input_remote+0xcc>
		else if(strcmp(input,"STOP") == 0){
 8000e5e:	4921      	ldr	r1, [pc, #132]	; (8000ee4 <take_input_remote+0xe0>)
 8000e60:	68f8      	ldr	r0, [r7, #12]
 8000e62:	f7ff f9b5 	bl	80001d0 <strcmp>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d105      	bne.n	8000e78 <take_input_remote+0x74>
			stop_song();
 8000e6c:	f7ff ff2c 	bl	8000cc8 <stop_song>
			printf("\r\n");
 8000e70:	481a      	ldr	r0, [pc, #104]	; (8000edc <take_input_remote+0xd8>)
 8000e72:	f000 f973 	bl	800115c <puts>
}
 8000e76:	e02b      	b.n	8000ed0 <take_input_remote+0xcc>
		else if(strcmp(input,"HELP") == 0){
 8000e78:	491b      	ldr	r1, [pc, #108]	; (8000ee8 <take_input_remote+0xe4>)
 8000e7a:	68f8      	ldr	r0, [r7, #12]
 8000e7c:	f7ff f9a8 	bl	80001d0 <strcmp>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d103      	bne.n	8000e8e <take_input_remote+0x8a>
			printf("\n\rAvail9able User Commands\n\rNEXT - Show next song info\n\rPLAY - Play the song (LED on)\n\rPAUSE - Pause the song (LED flash)\n\rSTOP - Stop the song (LED off)\n\r");
 8000e86:	4819      	ldr	r0, [pc, #100]	; (8000eec <take_input_remote+0xe8>)
 8000e88:	f000 f98e 	bl	80011a8 <printf>
}
 8000e8c:	e020      	b.n	8000ed0 <take_input_remote+0xcc>
		else if(strcmp(input,"PAUSE") == 0){
 8000e8e:	4918      	ldr	r1, [pc, #96]	; (8000ef0 <take_input_remote+0xec>)
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f7ff f99d 	bl	80001d0 <strcmp>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d10b      	bne.n	8000eb4 <take_input_remote+0xb0>
			printf("\r\n");
 8000e9c:	480f      	ldr	r0, [pc, #60]	; (8000edc <take_input_remote+0xd8>)
 8000e9e:	f000 f95d 	bl	800115c <puts>
			char* pausedI = pause_song();
 8000ea2:	f7ff ff23 	bl	8000cec <pause_song>
 8000ea6:	60b8      	str	r0, [r7, #8]
			take_input_remote(*pausedI);
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ffa9 	bl	8000e04 <take_input_remote>
}
 8000eb2:	e00d      	b.n	8000ed0 <take_input_remote+0xcc>
			if(isRemote == 0){
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <take_input_remote+0xf0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d103      	bne.n	8000ec4 <take_input_remote+0xc0>
				printf("\r");
 8000ebc:	200d      	movs	r0, #13
 8000ebe:	f000 f965 	bl	800118c <putchar>
}
 8000ec2:	e005      	b.n	8000ed0 <take_input_remote+0xcc>
			printf("\r\nInvalid Input");
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <take_input_remote+0xf4>)
 8000ec6:	f000 f96f 	bl	80011a8 <printf>
			printf("\r\n");
 8000eca:	4804      	ldr	r0, [pc, #16]	; (8000edc <take_input_remote+0xd8>)
 8000ecc:	f000 f946 	bl	800115c <puts>
}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	0800234c 	.word	0x0800234c
 8000edc:	08002328 	.word	0x08002328
 8000ee0:	08002354 	.word	0x08002354
 8000ee4:	0800235c 	.word	0x0800235c
 8000ee8:	08002364 	.word	0x08002364
 8000eec:	0800236c 	.word	0x0800236c
 8000ef0:	08002408 	.word	0x08002408
 8000ef4:	20007ad0 	.word	0x20007ad0
 8000ef8:	08002410 	.word	0x08002410

08000efc <mode_print>:

void mode_print(){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	if(isRemote == 1){
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <mode_print+0x28>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d107      	bne.n	8000f18 <mode_print+0x1c>
			printf("\r\n%s","***REMOTE MODE ACTIVE***");
 8000f08:	4907      	ldr	r1, [pc, #28]	; (8000f28 <mode_print+0x2c>)
 8000f0a:	4808      	ldr	r0, [pc, #32]	; (8000f2c <mode_print+0x30>)
 8000f0c:	f000 f94c 	bl	80011a8 <printf>
			printf("\n\rAvailable User Commands\n\rNEXT - Show next song info\n\rPLAY - Play the song (LED on)\n\rPAUSE - Pause the song (LED flash)\n\rSTOP - Stop the song (LED off)\n\r");
 8000f10:	4807      	ldr	r0, [pc, #28]	; (8000f30 <mode_print+0x34>)
 8000f12:	f000 f949 	bl	80011a8 <printf>
		}else{
			 printf("\r\n%s\r\n","***MANUAL OVERRIDE MODE ACTIVE***");
	}
}
 8000f16:	e003      	b.n	8000f20 <mode_print+0x24>
			 printf("\r\n%s\r\n","***MANUAL OVERRIDE MODE ACTIVE***");
 8000f18:	4906      	ldr	r1, [pc, #24]	; (8000f34 <mode_print+0x38>)
 8000f1a:	4807      	ldr	r0, [pc, #28]	; (8000f38 <mode_print+0x3c>)
 8000f1c:	f000 f944 	bl	80011a8 <printf>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20007ad0 	.word	0x20007ad0
 8000f28:	08002420 	.word	0x08002420
 8000f2c:	080022e8 	.word	0x080022e8
 8000f30:	0800243c 	.word	0x0800243c
 8000f34:	080024d8 	.word	0x080024d8
 8000f38:	08002344 	.word	0x08002344

08000f3c <init_player>:

void init_player(){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
	init_systick();
 8000f42:	f000 f9b9 	bl	80012b8 <init_systick>
	//initialize the player
	while(0 == 0){
		if(isRemote == 1){
 8000f46:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <init_player+0x7c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d103      	bne.n	8000f56 <init_player+0x1a>
			take_input_remote(0);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ff58 	bl	8000e04 <take_input_remote>
 8000f54:	e7f7      	b.n	8000f46 <init_player+0xa>
		}else{
			if(lightState == 2){
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <init_player+0x80>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d119      	bne.n	8000f92 <init_player+0x56>
				int cnt = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
					while (cnt < 1000) {
 8000f62:	e011      	b.n	8000f88 <init_player+0x4c>
						cnt++;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3301      	adds	r3, #1
 8000f68:	607b      	str	r3, [r7, #4]
						delay_systick();
 8000f6a:	f000 f9d7 	bl	800131c <delay_systick>
						if (cnt == 1000) {
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f74:	d108      	bne.n	8000f88 <init_player+0x4c>
							LED_Toggle(EXTERN_LED);
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <init_player+0x84>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa8a 	bl	8000496 <LED_Toggle>
							PLAY_PAUSE_TOG = 0;
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <init_player+0x88>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
					while (cnt < 1000) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f8e:	dbe9      	blt.n	8000f64 <init_player+0x28>
 8000f90:	e7d9      	b.n	8000f46 <init_player+0xa>
					     }
					}
			}else if(lightState == 1){
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <init_player+0x80>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d106      	bne.n	8000fa8 <init_player+0x6c>
				LED_On(EXTERN_LED);
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <init_player+0x84>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fa4b 	bl	800043c <LED_On>
 8000fa6:	e7ce      	b.n	8000f46 <init_player+0xa>
			}else{
				LED_Off(EXTERN_LED);
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <init_player+0x84>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fa5a 	bl	8000468 <LED_Off>
		if(isRemote == 1){
 8000fb4:	e7c7      	b.n	8000f46 <init_player+0xa>
 8000fb6:	bf00      	nop
 8000fb8:	20007ad0 	.word	0x20007ad0
 8000fbc:	20007bd0 	.word	0x20007bd0
 8000fc0:	20007adc 	.word	0x20007adc
 8000fc4:	20007b4c 	.word	0x20007b4c

08000fc8 <USART2_IRQHandler>:
uint32_t buttonPressCount = 0;
uint32_t ticks = 0;
uint32_t lastButtonPressTime;

// Interrupt handler for USART2
void USART2_IRQHandler(void){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
    uint8_t ch = USART_Read(USART2);
 8000fce:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <USART2_IRQHandler+0x28>)
 8000fd0:	f7ff fc4e 	bl	8000870 <USART_Read>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
    BUFFER[0] = ch;
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <USART2_IRQHandler+0x2c>)
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	7013      	strb	r3, [r2, #0]
    printf("%c",ch);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f8d3 	bl	800118c <putchar>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40004400 	.word	0x40004400
 8000ff4:	20007b50 	.word	0x20007b50

08000ff8 <SysTick_Handler>:

// SysTick interrupt handler
void SysTick_Handler(void) {
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
    ticks++;  // Increment the counter on each SysTick interrupt
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Handler+0x18>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	4a03      	ldr	r2, [pc, #12]	; (8001010 <SysTick_Handler+0x18>)
 8001004:	6013      	str	r3, [r2, #0]
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	20007bd8 	.word	0x20007bd8

08001014 <EXTI15_10_IRQHandler>:

// EXTI15_10 interrupt handler
void EXTI15_10_IRQHandler(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
    // Toggle the isRemote variable and reset lightState
    isRemote = !isRemote;
 8001018:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <EXTI15_10_IRQHandler+0x3c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	bf0c      	ite	eq
 8001020:	2301      	moveq	r3, #1
 8001022:	2300      	movne	r3, #0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	461a      	mov	r2, r3
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <EXTI15_10_IRQHandler+0x3c>)
 800102a:	601a      	str	r2, [r3, #0]
    lightState = 0;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <EXTI15_10_IRQHandler+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
    LED_Off(EXTERN_LED);
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <EXTI15_10_IRQHandler+0x44>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa15 	bl	8000468 <LED_Off>
    mode_print();
 800103e:	f7ff ff5d 	bl	8000efc <mode_print>

    // Handle EXTI interrupt for GPIO_PIN_13
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001042:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001046:	f000 fc73 	bl	8001930 <HAL_GPIO_EXTI_IRQHandler>
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20007ad0 	.word	0x20007ad0
 8001054:	20007bd0 	.word	0x20007bd0
 8001058:	20007adc 	.word	0x20007adc

0800105c <EXTI9_5_IRQHandler>:

// EXTI9_5 interrupt handler
void EXTI9_5_IRQHandler(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
	printf("\r\n%s\r\n","new interrupt");
 8001062:	492d      	ldr	r1, [pc, #180]	; (8001118 <EXTI9_5_IRQHandler+0xbc>)
 8001064:	482d      	ldr	r0, [pc, #180]	; (800111c <EXTI9_5_IRQHandler+0xc0>)
 8001066:	f000 f89f 	bl	80011a8 <printf>
    // Initialize SysTick timer
    init_systick();
 800106a:	f000 f925 	bl	80012b8 <init_systick>

    // Increment buttonPressCount
    buttonPressCount++;
 800106e:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <EXTI9_5_IRQHandler+0xc4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	4a2a      	ldr	r2, [pc, #168]	; (8001120 <EXTI9_5_IRQHandler+0xc4>)
 8001076:	6013      	str	r3, [r2, #0]

    // Record the start time of the button press
    uint32_t startTime = ticks;
 8001078:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <EXTI9_5_IRQHandler+0xc8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60bb      	str	r3, [r7, #8]

    // Calculate time since the last button press
    uint32_t timeSinceLastPress = startTime - lastButtonPressTime;
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <EXTI9_5_IRQHandler+0xcc>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	607b      	str	r3, [r7, #4]

    // Update buttonPressCount based on time since last press
    if (timeSinceLastPress <= 1000) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800108e:	d805      	bhi.n	800109c <EXTI9_5_IRQHandler+0x40>
        buttonPressCount++;
 8001090:	4b23      	ldr	r3, [pc, #140]	; (8001120 <EXTI9_5_IRQHandler+0xc4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	4a22      	ldr	r2, [pc, #136]	; (8001120 <EXTI9_5_IRQHandler+0xc4>)
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	e002      	b.n	80010a2 <EXTI9_5_IRQHandler+0x46>
    } else {
        buttonPressCount = 1;
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <EXTI9_5_IRQHandler+0xc4>)
 800109e:	2201      	movs	r2, #1
 80010a0:	601a      	str	r2, [r3, #0]
    }

    // Update the last button press time
    lastButtonPressTime = startTime;
 80010a2:	4a21      	ldr	r2, [pc, #132]	; (8001128 <EXTI9_5_IRQHandler+0xcc>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	6013      	str	r3, [r2, #0]

    // Wait for the button to be released
    while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_SET) {
 80010a8:	bf00      	nop
 80010aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b2:	f000 fc25 	bl	8001900 <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d0f6      	beq.n	80010aa <EXTI9_5_IRQHandler+0x4e>
    }

    // Calculate elapsed time since the button press started
    uint32_t elapsed = ticks - startTime;
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <EXTI9_5_IRQHandler+0xc8>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	603b      	str	r3, [r7, #0]

    // Delay for a short period
    for(int i = 0; i < 1000; i++) {
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e004      	b.n	80010d6 <EXTI9_5_IRQHandler+0x7a>
        delay_systick();
 80010cc:	f000 f926 	bl	800131c <delay_systick>
    for(int i = 0; i < 1000; i++) {
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3301      	adds	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010dc:	dbf6      	blt.n	80010cc <EXTI9_5_IRQHandler+0x70>
    }

    // Handle different cases based on isRemote and elapsed time
    if (isRemote == 0) {
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <EXTI9_5_IRQHandler+0xd0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d110      	bne.n	8001108 <EXTI9_5_IRQHandler+0xac>
        if (elapsed > 1000) {
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ec:	d902      	bls.n	80010f4 <EXTI9_5_IRQHandler+0x98>
            stop_song();
 80010ee:	f7ff fdeb 	bl	8000cc8 <stop_song>
 80010f2:	e009      	b.n	8001108 <EXTI9_5_IRQHandler+0xac>
        } else {
            if (PLAY_PAUSE_TOG == 0) {
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <EXTI9_5_IRQHandler+0xd4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <EXTI9_5_IRQHandler+0xa6>
                play_song();
 80010fc:	f7ff fdce 	bl	8000c9c <play_song>
 8001100:	e002      	b.n	8001108 <EXTI9_5_IRQHandler+0xac>
            } else {
                lightState = 2;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <EXTI9_5_IRQHandler+0xd8>)
 8001104:	2202      	movs	r2, #2
 8001106:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Handle EXTI interrupt for S1_Pin
    HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8001108:	f44f 7000 	mov.w	r0, #512	; 0x200
 800110c:	f000 fc10 	bl	8001930 <HAL_GPIO_EXTI_IRQHandler>
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	080024fc 	.word	0x080024fc
 800111c:	0800250c 	.word	0x0800250c
 8001120:	20007bd4 	.word	0x20007bd4
 8001124:	20007bd8 	.word	0x20007bd8
 8001128:	20007bdc 	.word	0x20007bdc
 800112c:	20007ad0 	.word	0x20007ad0
 8001130:	20007b4c 	.word	0x20007b4c
 8001134:	20007bd0 	.word	0x20007bd0

08001138 <print_string>:
#include <stdio.h>
#include <stdarg.h>

static char buffer[128];

static void print_string (const char* string, int len) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
    USART_Write (USART2, (unsigned char*) string, len);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <print_string+0x20>)
 800114a:	f7ff fbbc 	bl	80008c6 <USART_Write>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40004400 	.word	0x40004400

0800115c <puts>:

int puts (const char* string){
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
    int len = strlen (string);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff f83d 	bl	80001e4 <strlen>
 800116a:	4603      	mov	r3, r0
 800116c:	60fb      	str	r3, [r7, #12]
    print_string (string, len);
 800116e:	68f9      	ldr	r1, [r7, #12]
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ffe1 	bl	8001138 <print_string>
    print_string ("\n", 1);
 8001176:	2101      	movs	r1, #1
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <puts+0x2c>)
 800117a:	f7ff ffdd 	bl	8001138 <print_string>
    return len;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	08002514 	.word	0x08002514

0800118c <putchar>:

int putchar (int chr){
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
    print_string ((char*)&chr, 1);
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	2101      	movs	r1, #1
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ffcd 	bl	8001138 <print_string>
    return chr;
 800119e:	687b      	ldr	r3, [r7, #4]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <printf>:

int printf (const char* format, ...) {
 80011a8:	b40f      	push	{r0, r1, r2, r3}
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
    va_list aptr;
    int ret;

    va_start(aptr, format);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	603b      	str	r3, [r7, #0]
    ret = vsprintf(buffer, format, aptr);
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	6939      	ldr	r1, [r7, #16]
 80011ba:	4808      	ldr	r0, [pc, #32]	; (80011dc <printf+0x34>)
 80011bc:	f000 fbf2 	bl	80019a4 <vsiprintf>
 80011c0:	6078      	str	r0, [r7, #4]
    va_end(aptr);
    print_string (buffer, ret);
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <printf+0x34>)
 80011c6:	f7ff ffb7 	bl	8001138 <print_string>

    return(ret);
 80011ca:	687b      	ldr	r3, [r7, #4]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011d6:	b004      	add	sp, #16
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20007be0 	.word	0x20007be0

080011e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e8:	4a14      	ldr	r2, [pc, #80]	; (800123c <_sbrk+0x5c>)
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <_sbrk+0x60>)
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <_sbrk+0x64>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <_sbrk+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d207      	bcs.n	8001220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001210:	f000 fbda 	bl	80019c8 <__errno>
 8001214:	4603      	mov	r3, r0
 8001216:	220c      	movs	r2, #12
 8001218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	e009      	b.n	8001234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <_sbrk+0x64>)
 8001230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20018000 	.word	0x20018000
 8001240:	00000400 	.word	0x00000400
 8001244:	20007c60 	.word	0x20007c60
 8001248:	20007e30 	.word	0x20007e30

0800124c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <SystemInit+0x64>)
 8001252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001256:	4a16      	ldr	r2, [pc, #88]	; (80012b0 <SystemInit+0x64>)
 8001258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <SystemInit+0x68>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <SystemInit+0x68>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <SystemInit+0x68>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <SystemInit+0x68>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <SystemInit+0x68>)
 8001278:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800127c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001280:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <SystemInit+0x68>)
 8001284:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001288:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <SystemInit+0x68>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <SystemInit+0x68>)
 8001290:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001294:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001296:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <SystemInit+0x68>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <SystemInit+0x64>)
 800129e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012a2:	609a      	str	r2, [r3, #8]
#endif
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00
 80012b4:	40021000 	.word	0x40021000

080012b8 <init_systick>:
	uint32_t CVR;
	uint32_t CALIB;
};
struct SYST* SYST_TICK = (struct SYST*) 0xE000E010;
// This function is to Initialize SysTick registers
struct SYST* init_systick(){
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
		//clear csr register
		SYST_TICK->CSR &= ~(1 << 0);;
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <init_systick+0x58>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <init_systick+0x58>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0201 	bic.w	r2, r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
	    // Set timer to 10 ms
	    SYST_TICK->RVR = 79999;
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <init_systick+0x58>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a10      	ldr	r2, [pc, #64]	; (8001314 <init_systick+0x5c>)
 80012d2:	605a      	str	r2, [r3, #4]
	    //Set to internal clock
	    SYST_TICK->CSR |= (1<<2); // Use pc source
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <init_systick+0x58>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <init_systick+0x58>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0204 	orr.w	r2, r2, #4
 80012e2:	601a      	str	r2, [r3, #0]
	    //Enable timer
	    SYST_TICK->CSR |= (1<<0); // Enable
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <init_systick+0x58>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <init_systick+0x58>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0201 	orr.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
	    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <init_systick+0x60>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <init_systick+0x60>)
 80012fa:	f043 0302 	orr.w	r3, r3, #2
 80012fe:	6013      	str	r3, [r2, #0]
	    return SYST_TICK;
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <init_systick+0x58>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20007ad8 	.word	0x20007ad8
 8001314:	0001387f 	.word	0x0001387f
 8001318:	e000e010 	.word	0xe000e010

0800131c <delay_systick>:

// This function is to create delay using SysTick timer counter
void delay_systick(){
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
		int x = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
		while(x == 0){
 8001326:	e007      	b.n	8001338 <delay_systick+0x1c>
			if ((SYST_TICK->CSR >> 16) == 1) {
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <delay_systick+0x30>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	0c1b      	lsrs	r3, r3, #16
 8001330:	2b01      	cmp	r3, #1
 8001332:	d101      	bne.n	8001338 <delay_systick+0x1c>
		         x = 1;
 8001334:	2301      	movs	r3, #1
 8001336:	607b      	str	r3, [r7, #4]
		while(x == 0){
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f4      	beq.n	8001328 <delay_systick+0xc>
			}
		}
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	20007ad8 	.word	0x20007ad8

08001350 <main>:
#include "stm32l4xx_hal.h"
#include "timer.h"

int EXTERN_LED = 6;

int main(void){
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	// initialization code
	System_Clock_Init(); // set System Clock = 80 MHz
 8001354:	f7ff f8b6 	bl	80004c4 <System_Clock_Init>
	UART2_Init ();
 8001358:	f7ff f992 	bl	8000680 <UART2_Init>
	LED_Init(EXTERN_LED);
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <main+0x30>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f80c 	bl	8000380 <LED_Init>
	init_syst();
 8001368:	f7ff fb00 	bl	800096c <init_syst>
	GPIO_Init();
 800136c:	f7fe ff98 	bl	80002a0 <GPIO_Init>
	mode_print();
 8001370:	f7ff fdc4 	bl	8000efc <mode_print>
	init_player();
 8001374:	f7ff fde2 	bl	8000f3c <init_player>
 8001378:	2300      	movs	r3, #0

}
 800137a:	4618      	mov	r0, r3
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20007adc 	.word	0x20007adc

08001384 <read_line>:
#include "LED.h"
#include "project.h"
static char BUER[128];


char* read_line(){
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
	//read one characterA
	//print that character on it's own line
	int index = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
	char ch = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	70fb      	strb	r3, [r7, #3]
	while(ch != '\r'){
 8001392:	e017      	b.n	80013c4 <read_line+0x40>
		if(isRemote == 0){
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <read_line+0x60>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d017      	beq.n	80013cc <read_line+0x48>
			break;
		}
		ch = (char)USART_Read_Nonblocking(USART2);
 800139c:	4812      	ldr	r0, [pc, #72]	; (80013e8 <read_line+0x64>)
 800139e:	f7ff fa7c 	bl	800089a <USART_Read_Nonblocking>
 80013a2:	4603      	mov	r3, r0
 80013a4:	70fb      	strb	r3, [r7, #3]
		if(ch != '\0'){
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <read_line+0x40>
			printf("%c",ch);
 80013ac:	78fb      	ldrb	r3, [r7, #3]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff feec 	bl	800118c <putchar>
			BUER[index] = ch;
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <read_line+0x68>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	78fa      	ldrb	r2, [r7, #3]
 80013bc:	701a      	strb	r2, [r3, #0]
			index++;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3301      	adds	r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
	while(ch != '\r'){
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	2b0d      	cmp	r3, #13
 80013c8:	d1e4      	bne.n	8001394 <read_line+0x10>
 80013ca:	e000      	b.n	80013ce <read_line+0x4a>
			break;
 80013cc:	bf00      	nop
		}
	}
	BUER[index - 1] = 0;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	4a06      	ldr	r2, [pc, #24]	; (80013ec <read_line+0x68>)
 80013d4:	2100      	movs	r1, #0
 80013d6:	54d1      	strb	r1, [r2, r3]
	return BUER;
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <read_line+0x68>)

}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20007ad0 	.word	0x20007ad0
 80013e8:	40004400 	.word	0x40004400
 80013ec:	20007c64 	.word	0x20007c64

080013f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001428 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f4:	f7ff ff2a 	bl	800124c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	480c      	ldr	r0, [pc, #48]	; (800142c <LoopForever+0x6>)
  ldr r1, =_edata
 80013fa:	490d      	ldr	r1, [pc, #52]	; (8001430 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <LoopForever+0xe>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001410:	4c0a      	ldr	r4, [pc, #40]	; (800143c <LoopForever+0x16>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141e:	f000 fad9 	bl	80019d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001422:	f7ff ff95 	bl	8001350 <main>

08001426 <LoopForever>:

LoopForever:
    b LoopForever
 8001426:	e7fe      	b.n	8001426 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001428:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800142c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001430:	20007b30 	.word	0x20007b30
  ldr r2, =_sidata
 8001434:	08002554 	.word	0x08002554
  ldr r2, =_sbss
 8001438:	20007b30 	.word	0x20007b30
  ldr r4, =_ebss
 800143c:	20007e2c 	.word	0x20007e2c

08001440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001440:	e7fe      	b.n	8001440 <ADC1_2_IRQHandler>
	...

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0b      	blt.n	800148a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	4907      	ldr	r1, [pc, #28]	; (8001498 <__NVIC_EnableIRQ+0x38>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000e100 	.word	0xe000e100

0800149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0a      	blt.n	80014c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <__NVIC_SetPriority+0x4c>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c4:	e00a      	b.n	80014dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <__NVIC_SetPriority+0x50>)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	3b04      	subs	r3, #4
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	440b      	add	r3, r1
 80014da:	761a      	strb	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
         );
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001568:	f7ff ff6c 	bl	8001444 <__NVIC_GetPriorityGrouping>
 800156c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	6978      	ldr	r0, [r7, #20]
 8001574:	f7ff ffbc 	bl	80014f0 <NVIC_EncodePriority>
 8001578:	4602      	mov	r2, r0
 800157a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff8b 	bl	800149c <__NVIC_SetPriority>
}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff5f 	bl	8001460 <__NVIC_EnableIRQ>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ba:	e17f      	b.n	80018bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2101      	movs	r1, #1
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	fa01 f303 	lsl.w	r3, r1, r3
 80015c8:	4013      	ands	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 8171 	beq.w	80018b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d005      	beq.n	80015ec <HAL_GPIO_Init+0x40>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d130      	bne.n	800164e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001622:	2201      	movs	r2, #1
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	091b      	lsrs	r3, r3, #4
 8001638:	f003 0201 	and.w	r2, r3, #1
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	2b03      	cmp	r3, #3
 8001658:	d118      	bne.n	800168c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001660:	2201      	movs	r2, #1
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	08db      	lsrs	r3, r3, #3
 8001676:	f003 0201 	and.w	r2, r3, #1
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	2b03      	cmp	r3, #3
 8001696:	d017      	beq.n	80016c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d123      	bne.n	800171c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	08da      	lsrs	r2, r3, #3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3208      	adds	r2, #8
 80016dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	08da      	lsrs	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3208      	adds	r2, #8
 8001716:	6939      	ldr	r1, [r7, #16]
 8001718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0203 	and.w	r2, r3, #3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80ac 	beq.w	80018b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	4b5f      	ldr	r3, [pc, #380]	; (80018dc <HAL_GPIO_Init+0x330>)
 8001760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001762:	4a5e      	ldr	r2, [pc, #376]	; (80018dc <HAL_GPIO_Init+0x330>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6613      	str	r3, [r2, #96]	; 0x60
 800176a:	4b5c      	ldr	r3, [pc, #368]	; (80018dc <HAL_GPIO_Init+0x330>)
 800176c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001776:	4a5a      	ldr	r2, [pc, #360]	; (80018e0 <HAL_GPIO_Init+0x334>)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017a0:	d025      	beq.n	80017ee <HAL_GPIO_Init+0x242>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4f      	ldr	r2, [pc, #316]	; (80018e4 <HAL_GPIO_Init+0x338>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d01f      	beq.n	80017ea <HAL_GPIO_Init+0x23e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4e      	ldr	r2, [pc, #312]	; (80018e8 <HAL_GPIO_Init+0x33c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d019      	beq.n	80017e6 <HAL_GPIO_Init+0x23a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4d      	ldr	r2, [pc, #308]	; (80018ec <HAL_GPIO_Init+0x340>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d013      	beq.n	80017e2 <HAL_GPIO_Init+0x236>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4c      	ldr	r2, [pc, #304]	; (80018f0 <HAL_GPIO_Init+0x344>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00d      	beq.n	80017de <HAL_GPIO_Init+0x232>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4b      	ldr	r2, [pc, #300]	; (80018f4 <HAL_GPIO_Init+0x348>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d007      	beq.n	80017da <HAL_GPIO_Init+0x22e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4a      	ldr	r2, [pc, #296]	; (80018f8 <HAL_GPIO_Init+0x34c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d101      	bne.n	80017d6 <HAL_GPIO_Init+0x22a>
 80017d2:	2306      	movs	r3, #6
 80017d4:	e00c      	b.n	80017f0 <HAL_GPIO_Init+0x244>
 80017d6:	2307      	movs	r3, #7
 80017d8:	e00a      	b.n	80017f0 <HAL_GPIO_Init+0x244>
 80017da:	2305      	movs	r3, #5
 80017dc:	e008      	b.n	80017f0 <HAL_GPIO_Init+0x244>
 80017de:	2304      	movs	r3, #4
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x244>
 80017e2:	2303      	movs	r3, #3
 80017e4:	e004      	b.n	80017f0 <HAL_GPIO_Init+0x244>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e002      	b.n	80017f0 <HAL_GPIO_Init+0x244>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <HAL_GPIO_Init+0x244>
 80017ee:	2300      	movs	r3, #0
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	f002 0203 	and.w	r2, r2, #3
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	4093      	lsls	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001800:	4937      	ldr	r1, [pc, #220]	; (80018e0 <HAL_GPIO_Init+0x334>)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800180e:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_GPIO_Init+0x350>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001832:	4a32      	ldr	r2, [pc, #200]	; (80018fc <HAL_GPIO_Init+0x350>)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001838:	4b30      	ldr	r3, [pc, #192]	; (80018fc <HAL_GPIO_Init+0x350>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800185c:	4a27      	ldr	r2, [pc, #156]	; (80018fc <HAL_GPIO_Init+0x350>)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_GPIO_Init+0x350>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001886:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <HAL_GPIO_Init+0x350>)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800188c:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <HAL_GPIO_Init+0x350>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <HAL_GPIO_Init+0x350>)
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	3301      	adds	r3, #1
 80018ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f47f ae78 	bne.w	80015bc <HAL_GPIO_Init+0x10>
  }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	371c      	adds	r7, #28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40010000 	.word	0x40010000
 80018e4:	48000400 	.word	0x48000400
 80018e8:	48000800 	.word	0x48000800
 80018ec:	48000c00 	.word	0x48000c00
 80018f0:	48001000 	.word	0x48001000
 80018f4:	48001400 	.word	0x48001400
 80018f8:	48001800 	.word	0x48001800
 80018fc:	40010400 	.word	0x40010400

08001900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691a      	ldr	r2, [r3, #16]
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e001      	b.n	8001922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	80fb      	strh	r3, [r7, #6]

  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	4013      	ands	r3, r2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f806 	bl	8001960 <HAL_GPIO_EXTI_Callback>
  }
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40010400 	.word	0x40010400

08001960 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <_vsiprintf_r>:
 8001978:	b500      	push	{lr}
 800197a:	b09b      	sub	sp, #108	; 0x6c
 800197c:	9100      	str	r1, [sp, #0]
 800197e:	9104      	str	r1, [sp, #16]
 8001980:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001984:	9105      	str	r1, [sp, #20]
 8001986:	9102      	str	r1, [sp, #8]
 8001988:	4905      	ldr	r1, [pc, #20]	; (80019a0 <_vsiprintf_r+0x28>)
 800198a:	9103      	str	r1, [sp, #12]
 800198c:	4669      	mov	r1, sp
 800198e:	f000 f999 	bl	8001cc4 <_svfiprintf_r>
 8001992:	9b00      	ldr	r3, [sp, #0]
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	b01b      	add	sp, #108	; 0x6c
 800199a:	f85d fb04 	ldr.w	pc, [sp], #4
 800199e:	bf00      	nop
 80019a0:	ffff0208 	.word	0xffff0208

080019a4 <vsiprintf>:
 80019a4:	4613      	mov	r3, r2
 80019a6:	460a      	mov	r2, r1
 80019a8:	4601      	mov	r1, r0
 80019aa:	4802      	ldr	r0, [pc, #8]	; (80019b4 <vsiprintf+0x10>)
 80019ac:	6800      	ldr	r0, [r0, #0]
 80019ae:	f7ff bfe3 	b.w	8001978 <_vsiprintf_r>
 80019b2:	bf00      	nop
 80019b4:	20007b2c 	.word	0x20007b2c

080019b8 <memset>:
 80019b8:	4402      	add	r2, r0
 80019ba:	4603      	mov	r3, r0
 80019bc:	4293      	cmp	r3, r2
 80019be:	d100      	bne.n	80019c2 <memset+0xa>
 80019c0:	4770      	bx	lr
 80019c2:	f803 1b01 	strb.w	r1, [r3], #1
 80019c6:	e7f9      	b.n	80019bc <memset+0x4>

080019c8 <__errno>:
 80019c8:	4b01      	ldr	r3, [pc, #4]	; (80019d0 <__errno+0x8>)
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20007b2c 	.word	0x20007b2c

080019d4 <__libc_init_array>:
 80019d4:	b570      	push	{r4, r5, r6, lr}
 80019d6:	4d0d      	ldr	r5, [pc, #52]	; (8001a0c <__libc_init_array+0x38>)
 80019d8:	4c0d      	ldr	r4, [pc, #52]	; (8001a10 <__libc_init_array+0x3c>)
 80019da:	1b64      	subs	r4, r4, r5
 80019dc:	10a4      	asrs	r4, r4, #2
 80019de:	2600      	movs	r6, #0
 80019e0:	42a6      	cmp	r6, r4
 80019e2:	d109      	bne.n	80019f8 <__libc_init_array+0x24>
 80019e4:	4d0b      	ldr	r5, [pc, #44]	; (8001a14 <__libc_init_array+0x40>)
 80019e6:	4c0c      	ldr	r4, [pc, #48]	; (8001a18 <__libc_init_array+0x44>)
 80019e8:	f000 fc6a 	bl	80022c0 <_init>
 80019ec:	1b64      	subs	r4, r4, r5
 80019ee:	10a4      	asrs	r4, r4, #2
 80019f0:	2600      	movs	r6, #0
 80019f2:	42a6      	cmp	r6, r4
 80019f4:	d105      	bne.n	8001a02 <__libc_init_array+0x2e>
 80019f6:	bd70      	pop	{r4, r5, r6, pc}
 80019f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80019fc:	4798      	blx	r3
 80019fe:	3601      	adds	r6, #1
 8001a00:	e7ee      	b.n	80019e0 <__libc_init_array+0xc>
 8001a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a06:	4798      	blx	r3
 8001a08:	3601      	adds	r6, #1
 8001a0a:	e7f2      	b.n	80019f2 <__libc_init_array+0x1e>
 8001a0c:	0800254c 	.word	0x0800254c
 8001a10:	0800254c 	.word	0x0800254c
 8001a14:	0800254c 	.word	0x0800254c
 8001a18:	08002550 	.word	0x08002550

08001a1c <__retarget_lock_acquire_recursive>:
 8001a1c:	4770      	bx	lr

08001a1e <__retarget_lock_release_recursive>:
 8001a1e:	4770      	bx	lr

08001a20 <_free_r>:
 8001a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001a22:	2900      	cmp	r1, #0
 8001a24:	d044      	beq.n	8001ab0 <_free_r+0x90>
 8001a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a2a:	9001      	str	r0, [sp, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8001a32:	bfb8      	it	lt
 8001a34:	18e4      	addlt	r4, r4, r3
 8001a36:	f000 f8df 	bl	8001bf8 <__malloc_lock>
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <_free_r+0x94>)
 8001a3c:	9801      	ldr	r0, [sp, #4]
 8001a3e:	6813      	ldr	r3, [r2, #0]
 8001a40:	b933      	cbnz	r3, 8001a50 <_free_r+0x30>
 8001a42:	6063      	str	r3, [r4, #4]
 8001a44:	6014      	str	r4, [r2, #0]
 8001a46:	b003      	add	sp, #12
 8001a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001a4c:	f000 b8da 	b.w	8001c04 <__malloc_unlock>
 8001a50:	42a3      	cmp	r3, r4
 8001a52:	d908      	bls.n	8001a66 <_free_r+0x46>
 8001a54:	6825      	ldr	r5, [r4, #0]
 8001a56:	1961      	adds	r1, r4, r5
 8001a58:	428b      	cmp	r3, r1
 8001a5a:	bf01      	itttt	eq
 8001a5c:	6819      	ldreq	r1, [r3, #0]
 8001a5e:	685b      	ldreq	r3, [r3, #4]
 8001a60:	1949      	addeq	r1, r1, r5
 8001a62:	6021      	streq	r1, [r4, #0]
 8001a64:	e7ed      	b.n	8001a42 <_free_r+0x22>
 8001a66:	461a      	mov	r2, r3
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	b10b      	cbz	r3, 8001a70 <_free_r+0x50>
 8001a6c:	42a3      	cmp	r3, r4
 8001a6e:	d9fa      	bls.n	8001a66 <_free_r+0x46>
 8001a70:	6811      	ldr	r1, [r2, #0]
 8001a72:	1855      	adds	r5, r2, r1
 8001a74:	42a5      	cmp	r5, r4
 8001a76:	d10b      	bne.n	8001a90 <_free_r+0x70>
 8001a78:	6824      	ldr	r4, [r4, #0]
 8001a7a:	4421      	add	r1, r4
 8001a7c:	1854      	adds	r4, r2, r1
 8001a7e:	42a3      	cmp	r3, r4
 8001a80:	6011      	str	r1, [r2, #0]
 8001a82:	d1e0      	bne.n	8001a46 <_free_r+0x26>
 8001a84:	681c      	ldr	r4, [r3, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	6053      	str	r3, [r2, #4]
 8001a8a:	440c      	add	r4, r1
 8001a8c:	6014      	str	r4, [r2, #0]
 8001a8e:	e7da      	b.n	8001a46 <_free_r+0x26>
 8001a90:	d902      	bls.n	8001a98 <_free_r+0x78>
 8001a92:	230c      	movs	r3, #12
 8001a94:	6003      	str	r3, [r0, #0]
 8001a96:	e7d6      	b.n	8001a46 <_free_r+0x26>
 8001a98:	6825      	ldr	r5, [r4, #0]
 8001a9a:	1961      	adds	r1, r4, r5
 8001a9c:	428b      	cmp	r3, r1
 8001a9e:	bf04      	itt	eq
 8001aa0:	6819      	ldreq	r1, [r3, #0]
 8001aa2:	685b      	ldreq	r3, [r3, #4]
 8001aa4:	6063      	str	r3, [r4, #4]
 8001aa6:	bf04      	itt	eq
 8001aa8:	1949      	addeq	r1, r1, r5
 8001aaa:	6021      	streq	r1, [r4, #0]
 8001aac:	6054      	str	r4, [r2, #4]
 8001aae:	e7ca      	b.n	8001a46 <_free_r+0x26>
 8001ab0:	b003      	add	sp, #12
 8001ab2:	bd30      	pop	{r4, r5, pc}
 8001ab4:	20007e24 	.word	0x20007e24

08001ab8 <sbrk_aligned>:
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	4e0e      	ldr	r6, [pc, #56]	; (8001af4 <sbrk_aligned+0x3c>)
 8001abc:	460c      	mov	r4, r1
 8001abe:	6831      	ldr	r1, [r6, #0]
 8001ac0:	4605      	mov	r5, r0
 8001ac2:	b911      	cbnz	r1, 8001aca <sbrk_aligned+0x12>
 8001ac4:	f000 fba6 	bl	8002214 <_sbrk_r>
 8001ac8:	6030      	str	r0, [r6, #0]
 8001aca:	4621      	mov	r1, r4
 8001acc:	4628      	mov	r0, r5
 8001ace:	f000 fba1 	bl	8002214 <_sbrk_r>
 8001ad2:	1c43      	adds	r3, r0, #1
 8001ad4:	d00a      	beq.n	8001aec <sbrk_aligned+0x34>
 8001ad6:	1cc4      	adds	r4, r0, #3
 8001ad8:	f024 0403 	bic.w	r4, r4, #3
 8001adc:	42a0      	cmp	r0, r4
 8001ade:	d007      	beq.n	8001af0 <sbrk_aligned+0x38>
 8001ae0:	1a21      	subs	r1, r4, r0
 8001ae2:	4628      	mov	r0, r5
 8001ae4:	f000 fb96 	bl	8002214 <_sbrk_r>
 8001ae8:	3001      	adds	r0, #1
 8001aea:	d101      	bne.n	8001af0 <sbrk_aligned+0x38>
 8001aec:	f04f 34ff 	mov.w	r4, #4294967295
 8001af0:	4620      	mov	r0, r4
 8001af2:	bd70      	pop	{r4, r5, r6, pc}
 8001af4:	20007e28 	.word	0x20007e28

08001af8 <_malloc_r>:
 8001af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001afc:	1ccd      	adds	r5, r1, #3
 8001afe:	f025 0503 	bic.w	r5, r5, #3
 8001b02:	3508      	adds	r5, #8
 8001b04:	2d0c      	cmp	r5, #12
 8001b06:	bf38      	it	cc
 8001b08:	250c      	movcc	r5, #12
 8001b0a:	2d00      	cmp	r5, #0
 8001b0c:	4607      	mov	r7, r0
 8001b0e:	db01      	blt.n	8001b14 <_malloc_r+0x1c>
 8001b10:	42a9      	cmp	r1, r5
 8001b12:	d905      	bls.n	8001b20 <_malloc_r+0x28>
 8001b14:	230c      	movs	r3, #12
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	2600      	movs	r6, #0
 8001b1a:	4630      	mov	r0, r6
 8001b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b20:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001bf4 <_malloc_r+0xfc>
 8001b24:	f000 f868 	bl	8001bf8 <__malloc_lock>
 8001b28:	f8d8 3000 	ldr.w	r3, [r8]
 8001b2c:	461c      	mov	r4, r3
 8001b2e:	bb5c      	cbnz	r4, 8001b88 <_malloc_r+0x90>
 8001b30:	4629      	mov	r1, r5
 8001b32:	4638      	mov	r0, r7
 8001b34:	f7ff ffc0 	bl	8001ab8 <sbrk_aligned>
 8001b38:	1c43      	adds	r3, r0, #1
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	d155      	bne.n	8001bea <_malloc_r+0xf2>
 8001b3e:	f8d8 4000 	ldr.w	r4, [r8]
 8001b42:	4626      	mov	r6, r4
 8001b44:	2e00      	cmp	r6, #0
 8001b46:	d145      	bne.n	8001bd4 <_malloc_r+0xdc>
 8001b48:	2c00      	cmp	r4, #0
 8001b4a:	d048      	beq.n	8001bde <_malloc_r+0xe6>
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	4631      	mov	r1, r6
 8001b50:	4638      	mov	r0, r7
 8001b52:	eb04 0903 	add.w	r9, r4, r3
 8001b56:	f000 fb5d 	bl	8002214 <_sbrk_r>
 8001b5a:	4581      	cmp	r9, r0
 8001b5c:	d13f      	bne.n	8001bde <_malloc_r+0xe6>
 8001b5e:	6821      	ldr	r1, [r4, #0]
 8001b60:	1a6d      	subs	r5, r5, r1
 8001b62:	4629      	mov	r1, r5
 8001b64:	4638      	mov	r0, r7
 8001b66:	f7ff ffa7 	bl	8001ab8 <sbrk_aligned>
 8001b6a:	3001      	adds	r0, #1
 8001b6c:	d037      	beq.n	8001bde <_malloc_r+0xe6>
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	442b      	add	r3, r5
 8001b72:	6023      	str	r3, [r4, #0]
 8001b74:	f8d8 3000 	ldr.w	r3, [r8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d038      	beq.n	8001bee <_malloc_r+0xf6>
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	42a2      	cmp	r2, r4
 8001b80:	d12b      	bne.n	8001bda <_malloc_r+0xe2>
 8001b82:	2200      	movs	r2, #0
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	e00f      	b.n	8001ba8 <_malloc_r+0xb0>
 8001b88:	6822      	ldr	r2, [r4, #0]
 8001b8a:	1b52      	subs	r2, r2, r5
 8001b8c:	d41f      	bmi.n	8001bce <_malloc_r+0xd6>
 8001b8e:	2a0b      	cmp	r2, #11
 8001b90:	d917      	bls.n	8001bc2 <_malloc_r+0xca>
 8001b92:	1961      	adds	r1, r4, r5
 8001b94:	42a3      	cmp	r3, r4
 8001b96:	6025      	str	r5, [r4, #0]
 8001b98:	bf18      	it	ne
 8001b9a:	6059      	strne	r1, [r3, #4]
 8001b9c:	6863      	ldr	r3, [r4, #4]
 8001b9e:	bf08      	it	eq
 8001ba0:	f8c8 1000 	streq.w	r1, [r8]
 8001ba4:	5162      	str	r2, [r4, r5]
 8001ba6:	604b      	str	r3, [r1, #4]
 8001ba8:	4638      	mov	r0, r7
 8001baa:	f104 060b 	add.w	r6, r4, #11
 8001bae:	f000 f829 	bl	8001c04 <__malloc_unlock>
 8001bb2:	f026 0607 	bic.w	r6, r6, #7
 8001bb6:	1d23      	adds	r3, r4, #4
 8001bb8:	1af2      	subs	r2, r6, r3
 8001bba:	d0ae      	beq.n	8001b1a <_malloc_r+0x22>
 8001bbc:	1b9b      	subs	r3, r3, r6
 8001bbe:	50a3      	str	r3, [r4, r2]
 8001bc0:	e7ab      	b.n	8001b1a <_malloc_r+0x22>
 8001bc2:	42a3      	cmp	r3, r4
 8001bc4:	6862      	ldr	r2, [r4, #4]
 8001bc6:	d1dd      	bne.n	8001b84 <_malloc_r+0x8c>
 8001bc8:	f8c8 2000 	str.w	r2, [r8]
 8001bcc:	e7ec      	b.n	8001ba8 <_malloc_r+0xb0>
 8001bce:	4623      	mov	r3, r4
 8001bd0:	6864      	ldr	r4, [r4, #4]
 8001bd2:	e7ac      	b.n	8001b2e <_malloc_r+0x36>
 8001bd4:	4634      	mov	r4, r6
 8001bd6:	6876      	ldr	r6, [r6, #4]
 8001bd8:	e7b4      	b.n	8001b44 <_malloc_r+0x4c>
 8001bda:	4613      	mov	r3, r2
 8001bdc:	e7cc      	b.n	8001b78 <_malloc_r+0x80>
 8001bde:	230c      	movs	r3, #12
 8001be0:	603b      	str	r3, [r7, #0]
 8001be2:	4638      	mov	r0, r7
 8001be4:	f000 f80e 	bl	8001c04 <__malloc_unlock>
 8001be8:	e797      	b.n	8001b1a <_malloc_r+0x22>
 8001bea:	6025      	str	r5, [r4, #0]
 8001bec:	e7dc      	b.n	8001ba8 <_malloc_r+0xb0>
 8001bee:	605b      	str	r3, [r3, #4]
 8001bf0:	deff      	udf	#255	; 0xff
 8001bf2:	bf00      	nop
 8001bf4:	20007e24 	.word	0x20007e24

08001bf8 <__malloc_lock>:
 8001bf8:	4801      	ldr	r0, [pc, #4]	; (8001c00 <__malloc_lock+0x8>)
 8001bfa:	f7ff bf0f 	b.w	8001a1c <__retarget_lock_acquire_recursive>
 8001bfe:	bf00      	nop
 8001c00:	20007e20 	.word	0x20007e20

08001c04 <__malloc_unlock>:
 8001c04:	4801      	ldr	r0, [pc, #4]	; (8001c0c <__malloc_unlock+0x8>)
 8001c06:	f7ff bf0a 	b.w	8001a1e <__retarget_lock_release_recursive>
 8001c0a:	bf00      	nop
 8001c0c:	20007e20 	.word	0x20007e20

08001c10 <__ssputs_r>:
 8001c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c14:	688e      	ldr	r6, [r1, #8]
 8001c16:	461f      	mov	r7, r3
 8001c18:	42be      	cmp	r6, r7
 8001c1a:	680b      	ldr	r3, [r1, #0]
 8001c1c:	4682      	mov	sl, r0
 8001c1e:	460c      	mov	r4, r1
 8001c20:	4690      	mov	r8, r2
 8001c22:	d82c      	bhi.n	8001c7e <__ssputs_r+0x6e>
 8001c24:	898a      	ldrh	r2, [r1, #12]
 8001c26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001c2a:	d026      	beq.n	8001c7a <__ssputs_r+0x6a>
 8001c2c:	6965      	ldr	r5, [r4, #20]
 8001c2e:	6909      	ldr	r1, [r1, #16]
 8001c30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c34:	eba3 0901 	sub.w	r9, r3, r1
 8001c38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001c3c:	1c7b      	adds	r3, r7, #1
 8001c3e:	444b      	add	r3, r9
 8001c40:	106d      	asrs	r5, r5, #1
 8001c42:	429d      	cmp	r5, r3
 8001c44:	bf38      	it	cc
 8001c46:	461d      	movcc	r5, r3
 8001c48:	0553      	lsls	r3, r2, #21
 8001c4a:	d527      	bpl.n	8001c9c <__ssputs_r+0x8c>
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	f7ff ff53 	bl	8001af8 <_malloc_r>
 8001c52:	4606      	mov	r6, r0
 8001c54:	b360      	cbz	r0, 8001cb0 <__ssputs_r+0xa0>
 8001c56:	6921      	ldr	r1, [r4, #16]
 8001c58:	464a      	mov	r2, r9
 8001c5a:	f000 faeb 	bl	8002234 <memcpy>
 8001c5e:	89a3      	ldrh	r3, [r4, #12]
 8001c60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c68:	81a3      	strh	r3, [r4, #12]
 8001c6a:	6126      	str	r6, [r4, #16]
 8001c6c:	6165      	str	r5, [r4, #20]
 8001c6e:	444e      	add	r6, r9
 8001c70:	eba5 0509 	sub.w	r5, r5, r9
 8001c74:	6026      	str	r6, [r4, #0]
 8001c76:	60a5      	str	r5, [r4, #8]
 8001c78:	463e      	mov	r6, r7
 8001c7a:	42be      	cmp	r6, r7
 8001c7c:	d900      	bls.n	8001c80 <__ssputs_r+0x70>
 8001c7e:	463e      	mov	r6, r7
 8001c80:	6820      	ldr	r0, [r4, #0]
 8001c82:	4632      	mov	r2, r6
 8001c84:	4641      	mov	r1, r8
 8001c86:	f000 faab 	bl	80021e0 <memmove>
 8001c8a:	68a3      	ldr	r3, [r4, #8]
 8001c8c:	1b9b      	subs	r3, r3, r6
 8001c8e:	60a3      	str	r3, [r4, #8]
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	4433      	add	r3, r6
 8001c94:	6023      	str	r3, [r4, #0]
 8001c96:	2000      	movs	r0, #0
 8001c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c9c:	462a      	mov	r2, r5
 8001c9e:	f000 fad7 	bl	8002250 <_realloc_r>
 8001ca2:	4606      	mov	r6, r0
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d1e0      	bne.n	8001c6a <__ssputs_r+0x5a>
 8001ca8:	6921      	ldr	r1, [r4, #16]
 8001caa:	4650      	mov	r0, sl
 8001cac:	f7ff feb8 	bl	8001a20 <_free_r>
 8001cb0:	230c      	movs	r3, #12
 8001cb2:	f8ca 3000 	str.w	r3, [sl]
 8001cb6:	89a3      	ldrh	r3, [r4, #12]
 8001cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cbc:	81a3      	strh	r3, [r4, #12]
 8001cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc2:	e7e9      	b.n	8001c98 <__ssputs_r+0x88>

08001cc4 <_svfiprintf_r>:
 8001cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc8:	4698      	mov	r8, r3
 8001cca:	898b      	ldrh	r3, [r1, #12]
 8001ccc:	061b      	lsls	r3, r3, #24
 8001cce:	b09d      	sub	sp, #116	; 0x74
 8001cd0:	4607      	mov	r7, r0
 8001cd2:	460d      	mov	r5, r1
 8001cd4:	4614      	mov	r4, r2
 8001cd6:	d50e      	bpl.n	8001cf6 <_svfiprintf_r+0x32>
 8001cd8:	690b      	ldr	r3, [r1, #16]
 8001cda:	b963      	cbnz	r3, 8001cf6 <_svfiprintf_r+0x32>
 8001cdc:	2140      	movs	r1, #64	; 0x40
 8001cde:	f7ff ff0b 	bl	8001af8 <_malloc_r>
 8001ce2:	6028      	str	r0, [r5, #0]
 8001ce4:	6128      	str	r0, [r5, #16]
 8001ce6:	b920      	cbnz	r0, 8001cf2 <_svfiprintf_r+0x2e>
 8001ce8:	230c      	movs	r3, #12
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	e0d0      	b.n	8001e94 <_svfiprintf_r+0x1d0>
 8001cf2:	2340      	movs	r3, #64	; 0x40
 8001cf4:	616b      	str	r3, [r5, #20]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d00:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d04:	2330      	movs	r3, #48	; 0x30
 8001d06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001eac <_svfiprintf_r+0x1e8>
 8001d0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d0e:	f04f 0901 	mov.w	r9, #1
 8001d12:	4623      	mov	r3, r4
 8001d14:	469a      	mov	sl, r3
 8001d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d1a:	b10a      	cbz	r2, 8001d20 <_svfiprintf_r+0x5c>
 8001d1c:	2a25      	cmp	r2, #37	; 0x25
 8001d1e:	d1f9      	bne.n	8001d14 <_svfiprintf_r+0x50>
 8001d20:	ebba 0b04 	subs.w	fp, sl, r4
 8001d24:	d00b      	beq.n	8001d3e <_svfiprintf_r+0x7a>
 8001d26:	465b      	mov	r3, fp
 8001d28:	4622      	mov	r2, r4
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	4638      	mov	r0, r7
 8001d2e:	f7ff ff6f 	bl	8001c10 <__ssputs_r>
 8001d32:	3001      	adds	r0, #1
 8001d34:	f000 80a9 	beq.w	8001e8a <_svfiprintf_r+0x1c6>
 8001d38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d3a:	445a      	add	r2, fp
 8001d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8001d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80a1 	beq.w	8001e8a <_svfiprintf_r+0x1c6>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d52:	f10a 0a01 	add.w	sl, sl, #1
 8001d56:	9304      	str	r3, [sp, #16]
 8001d58:	9307      	str	r3, [sp, #28]
 8001d5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d5e:	931a      	str	r3, [sp, #104]	; 0x68
 8001d60:	4654      	mov	r4, sl
 8001d62:	2205      	movs	r2, #5
 8001d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d68:	4850      	ldr	r0, [pc, #320]	; (8001eac <_svfiprintf_r+0x1e8>)
 8001d6a:	f7fe fa49 	bl	8000200 <memchr>
 8001d6e:	9a04      	ldr	r2, [sp, #16]
 8001d70:	b9d8      	cbnz	r0, 8001daa <_svfiprintf_r+0xe6>
 8001d72:	06d0      	lsls	r0, r2, #27
 8001d74:	bf44      	itt	mi
 8001d76:	2320      	movmi	r3, #32
 8001d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d7c:	0711      	lsls	r1, r2, #28
 8001d7e:	bf44      	itt	mi
 8001d80:	232b      	movmi	r3, #43	; 0x2b
 8001d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d86:	f89a 3000 	ldrb.w	r3, [sl]
 8001d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8001d8c:	d015      	beq.n	8001dba <_svfiprintf_r+0xf6>
 8001d8e:	9a07      	ldr	r2, [sp, #28]
 8001d90:	4654      	mov	r4, sl
 8001d92:	2000      	movs	r0, #0
 8001d94:	f04f 0c0a 	mov.w	ip, #10
 8001d98:	4621      	mov	r1, r4
 8001d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d9e:	3b30      	subs	r3, #48	; 0x30
 8001da0:	2b09      	cmp	r3, #9
 8001da2:	d94d      	bls.n	8001e40 <_svfiprintf_r+0x17c>
 8001da4:	b1b0      	cbz	r0, 8001dd4 <_svfiprintf_r+0x110>
 8001da6:	9207      	str	r2, [sp, #28]
 8001da8:	e014      	b.n	8001dd4 <_svfiprintf_r+0x110>
 8001daa:	eba0 0308 	sub.w	r3, r0, r8
 8001dae:	fa09 f303 	lsl.w	r3, r9, r3
 8001db2:	4313      	orrs	r3, r2
 8001db4:	9304      	str	r3, [sp, #16]
 8001db6:	46a2      	mov	sl, r4
 8001db8:	e7d2      	b.n	8001d60 <_svfiprintf_r+0x9c>
 8001dba:	9b03      	ldr	r3, [sp, #12]
 8001dbc:	1d19      	adds	r1, r3, #4
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	9103      	str	r1, [sp, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	bfbb      	ittet	lt
 8001dc6:	425b      	neglt	r3, r3
 8001dc8:	f042 0202 	orrlt.w	r2, r2, #2
 8001dcc:	9307      	strge	r3, [sp, #28]
 8001dce:	9307      	strlt	r3, [sp, #28]
 8001dd0:	bfb8      	it	lt
 8001dd2:	9204      	strlt	r2, [sp, #16]
 8001dd4:	7823      	ldrb	r3, [r4, #0]
 8001dd6:	2b2e      	cmp	r3, #46	; 0x2e
 8001dd8:	d10c      	bne.n	8001df4 <_svfiprintf_r+0x130>
 8001dda:	7863      	ldrb	r3, [r4, #1]
 8001ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8001dde:	d134      	bne.n	8001e4a <_svfiprintf_r+0x186>
 8001de0:	9b03      	ldr	r3, [sp, #12]
 8001de2:	1d1a      	adds	r2, r3, #4
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	9203      	str	r2, [sp, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bfb8      	it	lt
 8001dec:	f04f 33ff 	movlt.w	r3, #4294967295
 8001df0:	3402      	adds	r4, #2
 8001df2:	9305      	str	r3, [sp, #20]
 8001df4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001ebc <_svfiprintf_r+0x1f8>
 8001df8:	7821      	ldrb	r1, [r4, #0]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	4650      	mov	r0, sl
 8001dfe:	f7fe f9ff 	bl	8000200 <memchr>
 8001e02:	b138      	cbz	r0, 8001e14 <_svfiprintf_r+0x150>
 8001e04:	9b04      	ldr	r3, [sp, #16]
 8001e06:	eba0 000a 	sub.w	r0, r0, sl
 8001e0a:	2240      	movs	r2, #64	; 0x40
 8001e0c:	4082      	lsls	r2, r0
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	3401      	adds	r4, #1
 8001e12:	9304      	str	r3, [sp, #16]
 8001e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e18:	4825      	ldr	r0, [pc, #148]	; (8001eb0 <_svfiprintf_r+0x1ec>)
 8001e1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e1e:	2206      	movs	r2, #6
 8001e20:	f7fe f9ee 	bl	8000200 <memchr>
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d038      	beq.n	8001e9a <_svfiprintf_r+0x1d6>
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <_svfiprintf_r+0x1f0>)
 8001e2a:	bb1b      	cbnz	r3, 8001e74 <_svfiprintf_r+0x1b0>
 8001e2c:	9b03      	ldr	r3, [sp, #12]
 8001e2e:	3307      	adds	r3, #7
 8001e30:	f023 0307 	bic.w	r3, r3, #7
 8001e34:	3308      	adds	r3, #8
 8001e36:	9303      	str	r3, [sp, #12]
 8001e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e3a:	4433      	add	r3, r6
 8001e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8001e3e:	e768      	b.n	8001d12 <_svfiprintf_r+0x4e>
 8001e40:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e44:	460c      	mov	r4, r1
 8001e46:	2001      	movs	r0, #1
 8001e48:	e7a6      	b.n	8001d98 <_svfiprintf_r+0xd4>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	3401      	adds	r4, #1
 8001e4e:	9305      	str	r3, [sp, #20]
 8001e50:	4619      	mov	r1, r3
 8001e52:	f04f 0c0a 	mov.w	ip, #10
 8001e56:	4620      	mov	r0, r4
 8001e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e5c:	3a30      	subs	r2, #48	; 0x30
 8001e5e:	2a09      	cmp	r2, #9
 8001e60:	d903      	bls.n	8001e6a <_svfiprintf_r+0x1a6>
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0c6      	beq.n	8001df4 <_svfiprintf_r+0x130>
 8001e66:	9105      	str	r1, [sp, #20]
 8001e68:	e7c4      	b.n	8001df4 <_svfiprintf_r+0x130>
 8001e6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e6e:	4604      	mov	r4, r0
 8001e70:	2301      	movs	r3, #1
 8001e72:	e7f0      	b.n	8001e56 <_svfiprintf_r+0x192>
 8001e74:	ab03      	add	r3, sp, #12
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	462a      	mov	r2, r5
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <_svfiprintf_r+0x1f4>)
 8001e7c:	a904      	add	r1, sp, #16
 8001e7e:	4638      	mov	r0, r7
 8001e80:	f3af 8000 	nop.w
 8001e84:	1c42      	adds	r2, r0, #1
 8001e86:	4606      	mov	r6, r0
 8001e88:	d1d6      	bne.n	8001e38 <_svfiprintf_r+0x174>
 8001e8a:	89ab      	ldrh	r3, [r5, #12]
 8001e8c:	065b      	lsls	r3, r3, #25
 8001e8e:	f53f af2d 	bmi.w	8001cec <_svfiprintf_r+0x28>
 8001e92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e94:	b01d      	add	sp, #116	; 0x74
 8001e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e9a:	ab03      	add	r3, sp, #12
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	462a      	mov	r2, r5
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <_svfiprintf_r+0x1f4>)
 8001ea2:	a904      	add	r1, sp, #16
 8001ea4:	4638      	mov	r0, r7
 8001ea6:	f000 f879 	bl	8001f9c <_printf_i>
 8001eaa:	e7eb      	b.n	8001e84 <_svfiprintf_r+0x1c0>
 8001eac:	08002516 	.word	0x08002516
 8001eb0:	08002520 	.word	0x08002520
 8001eb4:	00000000 	.word	0x00000000
 8001eb8:	08001c11 	.word	0x08001c11
 8001ebc:	0800251c 	.word	0x0800251c

08001ec0 <_printf_common>:
 8001ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ec4:	4616      	mov	r6, r2
 8001ec6:	4699      	mov	r9, r3
 8001ec8:	688a      	ldr	r2, [r1, #8]
 8001eca:	690b      	ldr	r3, [r1, #16]
 8001ecc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	bfb8      	it	lt
 8001ed4:	4613      	movlt	r3, r2
 8001ed6:	6033      	str	r3, [r6, #0]
 8001ed8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001edc:	4607      	mov	r7, r0
 8001ede:	460c      	mov	r4, r1
 8001ee0:	b10a      	cbz	r2, 8001ee6 <_printf_common+0x26>
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	6033      	str	r3, [r6, #0]
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	0699      	lsls	r1, r3, #26
 8001eea:	bf42      	ittt	mi
 8001eec:	6833      	ldrmi	r3, [r6, #0]
 8001eee:	3302      	addmi	r3, #2
 8001ef0:	6033      	strmi	r3, [r6, #0]
 8001ef2:	6825      	ldr	r5, [r4, #0]
 8001ef4:	f015 0506 	ands.w	r5, r5, #6
 8001ef8:	d106      	bne.n	8001f08 <_printf_common+0x48>
 8001efa:	f104 0a19 	add.w	sl, r4, #25
 8001efe:	68e3      	ldr	r3, [r4, #12]
 8001f00:	6832      	ldr	r2, [r6, #0]
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	42ab      	cmp	r3, r5
 8001f06:	dc26      	bgt.n	8001f56 <_printf_common+0x96>
 8001f08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001f0c:	1e13      	subs	r3, r2, #0
 8001f0e:	6822      	ldr	r2, [r4, #0]
 8001f10:	bf18      	it	ne
 8001f12:	2301      	movne	r3, #1
 8001f14:	0692      	lsls	r2, r2, #26
 8001f16:	d42b      	bmi.n	8001f70 <_printf_common+0xb0>
 8001f18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f1c:	4649      	mov	r1, r9
 8001f1e:	4638      	mov	r0, r7
 8001f20:	47c0      	blx	r8
 8001f22:	3001      	adds	r0, #1
 8001f24:	d01e      	beq.n	8001f64 <_printf_common+0xa4>
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	6922      	ldr	r2, [r4, #16]
 8001f2a:	f003 0306 	and.w	r3, r3, #6
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf02      	ittt	eq
 8001f32:	68e5      	ldreq	r5, [r4, #12]
 8001f34:	6833      	ldreq	r3, [r6, #0]
 8001f36:	1aed      	subeq	r5, r5, r3
 8001f38:	68a3      	ldr	r3, [r4, #8]
 8001f3a:	bf0c      	ite	eq
 8001f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f40:	2500      	movne	r5, #0
 8001f42:	4293      	cmp	r3, r2
 8001f44:	bfc4      	itt	gt
 8001f46:	1a9b      	subgt	r3, r3, r2
 8001f48:	18ed      	addgt	r5, r5, r3
 8001f4a:	2600      	movs	r6, #0
 8001f4c:	341a      	adds	r4, #26
 8001f4e:	42b5      	cmp	r5, r6
 8001f50:	d11a      	bne.n	8001f88 <_printf_common+0xc8>
 8001f52:	2000      	movs	r0, #0
 8001f54:	e008      	b.n	8001f68 <_printf_common+0xa8>
 8001f56:	2301      	movs	r3, #1
 8001f58:	4652      	mov	r2, sl
 8001f5a:	4649      	mov	r1, r9
 8001f5c:	4638      	mov	r0, r7
 8001f5e:	47c0      	blx	r8
 8001f60:	3001      	adds	r0, #1
 8001f62:	d103      	bne.n	8001f6c <_printf_common+0xac>
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f6c:	3501      	adds	r5, #1
 8001f6e:	e7c6      	b.n	8001efe <_printf_common+0x3e>
 8001f70:	18e1      	adds	r1, r4, r3
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	2030      	movs	r0, #48	; 0x30
 8001f76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f7a:	4422      	add	r2, r4
 8001f7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f84:	3302      	adds	r3, #2
 8001f86:	e7c7      	b.n	8001f18 <_printf_common+0x58>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	4622      	mov	r2, r4
 8001f8c:	4649      	mov	r1, r9
 8001f8e:	4638      	mov	r0, r7
 8001f90:	47c0      	blx	r8
 8001f92:	3001      	adds	r0, #1
 8001f94:	d0e6      	beq.n	8001f64 <_printf_common+0xa4>
 8001f96:	3601      	adds	r6, #1
 8001f98:	e7d9      	b.n	8001f4e <_printf_common+0x8e>
	...

08001f9c <_printf_i>:
 8001f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fa0:	7e0f      	ldrb	r7, [r1, #24]
 8001fa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001fa4:	2f78      	cmp	r7, #120	; 0x78
 8001fa6:	4691      	mov	r9, r2
 8001fa8:	4680      	mov	r8, r0
 8001faa:	460c      	mov	r4, r1
 8001fac:	469a      	mov	sl, r3
 8001fae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001fb2:	d807      	bhi.n	8001fc4 <_printf_i+0x28>
 8001fb4:	2f62      	cmp	r7, #98	; 0x62
 8001fb6:	d80a      	bhi.n	8001fce <_printf_i+0x32>
 8001fb8:	2f00      	cmp	r7, #0
 8001fba:	f000 80d4 	beq.w	8002166 <_printf_i+0x1ca>
 8001fbe:	2f58      	cmp	r7, #88	; 0x58
 8001fc0:	f000 80c0 	beq.w	8002144 <_printf_i+0x1a8>
 8001fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001fcc:	e03a      	b.n	8002044 <_printf_i+0xa8>
 8001fce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001fd2:	2b15      	cmp	r3, #21
 8001fd4:	d8f6      	bhi.n	8001fc4 <_printf_i+0x28>
 8001fd6:	a101      	add	r1, pc, #4	; (adr r1, 8001fdc <_printf_i+0x40>)
 8001fd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001fdc:	08002035 	.word	0x08002035
 8001fe0:	08002049 	.word	0x08002049
 8001fe4:	08001fc5 	.word	0x08001fc5
 8001fe8:	08001fc5 	.word	0x08001fc5
 8001fec:	08001fc5 	.word	0x08001fc5
 8001ff0:	08001fc5 	.word	0x08001fc5
 8001ff4:	08002049 	.word	0x08002049
 8001ff8:	08001fc5 	.word	0x08001fc5
 8001ffc:	08001fc5 	.word	0x08001fc5
 8002000:	08001fc5 	.word	0x08001fc5
 8002004:	08001fc5 	.word	0x08001fc5
 8002008:	0800214d 	.word	0x0800214d
 800200c:	08002075 	.word	0x08002075
 8002010:	08002107 	.word	0x08002107
 8002014:	08001fc5 	.word	0x08001fc5
 8002018:	08001fc5 	.word	0x08001fc5
 800201c:	0800216f 	.word	0x0800216f
 8002020:	08001fc5 	.word	0x08001fc5
 8002024:	08002075 	.word	0x08002075
 8002028:	08001fc5 	.word	0x08001fc5
 800202c:	08001fc5 	.word	0x08001fc5
 8002030:	0800210f 	.word	0x0800210f
 8002034:	682b      	ldr	r3, [r5, #0]
 8002036:	1d1a      	adds	r2, r3, #4
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	602a      	str	r2, [r5, #0]
 800203c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002044:	2301      	movs	r3, #1
 8002046:	e09f      	b.n	8002188 <_printf_i+0x1ec>
 8002048:	6820      	ldr	r0, [r4, #0]
 800204a:	682b      	ldr	r3, [r5, #0]
 800204c:	0607      	lsls	r7, r0, #24
 800204e:	f103 0104 	add.w	r1, r3, #4
 8002052:	6029      	str	r1, [r5, #0]
 8002054:	d501      	bpl.n	800205a <_printf_i+0xbe>
 8002056:	681e      	ldr	r6, [r3, #0]
 8002058:	e003      	b.n	8002062 <_printf_i+0xc6>
 800205a:	0646      	lsls	r6, r0, #25
 800205c:	d5fb      	bpl.n	8002056 <_printf_i+0xba>
 800205e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002062:	2e00      	cmp	r6, #0
 8002064:	da03      	bge.n	800206e <_printf_i+0xd2>
 8002066:	232d      	movs	r3, #45	; 0x2d
 8002068:	4276      	negs	r6, r6
 800206a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800206e:	485a      	ldr	r0, [pc, #360]	; (80021d8 <_printf_i+0x23c>)
 8002070:	230a      	movs	r3, #10
 8002072:	e012      	b.n	800209a <_printf_i+0xfe>
 8002074:	682b      	ldr	r3, [r5, #0]
 8002076:	6820      	ldr	r0, [r4, #0]
 8002078:	1d19      	adds	r1, r3, #4
 800207a:	6029      	str	r1, [r5, #0]
 800207c:	0605      	lsls	r5, r0, #24
 800207e:	d501      	bpl.n	8002084 <_printf_i+0xe8>
 8002080:	681e      	ldr	r6, [r3, #0]
 8002082:	e002      	b.n	800208a <_printf_i+0xee>
 8002084:	0641      	lsls	r1, r0, #25
 8002086:	d5fb      	bpl.n	8002080 <_printf_i+0xe4>
 8002088:	881e      	ldrh	r6, [r3, #0]
 800208a:	4853      	ldr	r0, [pc, #332]	; (80021d8 <_printf_i+0x23c>)
 800208c:	2f6f      	cmp	r7, #111	; 0x6f
 800208e:	bf0c      	ite	eq
 8002090:	2308      	moveq	r3, #8
 8002092:	230a      	movne	r3, #10
 8002094:	2100      	movs	r1, #0
 8002096:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800209a:	6865      	ldr	r5, [r4, #4]
 800209c:	60a5      	str	r5, [r4, #8]
 800209e:	2d00      	cmp	r5, #0
 80020a0:	bfa2      	ittt	ge
 80020a2:	6821      	ldrge	r1, [r4, #0]
 80020a4:	f021 0104 	bicge.w	r1, r1, #4
 80020a8:	6021      	strge	r1, [r4, #0]
 80020aa:	b90e      	cbnz	r6, 80020b0 <_printf_i+0x114>
 80020ac:	2d00      	cmp	r5, #0
 80020ae:	d04b      	beq.n	8002148 <_printf_i+0x1ac>
 80020b0:	4615      	mov	r5, r2
 80020b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80020b6:	fb03 6711 	mls	r7, r3, r1, r6
 80020ba:	5dc7      	ldrb	r7, [r0, r7]
 80020bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80020c0:	4637      	mov	r7, r6
 80020c2:	42bb      	cmp	r3, r7
 80020c4:	460e      	mov	r6, r1
 80020c6:	d9f4      	bls.n	80020b2 <_printf_i+0x116>
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d10b      	bne.n	80020e4 <_printf_i+0x148>
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	07de      	lsls	r6, r3, #31
 80020d0:	d508      	bpl.n	80020e4 <_printf_i+0x148>
 80020d2:	6923      	ldr	r3, [r4, #16]
 80020d4:	6861      	ldr	r1, [r4, #4]
 80020d6:	4299      	cmp	r1, r3
 80020d8:	bfde      	ittt	le
 80020da:	2330      	movle	r3, #48	; 0x30
 80020dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80020e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80020e4:	1b52      	subs	r2, r2, r5
 80020e6:	6122      	str	r2, [r4, #16]
 80020e8:	f8cd a000 	str.w	sl, [sp]
 80020ec:	464b      	mov	r3, r9
 80020ee:	aa03      	add	r2, sp, #12
 80020f0:	4621      	mov	r1, r4
 80020f2:	4640      	mov	r0, r8
 80020f4:	f7ff fee4 	bl	8001ec0 <_printf_common>
 80020f8:	3001      	adds	r0, #1
 80020fa:	d14a      	bne.n	8002192 <_printf_i+0x1f6>
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	b004      	add	sp, #16
 8002102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	f043 0320 	orr.w	r3, r3, #32
 800210c:	6023      	str	r3, [r4, #0]
 800210e:	4833      	ldr	r0, [pc, #204]	; (80021dc <_printf_i+0x240>)
 8002110:	2778      	movs	r7, #120	; 0x78
 8002112:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	6829      	ldr	r1, [r5, #0]
 800211a:	061f      	lsls	r7, r3, #24
 800211c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002120:	d402      	bmi.n	8002128 <_printf_i+0x18c>
 8002122:	065f      	lsls	r7, r3, #25
 8002124:	bf48      	it	mi
 8002126:	b2b6      	uxthmi	r6, r6
 8002128:	07df      	lsls	r7, r3, #31
 800212a:	bf48      	it	mi
 800212c:	f043 0320 	orrmi.w	r3, r3, #32
 8002130:	6029      	str	r1, [r5, #0]
 8002132:	bf48      	it	mi
 8002134:	6023      	strmi	r3, [r4, #0]
 8002136:	b91e      	cbnz	r6, 8002140 <_printf_i+0x1a4>
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	f023 0320 	bic.w	r3, r3, #32
 800213e:	6023      	str	r3, [r4, #0]
 8002140:	2310      	movs	r3, #16
 8002142:	e7a7      	b.n	8002094 <_printf_i+0xf8>
 8002144:	4824      	ldr	r0, [pc, #144]	; (80021d8 <_printf_i+0x23c>)
 8002146:	e7e4      	b.n	8002112 <_printf_i+0x176>
 8002148:	4615      	mov	r5, r2
 800214a:	e7bd      	b.n	80020c8 <_printf_i+0x12c>
 800214c:	682b      	ldr	r3, [r5, #0]
 800214e:	6826      	ldr	r6, [r4, #0]
 8002150:	6961      	ldr	r1, [r4, #20]
 8002152:	1d18      	adds	r0, r3, #4
 8002154:	6028      	str	r0, [r5, #0]
 8002156:	0635      	lsls	r5, r6, #24
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	d501      	bpl.n	8002160 <_printf_i+0x1c4>
 800215c:	6019      	str	r1, [r3, #0]
 800215e:	e002      	b.n	8002166 <_printf_i+0x1ca>
 8002160:	0670      	lsls	r0, r6, #25
 8002162:	d5fb      	bpl.n	800215c <_printf_i+0x1c0>
 8002164:	8019      	strh	r1, [r3, #0]
 8002166:	2300      	movs	r3, #0
 8002168:	6123      	str	r3, [r4, #16]
 800216a:	4615      	mov	r5, r2
 800216c:	e7bc      	b.n	80020e8 <_printf_i+0x14c>
 800216e:	682b      	ldr	r3, [r5, #0]
 8002170:	1d1a      	adds	r2, r3, #4
 8002172:	602a      	str	r2, [r5, #0]
 8002174:	681d      	ldr	r5, [r3, #0]
 8002176:	6862      	ldr	r2, [r4, #4]
 8002178:	2100      	movs	r1, #0
 800217a:	4628      	mov	r0, r5
 800217c:	f7fe f840 	bl	8000200 <memchr>
 8002180:	b108      	cbz	r0, 8002186 <_printf_i+0x1ea>
 8002182:	1b40      	subs	r0, r0, r5
 8002184:	6060      	str	r0, [r4, #4]
 8002186:	6863      	ldr	r3, [r4, #4]
 8002188:	6123      	str	r3, [r4, #16]
 800218a:	2300      	movs	r3, #0
 800218c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002190:	e7aa      	b.n	80020e8 <_printf_i+0x14c>
 8002192:	6923      	ldr	r3, [r4, #16]
 8002194:	462a      	mov	r2, r5
 8002196:	4649      	mov	r1, r9
 8002198:	4640      	mov	r0, r8
 800219a:	47d0      	blx	sl
 800219c:	3001      	adds	r0, #1
 800219e:	d0ad      	beq.n	80020fc <_printf_i+0x160>
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	079b      	lsls	r3, r3, #30
 80021a4:	d413      	bmi.n	80021ce <_printf_i+0x232>
 80021a6:	68e0      	ldr	r0, [r4, #12]
 80021a8:	9b03      	ldr	r3, [sp, #12]
 80021aa:	4298      	cmp	r0, r3
 80021ac:	bfb8      	it	lt
 80021ae:	4618      	movlt	r0, r3
 80021b0:	e7a6      	b.n	8002100 <_printf_i+0x164>
 80021b2:	2301      	movs	r3, #1
 80021b4:	4632      	mov	r2, r6
 80021b6:	4649      	mov	r1, r9
 80021b8:	4640      	mov	r0, r8
 80021ba:	47d0      	blx	sl
 80021bc:	3001      	adds	r0, #1
 80021be:	d09d      	beq.n	80020fc <_printf_i+0x160>
 80021c0:	3501      	adds	r5, #1
 80021c2:	68e3      	ldr	r3, [r4, #12]
 80021c4:	9903      	ldr	r1, [sp, #12]
 80021c6:	1a5b      	subs	r3, r3, r1
 80021c8:	42ab      	cmp	r3, r5
 80021ca:	dcf2      	bgt.n	80021b2 <_printf_i+0x216>
 80021cc:	e7eb      	b.n	80021a6 <_printf_i+0x20a>
 80021ce:	2500      	movs	r5, #0
 80021d0:	f104 0619 	add.w	r6, r4, #25
 80021d4:	e7f5      	b.n	80021c2 <_printf_i+0x226>
 80021d6:	bf00      	nop
 80021d8:	08002527 	.word	0x08002527
 80021dc:	08002538 	.word	0x08002538

080021e0 <memmove>:
 80021e0:	4288      	cmp	r0, r1
 80021e2:	b510      	push	{r4, lr}
 80021e4:	eb01 0402 	add.w	r4, r1, r2
 80021e8:	d902      	bls.n	80021f0 <memmove+0x10>
 80021ea:	4284      	cmp	r4, r0
 80021ec:	4623      	mov	r3, r4
 80021ee:	d807      	bhi.n	8002200 <memmove+0x20>
 80021f0:	1e43      	subs	r3, r0, #1
 80021f2:	42a1      	cmp	r1, r4
 80021f4:	d008      	beq.n	8002208 <memmove+0x28>
 80021f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80021fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80021fe:	e7f8      	b.n	80021f2 <memmove+0x12>
 8002200:	4402      	add	r2, r0
 8002202:	4601      	mov	r1, r0
 8002204:	428a      	cmp	r2, r1
 8002206:	d100      	bne.n	800220a <memmove+0x2a>
 8002208:	bd10      	pop	{r4, pc}
 800220a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800220e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002212:	e7f7      	b.n	8002204 <memmove+0x24>

08002214 <_sbrk_r>:
 8002214:	b538      	push	{r3, r4, r5, lr}
 8002216:	4d06      	ldr	r5, [pc, #24]	; (8002230 <_sbrk_r+0x1c>)
 8002218:	2300      	movs	r3, #0
 800221a:	4604      	mov	r4, r0
 800221c:	4608      	mov	r0, r1
 800221e:	602b      	str	r3, [r5, #0]
 8002220:	f7fe ffde 	bl	80011e0 <_sbrk>
 8002224:	1c43      	adds	r3, r0, #1
 8002226:	d102      	bne.n	800222e <_sbrk_r+0x1a>
 8002228:	682b      	ldr	r3, [r5, #0]
 800222a:	b103      	cbz	r3, 800222e <_sbrk_r+0x1a>
 800222c:	6023      	str	r3, [r4, #0]
 800222e:	bd38      	pop	{r3, r4, r5, pc}
 8002230:	20007e1c 	.word	0x20007e1c

08002234 <memcpy>:
 8002234:	440a      	add	r2, r1
 8002236:	4291      	cmp	r1, r2
 8002238:	f100 33ff 	add.w	r3, r0, #4294967295
 800223c:	d100      	bne.n	8002240 <memcpy+0xc>
 800223e:	4770      	bx	lr
 8002240:	b510      	push	{r4, lr}
 8002242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800224a:	4291      	cmp	r1, r2
 800224c:	d1f9      	bne.n	8002242 <memcpy+0xe>
 800224e:	bd10      	pop	{r4, pc}

08002250 <_realloc_r>:
 8002250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002254:	4680      	mov	r8, r0
 8002256:	4614      	mov	r4, r2
 8002258:	460e      	mov	r6, r1
 800225a:	b921      	cbnz	r1, 8002266 <_realloc_r+0x16>
 800225c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002260:	4611      	mov	r1, r2
 8002262:	f7ff bc49 	b.w	8001af8 <_malloc_r>
 8002266:	b92a      	cbnz	r2, 8002274 <_realloc_r+0x24>
 8002268:	f7ff fbda 	bl	8001a20 <_free_r>
 800226c:	4625      	mov	r5, r4
 800226e:	4628      	mov	r0, r5
 8002270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002274:	f000 f81b 	bl	80022ae <_malloc_usable_size_r>
 8002278:	4284      	cmp	r4, r0
 800227a:	4607      	mov	r7, r0
 800227c:	d802      	bhi.n	8002284 <_realloc_r+0x34>
 800227e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002282:	d812      	bhi.n	80022aa <_realloc_r+0x5a>
 8002284:	4621      	mov	r1, r4
 8002286:	4640      	mov	r0, r8
 8002288:	f7ff fc36 	bl	8001af8 <_malloc_r>
 800228c:	4605      	mov	r5, r0
 800228e:	2800      	cmp	r0, #0
 8002290:	d0ed      	beq.n	800226e <_realloc_r+0x1e>
 8002292:	42bc      	cmp	r4, r7
 8002294:	4622      	mov	r2, r4
 8002296:	4631      	mov	r1, r6
 8002298:	bf28      	it	cs
 800229a:	463a      	movcs	r2, r7
 800229c:	f7ff ffca 	bl	8002234 <memcpy>
 80022a0:	4631      	mov	r1, r6
 80022a2:	4640      	mov	r0, r8
 80022a4:	f7ff fbbc 	bl	8001a20 <_free_r>
 80022a8:	e7e1      	b.n	800226e <_realloc_r+0x1e>
 80022aa:	4635      	mov	r5, r6
 80022ac:	e7df      	b.n	800226e <_realloc_r+0x1e>

080022ae <_malloc_usable_size_r>:
 80022ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022b2:	1f18      	subs	r0, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bfbc      	itt	lt
 80022b8:	580b      	ldrlt	r3, [r1, r0]
 80022ba:	18c0      	addlt	r0, r0, r3
 80022bc:	4770      	bx	lr
	...

080022c0 <_init>:
 80022c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c2:	bf00      	nop
 80022c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c6:	bc08      	pop	{r3}
 80022c8:	469e      	mov	lr, r3
 80022ca:	4770      	bx	lr

080022cc <_fini>:
 80022cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ce:	bf00      	nop
 80022d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d2:	bc08      	pop	{r3}
 80022d4:	469e      	mov	lr, r3
 80022d6:	4770      	bx	lr
