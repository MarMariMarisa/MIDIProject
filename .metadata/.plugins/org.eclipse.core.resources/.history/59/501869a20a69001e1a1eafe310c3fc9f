/*
 * systick.h
 *
 *  Created on: Jan 8, 2023
 *      Author: bruce
 */

#ifndef INC_SYSTICK_H_
#define INC_SYSTICK_H_

#include "stm32l476xx.h"
#include "stdint.h"

//create struct to hold the systic registers

struct SYST{
	uint32_t CSR;
	uint32_t RVR;
	uint32_t CVR;
	uint32_t CALIB;
};

static struct systick* SYST_TICK = (struct systick*) 0xE000E010;


// This function is to Initialize SysTick registers
struct SYST* init_systick(){
	    // Set timer to 10 ms
	    SYST_TICK->RVR = 7999999;
	    // Turn on timer -
	    SYST_TICK->CSR |= (1<<2); // Use pc source
	    SYST_TICK->CSR |= (1<<0); // Enable

}

	// Use the SysTick global structure pointer to do the following in this
	// exact order with separate lines for each step:
	//
	// Disable SysTick by clearing the CTRL (CSR) register.
	// Set the LOAD (RVR) to 8 million to give us a 100 milliseconds timer.
	// Set the clock source bit in the CTRL (CSR) to the internal clock.
	// Set the enable bit in the CTRL (CSR) to start the timer.


// This fuction is to create delay using SysTick timer counter
static void delay_systick();

	// Using the SysTick global structure pointer do the following:
	// Create a for loop that loops 10 times
	// Inside that for loop check the COUNTFLAG bit in the CTRL (CSR)
	// register in a loop. When that bit is set exit this inner loop
	// to do another pass in the outer loop of 10.


#endif /* INC_SYSTICK_H_ */
