/*
 * project.c
 *
 * Created on: Jan 8, 2023
 * Author: bruce
 */

#include "project.h"
#include "printf.h"
#include "LED.h"
#include "systick.h"
#include "UART.h"
#include "string.h"
#include "stdio.h"
#include "reader.h"
#include "song.h"
#include "stdlib.h"
#include "math.h"
#include "ctype.h"
#include "interruptHandlers.h"
#include "main.h"

// Static constants
static const int MAX_STRING_SIZE = 64;

// Global variables
volatile int isRemote = 1;
volatile int PLAY_PAUSE_TOG = 0;
char BUFFER[128];
int currentSongNum = -1;
volatile int lightState = 0;

// Function to switch to the next song and display its information
void next_song(){
    currentSongNum++;
    if(currentSongNum == 5){
        currentSongNum = 0;
    }

    // Code to extract song information (title and copyright) goes here

    printf("\r\n%s", "Current Song:");
    printf("\r\n%s%s", "Song Title: ", songTitle);
    printf("\r\n%s%s\r\n", "Song Copyright: ", songCopyright);
}

// Function to initiate the playing of a song
void play_song(){
    PLAY_PAUSE_TOG = 1;
    lightState = 1;
    LED_On(EXTERN_LED);
}

// Function to stop the currently playing song
void stop_song(){
    lightState = 0;
    LED_Off(EXTERN_LED);
}

// Function to pause the currently playing song
char* pause_song() {
    lightState = 2;
    char BUFFER[MAX_STRING_SIZE]; // Declare BUFFER as static
    PLAY_PAUSE_TOG = 0;
    init_systick();
    int cnt = 0;
    int index = 0;
    char ch = 0;
    int going = 1;

    // Loop to read characters until '\r' is encountered or lightState changes
    while (going == 1 && lightState == 2) {
        cnt++;
        ch = USART_Read_Nonblocking(USART2);
        if (ch == '\r') {
            going = 0;
        } else {
            if (ch != 0) {
                printf("%c", ch);
                BUFFER[index] = ch;
                index++;
            }
            delay_systick();
            if (cnt == 1000) {
                LED_Toggle(EXTERN_LED);
                cnt = 0;
            }
        }
    }
    printf("\r\n");
    BUFFER[index] = 0;
    char* toReturn = BUFFER; // Return a pointer to BUFFER
    return toReturn;
}

// Function to manually pause the song with a delay
void manual_pause(){
    lightState = 2;
    PLAY_PAUSE_TOG = 0;
    printf("\r\n%s\r\n", "i am paused technically");
    int cnt = 0;

    // Delay loop
    while (cnt < 1000) {
        cnt++;
        delay_systick();
        if (cnt == 1000) {
            LED_Toggle(EXTERN_LED);
        }
    }
    init_player();
}

// Function to take input from the remote control
void take_input_remote(char initialInput){
    char* input = 0;

    // If initial input exists, set input equal to it
    if(initialInput == 0){
        input = read_line();
        initialInput = *input;
    }
    *input = initialInput;

    // Check input vs commands
    if(strcmp(input, "NEXT") == 0){
        next_song();
        printf("\r\n");
    }
    else if(strcmp(input, "PLAY") == 0){
        play_song();
        printf("\r\n");
    }
    else if(strcmp(input, "STOP") == 0){
        stop_song();
        printf("\r\n");
    }
    else if(strcmp(input, "HELP") == 0){
        printf("\n\rAvailable User Commands\n\rNEXT - Show next song info\n\rPLAY - Play the song (LED on)\n\rPAUSE - Pause the song (LED flash)\n\rSTOP - Stop the song (LED off)\n\r");
    }
    else if(strcmp(input, "PAUSE") == 0){
        printf("\r\n");
        char* pausedI = pause_song();
        take_input_remote(*pausedI);
    }
    else{
        if(isRemote == 0){
            printf("\r");
        }
        else{
            printf("\r\nInvalid Input");
            printf("\r\n");
        }
    }
}

// Function to print the mode information
void mode_print(){
    if(isRemote == 1){
        printf("\r\n%s", "***REMOTE MODE ACTIVE***");
        printf("\n\rAvailable User Commands\n\rNEXT - Show next song info\n\rPLAY - Play the song (LED on)\n\rPAUSE - Pause the song (LED flash)\n\rSTOP - Stop the song (LED off)\n\r");
    }
    else{
        printf("\r\n%s\r\n", "***MANUAL OVERRIDE MODE ACTIVE***");
    }
}

// Function to initialize the player
void init_player(){
    init_systick();

    // Initialize the player loop
    while(0 == 0){
        if(isRemote == 1){
            take_input_remote(0);
        }
        else{
            if(lightState == 2){
                int cnt = 0;

                // Flash LED while in pause state
                while (cnt < 1000) {
                    cnt++;
                    delay_systick();
                    if (cnt == 1000) {
                        LED_Toggle(EXTERN_LED);
                        PLAY_PAUSE_TOG = 0;
                    }
                }
            }
            else if(lightState == 1){
                LED_On(EXTERN_LED);
            }
            else{
                LED_Off(EXTERN_LED);
            }
        }
    }
}
